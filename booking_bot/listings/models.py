import logging
from datetime import date, timedelta

from django.db import models
from django.contrib.auth.models import User

from booking_bot.core.models import AuditLog
from booking_bot.core.security import EncryptionService

logger = logging.getLogger(__name__)

class City(models.Model):
    name = models.CharField(max_length=100, unique=True)
    # Add any other city-specific fields if needed in the future

    def __str__(self):
        return self.name

    class Meta:
        verbose_name_plural = "Cities"

class District(models.Model):
    name = models.CharField(max_length=100)
    city = models.ForeignKey(City, on_delete=models.CASCADE, related_name='districts')
    # Add any other district-specific fields if needed

    def __str__(self):
        return f"{self.name}, {self.city.name}"

    class Meta:
        unique_together = ('name', 'city') # Ensure district names are unique within a city


class Property(models.Model):
    """–ú–æ–¥–µ–ª—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ—Å—É—Ç–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã"""

    PROPERTY_CLASS_CHOICES = [
        ('comfort', '–ö–æ–º—Ñ–æ—Ä—Ç'),
        ('business', '–ë–∏–∑–Ω–µ—Å'),
        ('luxury', '–ü—Ä–µ–º–∏—É–º'),
    ]

    STATUS_CHOICES = [
        ('–°–≤–æ–±–æ–¥–Ω–∞', '–°–≤–æ–±–æ–¥–Ω–∞'),
        ('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞', '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞'),
        ('–ó–∞–Ω—è—Ç–∞', '–ó–∞–Ω—è—Ç–∞'),
        ('–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏', '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏'),
    ]

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    address = models.CharField(max_length=255, verbose_name='–ê–¥—Ä–µ—Å')
    district = models.ForeignKey(
        'District',
        on_delete=models.SET_NULL,
        null=True,
        related_name='properties',
        verbose_name='–†–∞–π–æ–Ω'
    )

    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    number_of_rooms = models.PositiveIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç')
    area = models.DecimalField(
        max_digits=8,
        decimal_places=2,
        help_text="–ü–ª–æ—â–∞–¥—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö"
    )
    property_class = models.CharField(
        max_length=20,
        choices=PROPERTY_CLASS_CHOICES,
        default='comfort',
        verbose_name='–ö–ª–∞—Å—Å –∂–∏–ª—å—è'
    )
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default='–°–≤–æ–±–æ–¥–Ω–∞',
        verbose_name='–°—Ç–∞—Ç—É—Å'
    )

    # –î–æ—Å—Ç—É–ø –∫ –∫–≤–∞—Ä—Ç–∏—Ä–µ (–Ω–æ–≤—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
    entry_floor = models.IntegerField(
        null=True,
        blank=True,
        verbose_name='–≠—Ç–∞–∂'
    )
    entry_code = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        verbose_name='–ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞'
    )
    key_safe_code = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        verbose_name='–ö–æ–¥ —Å–µ–π—Ñ–∞'
    )
    digital_lock_code = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        verbose_name='–ö–æ–¥ –∑–∞–º–∫–∞'
    )
    entry_instructions = models.TextField(
        null=True,
        blank=True,
        verbose_name='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é'
    )

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    owner_phone = models.CharField(
        max_length=20,
        null=True,
        blank=True,
        verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞/—Ä–∏–µ–ª—Ç–æ—Ä–∞'
    )

    # –í–ª–∞–¥–µ–ª–µ—Ü –∏ —Ü–µ–Ω–∞
    owner = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='properties',
        limit_choices_to={'is_staff': True},
        verbose_name='–í–ª–∞–¥–µ–ª–µ—Ü'
    )
    price_per_day = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name='–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏'
    )

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    _encrypted_key_safe_code = models.TextField(
        db_column='encrypted_key_safe_code',
        blank=True,
        default=''
    )
    _encrypted_digital_lock_code = models.TextField(
        db_column='encrypted_digital_lock_code',
        blank=True,
        default=''
    )
    _encrypted_entry_code = models.TextField(
        db_column='encrypted_entry_code',
        blank=True,
        default=''
    )
    _encrypted_owner_phone = models.TextField(
        db_column='encrypted_owner_phone',
        blank=True,
        default=''
    )

    # –°–µ—Ä–≤–∏—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    _encryption_service = None

    class Meta:
        verbose_name = '–ö–≤–∞—Ä—Ç–∏—Ä–∞'
        verbose_name_plural = '–ö–≤–∞—Ä—Ç–∏—Ä—ã'
        ordering = ['-created_at']

    @property
    def encryption_service(self):
        if not self._encryption_service:
            self._encryption_service = EncryptionService()
        return self._encryption_service

    # –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    @property
    def key_safe_code(self):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ —Å–µ–π—Ñ–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏"""
        if self._encrypted_key_safe_code:
            self._log_access('view_code', {'code_type': 'key_safe'})
            return self.encryption_service.decrypt(self._encrypted_key_safe_code)
        return ''

    @key_safe_code.setter
    def key_safe_code(self, value):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å–µ–π—Ñ–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏"""
        if value:
            self._encrypted_key_safe_code = self.encryption_service.encrypt(value)
        else:
            self._encrypted_key_safe_code = ''

    @property
    def digital_lock_code(self):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ –∑–∞–º–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏"""
        if self._encrypted_digital_lock_code:
            self._log_access('view_code', {'code_type': 'digital_lock'})
            return self.encryption_service.decrypt(self._encrypted_digital_lock_code)
        return ''

    @digital_lock_code.setter
    def digital_lock_code(self, value):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∑–∞–º–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏"""
        if value:
            self._encrypted_digital_lock_code = self.encryption_service.encrypt(value)
        else:
            self._encrypted_digital_lock_code = ''

    @property
    def entry_code(self):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ –¥–æ–º–æ—Ñ–æ–Ω–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏"""
        if self._encrypted_entry_code:
            self._log_access('view_code', {'code_type': 'entry_code'})
            return self.encryption_service.decrypt(self._encrypted_entry_code)
        return ''

    @entry_code.setter
    def entry_code(self, value):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –¥–æ–º–æ—Ñ–æ–Ω–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏"""
        if value:
            self._encrypted_entry_code = self.encryption_service.encrypt(value)
        else:
            self._encrypted_entry_code = ''

    @property
    def owner_phone(self):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏"""
        if self._encrypted_owner_phone:
            self._log_access('view_phone', {'phone_type': 'owner'})
            return self.encryption_service.decrypt(self._encrypted_owner_phone)
        return ''

    @owner_phone.setter
    def owner_phone(self, value):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏"""
        if value:
            self._encrypted_owner_phone = self.encryption_service.encrypt(value)
        else:
            self._encrypted_owner_phone = ''

    def _log_access(self, action, details):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        if hasattr(self, '_accessing_user'):
            AuditLog.log(
                user=self._accessing_user,
                action=action,
                obj=self,
                details=details
            )

    def get_access_codes(self, user, log_access=True):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        codes = {}

        if log_access:
            AuditLog.log(
                user=user,
                action='view_code',
                obj=self,
                details={'codes_requested': ['all_codes']}
            )

        if self._encrypted_key_safe_code:
            codes['key_safe_code'] = self.encryption_service.decrypt(self._encrypted_key_safe_code)

        if self._encrypted_digital_lock_code:
            codes['digital_lock_code'] = self.encryption_service.decrypt(self._encrypted_digital_lock_code)

        if self._encrypted_entry_code:
            codes['entry_code'] = self.encryption_service.decrypt(self._encrypted_entry_code)

        if self._encrypted_owner_phone:
            codes['owner_phone'] = self.encryption_service.decrypt(self._encrypted_owner_phone)

        codes['entry_floor'] = self.entry_floor

        return codes

    def send_access_codes_to_user(self, user, booking):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        codes = self.get_access_codes(user, log_access=False)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        AuditLog.log(
            user=user,
            action='send_code',
            obj=self,
            details={
                'booking_id': booking.id,
                'codes_sent': list(codes.keys()),
                'recipient': user.username
            }
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞—Å–µ–ª–µ–Ω–∏—è –≤ {self.name}:\n\n"

        if codes.get('entry_floor'):
            message += f"üè¢ –≠—Ç–∞–∂: {codes['entry_floor']}\n"

        if codes.get('entry_code'):
            message += f"üî¢ –ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞: {codes['entry_code']}\n"

        if codes.get('digital_lock_code'):
            message += f"üîê –ö–æ–¥ –∑–∞–º–∫–∞: {codes['digital_lock_code']}\n"

        if codes.get('key_safe_code'):
            message += f"üîë –ö–æ–¥ —Å–µ–π—Ñ–∞: {codes['key_safe_code']}\n"

        if codes.get('owner_phone'):
            message += f"\nüìû –ö–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {codes['owner_phone']}\n"

        if self.entry_instructions:
            message += f"\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{self.entry_instructions}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
        from booking_bot.telegram_bot.utils import send_telegram_message
        from booking_bot.whatsapp_bot.utils import send_whatsapp_message

        if hasattr(user, 'profile'):
            if user.profile.telegram_chat_id:
                send_telegram_message(user.profile.telegram_chat_id, message)

            if user.profile.whatsapp_phone:
                send_whatsapp_message(user.profile.whatsapp_phone, message)

        return True

    def __str__(self):
        return f"{self.name} - {self.district}"


from django.db import models
from booking_bot.core.storage import S3PhotoStorage


class PropertyPhoto(models.Model):
    property = models.ForeignKey(
        Property,
        on_delete=models.CASCADE,
        related_name='photos'
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    image = models.ImageField(
        upload_to='property_photos/',
        storage=S3PhotoStorage,
        blank=True,
        null=True,
        max_length=500,
        help_text="–ú–∞–∫—Å–∏–º—É–º 5 –ú–ë, —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG, WEBP"
    )

    # URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π)
    image_url = models.URLField(
        blank=True,
        null=True,
        max_length=500
    )

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    order = models.PositiveIntegerField(default=0)
    is_main = models.BooleanField(default=False)
    width = models.PositiveIntegerField(null=True, blank=True)
    height = models.PositiveIntegerField(null=True, blank=True)
    file_size = models.PositiveIntegerField(null=True, blank=True)

    # CDN URL –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    cdn_url = models.URLField(blank=True, max_length=500)
    thumbnail_url = models.URLField(blank=True, max_length=500)

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['order', 'id']
        indexes = [
            models.Index(fields=['property', 'order']),
        ]

    def save(self, *args, **kwargs):
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ, –¥–µ–ª–∞–µ–º –µ–≥–æ –≥–ª–∞–≤–Ω—ã–º
        if not self.property.photos.filter(is_main=True).exists():
            self.is_main = True

        # –ï—Å–ª–∏ –¥–µ–ª–∞–µ–º —ç—Ç–æ —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω—ã–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É –¥—Ä—É–≥–∏—Ö
        if self.is_main:
            self.property.photos.exclude(pk=self.pk).update(is_main=False)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª
        if self.image:
            self.file_size = self.image.size

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            from PIL import Image
            img = Image.open(self.image)
            self.width = img.width
            self.height = img.height

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CDN URL
            storage = self.image.storage
            self.cdn_url = storage.url(self.image.name)
            self.thumbnail_url = storage.get_thumbnail_url(self.image.name)

        super().save(*args, **kwargs)

    def get_photo_url(self):
        """–ü–æ–ª—É—á–∏—Ç—å URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º CDN"""
        if self.cdn_url:
            return self.cdn_url
        elif self.image:
            return self.image.url
        elif self.image_url:
            return self.image_url
        return None

    def get_thumbnail_url(self):
        """–ü–æ–ª—É—á–∏—Ç—å URL –º–∏–Ω–∏–∞—Ç—é—Ä—ã"""
        if self.thumbnail_url:
            return self.thumbnail_url
        # Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return self.get_photo_url()

    def __str__(self):
        return f"Photo {self.id} for {self.property.name}"

# Reviews Section

class Review(models.Model):
    property = models.ForeignKey(Property, on_delete=models.CASCADE, related_name='reviews')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='reviews') # User who wrote the review
    rating = models.PositiveIntegerField(choices=[(i, str(i)) for i in range(1, 6)]) # 1 to 5 stars
    text = models.TextField(blank=True) # Review text can be optional if only rating is given
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Review for {self.property.name} by {self.user.username} - {self.rating} stars"

    class Meta:
        unique_together = ('property', 'user') # Assuming one review per user per property
        ordering = ['-created_at']

class ReviewPhoto(models.Model):
    review = models.ForeignKey(Review, on_delete=models.CASCADE, related_name='photos')
    # Using URLField for now, similar to PropertyPhoto.
    # Could be changed to ImageField if direct uploads are handled by the Django app.
    image_url = models.URLField()
    caption = models.CharField(max_length=255, null=True, blank=True)

    def __str__(self):
        return f"Photo for review {self.review.id} by {self.review.user.username}"


class CalendarDay(models.Model):
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –¥–Ω—è–º"""

    STATUS_CHOICES = [
        ('free', '–°–≤–æ–±–æ–¥–Ω–æ'),
        ('booked', '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ'),
        ('occupied', '–ó–∞–Ω—è—Ç–æ'),
        ('blocked', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º'),
        ('cleaning', '–£–±–æ—Ä–∫–∞'),
        ('maintenance', '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'),
    ]

    property = models.ForeignKey(
        'Property',
        on_delete=models.CASCADE,
        related_name='calendar_days'
    )
    date = models.DateField()
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default='free'
    )
    booking = models.ForeignKey(
        'bookings.Booking',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='calendar_days'
    )
    notes = models.TextField(
        blank=True,
        help_text="–ó–∞–º–µ—Ç–∫–∏ (–ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Ç–∏–ø —É–±–æ—Ä–∫–∏ –∏ —Ç.–¥.)"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ('property', 'date')
        indexes = [
            models.Index(fields=['property', 'date', 'status']),
            models.Index(fields=['date', 'status']),
        ]
        ordering = ['date']

    def __str__(self):
        return f"{self.property.name} - {self.date} - {self.get_status_display()}"


class PropertyCalendarManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã"""

    @staticmethod
    def initialize_calendar(property_obj, days_ahead=365):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä–µ–¥"""
        today = date.today()
        calendar_days = []

        for i in range(days_ahead):
            day = today + timedelta(days=i)
            calendar_day, created = CalendarDay.objects.get_or_create(
                property=property_obj,
                date=day,
                defaults={'status': 'free'}
            )
            if created:
                calendar_days.append(calendar_day)

        logger.info(f"Initialized {len(calendar_days)} calendar days for property {property_obj.id}")
        return calendar_days

    @staticmethod
    def check_availability(property_obj, start_date, end_date):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –¥–∞—Ç—ã"""
        unavailable_days = CalendarDay.objects.filter(
            property=property_obj,
            date__gte=start_date,
            date__lt=end_date,
            status__in=['booked', 'occupied', 'blocked', 'cleaning', 'maintenance']
        ).exists()

        return not unavailable_days

    @staticmethod
    def block_dates(property_obj, start_date, end_date, booking=None, status='booked'):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        current_date = start_date
        updated_days = []

        while current_date < end_date:
            calendar_day, created = CalendarDay.objects.update_or_create(
                property=property_obj,
                date=current_date,
                defaults={
                    'status': status,
                    'booking': booking
                }
            )
            updated_days.append(calendar_day)
            current_date += timedelta(days=1)

        logger.info(f"Blocked {len(updated_days)} days for property {property_obj.id}")
        return updated_days

    @staticmethod
    def release_dates(property_obj, start_date, end_date):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –¥–∞—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        updated = CalendarDay.objects.filter(
            property=property_obj,
            date__gte=start_date,
            date__lt=end_date
        ).update(
            status='free',
            booking=None
        )

        logger.info(f"Released {updated} days for property {property_obj.id}")
        return updated

    @staticmethod
    def add_cleaning_buffer(property_obj, checkout_date, hours=4):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É–±–æ—Ä–∫—É –ø–æ—Å–ª–µ –≤—ã–µ–∑–¥–∞"""
        # –ï—Å–ª–∏ –≤—ã–µ–∑–¥ —É—Ç—Ä–æ–º, —É–±–æ—Ä–∫–∞ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
        # –ï—Å–ª–∏ –≤—ã–µ–∑–¥ –≤–µ—á–µ—Ä–æ–º, —É–±–æ—Ä–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        checkout_time = checkout_date  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≤—ã–µ–∑–¥ –≤ 12:00

        cleaning_day, created = CalendarDay.objects.update_or_create(
            property=property_obj,
            date=checkout_date,
            defaults={
                'status': 'cleaning',
                'notes': f'–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤—ã–µ–∑–¥–∞ ({hours} —á–∞—Å–æ–≤)'
            }
        )

        return cleaning_day

    @staticmethod
    def get_calendar_view(property_obj, year, month):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        import calendar
        from datetime import date

        first_day = date(year, month, 1)
        last_day = date(year, month, calendar.monthrange(year, month)[1])

        calendar_days = CalendarDay.objects.filter(
            property=property_obj,
            date__gte=first_day,
            date__lte=last_day
        ).select_related('booking')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        days_dict = {day.date: day for day in calendar_days}

        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        cal = calendar.monthcalendar(year, month)
        calendar_matrix = []

        for week in cal:
            week_data = []
            for day in week:
                if day == 0:
                    week_data.append(None)
                else:
                    day_date = date(year, month, day)
                    calendar_day = days_dict.get(day_date)

                    week_data.append({
                        'date': day_date,
                        'day': day,
                        'status': calendar_day.status if calendar_day else 'free',
                        'booking': calendar_day.booking if calendar_day else None,
                        'is_past': day_date < date.today(),
                        'is_today': day_date == date.today(),
                    })
            calendar_matrix.append(week_data)

        return calendar_matrix

    @staticmethod
    def get_occupancy_rate(property_obj, start_date, end_date):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        total_days = (end_date - start_date).days

        if total_days <= 0:
            return 0

        occupied_days = CalendarDay.objects.filter(
            property=property_obj,
            date__gte=start_date,
            date__lt=end_date,
            status__in=['booked', 'occupied']
        ).count()

        return (occupied_days / total_days) * 100

    @staticmethod
    def find_available_periods(property_obj, min_days=1, max_days=30, limit=10):
        """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        today = date.today()
        end_search = today + timedelta(days=90)  # –ò—â–µ–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥

        available_periods = []
        current_start = None
        current_end = None

        calendar_days = CalendarDay.objects.filter(
            property=property_obj,
            date__gte=today,
            date__lte=end_search
        ).order_by('date')

        for day in calendar_days:
            if day.status == 'free':
                if current_start is None:
                    current_start = day.date
                current_end = day.date
            else:
                if current_start and current_end:
                    period_length = (current_end - current_start).days + 1
                    if min_days <= period_length <= max_days:
                        available_periods.append({
                            'start': current_start,
                            'end': current_end,
                            'days': period_length
                        })
                        if len(available_periods) >= limit:
                            break
                current_start = None
                current_end = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
        if current_start and current_end:
            period_length = (current_end - current_start).days + 1
            if min_days <= period_length <= max_days:
                available_periods.append({
                    'start': current_start,
                    'end': current_end,
                    'days': period_length
                })

        return available_periods


class Favorite(models.Model):
    """–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="favorites")
    property = models.ForeignKey(
        'listings.Property', on_delete=models.CASCADE, related_name="favorited_by"
    )

    class Meta:
        unique_together = ('user', 'property')
        verbose_name = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        verbose_name_plural = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"

    def __str__(self) -> str:  # pragma: no cover - —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        return f"{self.user.username} ‚Üí {self.property.name}"
