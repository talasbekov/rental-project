"""
Django settings for booking_bot project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^18w8^kyktt4q14w%c4tci%w(8po97jj2pd&3(#hv(dyn3hznv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '.ngrok-free.app',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'drf_spectacular_sidecar',
    'django.contrib.staticfiles',
    'booking_bot.core',
    'booking_bot.users',
    'booking_bot.listings',
    'booking_bot.bookings',
    'booking_bot.payments',
    'rest_framework',
    'drf_spectacular',
    'django_filters',
    # 'rest_framework.authtoken', # Replaced by SimpleJWT
    'booking_bot.whatsapp_bot',
    'booking_bot.telegram_bot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'booking_bot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



WSGI_APPLICATION = 'booking_bot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework default permission settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema'
}

# Django REST Framework Simple JWT settings
SIMPLE_JWT = {
    # Options:
    # 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    # 'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # 'ROTATE_REFRESH_TOKENS': False,
    # 'BLACKLIST_AFTER_ROTATION': True,
    # 'UPDATE_LAST_LOGIN': False,
    # ... many more settings
}

WHATSAPP_GRAPH_VERSION   = "v17.0"
WHATSAPP_PHONE_NUMBER_ID = "105123456789012"
WHATSAPP_ACCESS_TOKEN    = "EAAJâ€¦"
WHATSAPP_VERIFY_TOKEN    = "my_webhook_verify_token"


# Add these to your settings.py and provide actual values (preferably via env vars):
# KASPI_API_KEY = 'your_kaspi_api_key'
# KASPI_MERCHANT_ID = 'your_kaspi_merchant_id'
# KASPI_API_BASE_URL = 'https://api.kaspi.kz/v2/' # Example

# URL of this site, used by the bot to call its own API
SITE_URL = 'https://9f82-147-30-84-118.ngrok-free.app' # Change for production
API_BASE = 'https://9f82-147-30-84-118.ngrok-free.app/api/v1'

CSRF_TRUSTED_ORIGINS = [
    'https://9f82-147-30-84-118.ngrok-free.app',
    # or to trust any ngrok subdomain:
    'https://*.ngrok-free.app',
]

# Telegram Bot Token
TELEGRAM_BOT_TOKEN = "7302267102:AAGTSKRPiGWNweB-8-E1sAS6ls-UINwP4is"
BOT_SERVICE_USERNAME = 'bot_user'

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Housing Booking Bot API',
    'DESCRIPTION': 'API for managing housing bookings, users, and properties, integrated with a WhatsApp bot.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False, # Schema is served by SpectacularAPIView
    'SWAGGER_UI_DIST': 'CDN',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
}

# LOGGING CONFIGURATION
# Basic configuration to output to console.
# More advanced configurations can include file handlers, log rotation, etc.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Keep Django's default loggers
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO', # Output INFO and above (WARNING, ERROR, CRITICAL) to console
            'class': 'logging.StreamHandler', # Output to stderr
            'formatter': 'simple',
        },
        # Example of a file handler (optional, can be added later if needed)
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'debug.log',
        #     'formatter': 'verbose',
        # },
    },
    'root': { # Catch all logger (if not specified elsewhere)
        'handlers': ['console'], # Output to console by default
        'level': 'WARNING', # Default level for root if not overridden by app loggers
    },
    'loggers': {
        'django': { # Django's own logs
            'handlers': ['console'],
            'level': 'INFO', # Or 'WARNING' in production
            'propagate': False, # Don't pass to root logger if handled here
        },
        'booking_bot': { # Our app's specific logs (covers all modules within booking_bot)
            'handlers': ['console'], # Or ['console', 'file']
            'level': 'INFO', # Capture INFO level messages from our app
            'propagate': False,
        },
        # Can define for specific apps like 'booking_bot.whatsapp_bot' if needed
    }
}
