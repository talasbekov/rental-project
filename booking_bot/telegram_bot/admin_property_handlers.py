import logging
import requests
from telegram import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

from booking_bot.users.models import UserProfile
from booking_bot.core.models import AuditLog
from .constants import (
    _get_profile, log_handler, STATE_ADMIN_MENU
)
from .utils import send_telegram_message
from ..settings import API_BASE

logger = logging.getLogger(__name__)

# Admin states for property management
STATE_ADMIN_PROPERTY_LIST = "admin_property_list"
STATE_ADMIN_PROPERTY_DETAIL = "admin_property_detail" 
STATE_ADMIN_PROPERTY_EDIT = "admin_property_edit"
STATE_ADMIN_BOOKINGS_LIST = "admin_bookings_list"
STATE_ADMIN_REVIEWS_LIST = "admin_reviews_list"
STATE_ADMIN_DASHBOARD = "admin_dashboard"

# Property editing states
STATE_EDIT_PROPERTY_NAME = "edit_property_name"
STATE_EDIT_PROPERTY_DESCRIPTION = "edit_property_description"
STATE_EDIT_PROPERTY_PRICE = "edit_property_price"
STATE_EDIT_PROPERTY_STATUS = "edit_property_status"
STATE_EDIT_ACCESS_CODES = "edit_access_codes"
STATE_EDIT_ENTRY_CODE = "edit_entry_code"
STATE_EDIT_KEY_SAFE_CODE = "edit_key_safe_code"
STATE_EDIT_DIGITAL_LOCK_CODE = "edit_digital_lock_code"


def check_admin_access(profile: UserProfile) -> bool:
    """Check if user has admin access"""
    return profile and profile.role in ('admin', 'super_admin')


def get_auth_headers(profile: UserProfile) -> dict:
    """Get authentication headers for API requests"""
    state_data = profile.telegram_state or {}
    token = state_data.get('jwt_access_token')
    return {'Authorization': f'Bearer {token}'} if token else {}


@log_handler
def handle_admin_menu(chat_id: int, text: str = None) -> bool:
    """Main admin menu handler"""
    profile = _get_profile(chat_id)
    
    if not check_admin_access(profile):
        send_telegram_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return False
    
    # Set admin state
    state_data = profile.telegram_state or {}
    state_data['state'] = STATE_ADMIN_MENU
    profile.telegram_state = state_data
    profile.save()
    
    keyboard = [
        [KeyboardButton("üè† –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã"), KeyboardButton("üìä –î–∞—à–±–æ—Ä–¥")],
        [KeyboardButton("üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"), KeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")],
        [KeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    role_text = "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if profile.role == 'super_admin' else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    send_telegram_message(
        chat_id,
        f"üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n"
        f"–†–æ–ª—å: {role_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup.to_dict()
    )
    
    return True


@log_handler 
def handle_property_list(chat_id: int, text: str = None) -> bool:
    """Show list of properties for admin"""
    profile = _get_profile(chat_id)
    
    if not check_admin_access(profile):
        return False
    
    try:
        headers = get_auth_headers(profile)
        url = f"{API_BASE}/properties/my_properties/"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            properties = response.json()
            
            if not properties:
                send_telegram_message(
                    chat_id,
                    "üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä*\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã."
                )
                return True
            
            # Create inline keyboard for properties
            keyboard = []
            for prop in properties[:10]:  # Limit to 10 for readability
                status_emoji = {
                    '–°–≤–æ–±–æ–¥–Ω–∞': '‚úÖ',
                    '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞': 'üìÖ', 
                    '–ó–∞–Ω—è—Ç–∞': 'üîí',
                    '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏': 'üîß'
                }.get(prop['status'], '‚ùì')
                
                button_text = f"{status_emoji} {prop['name'][:25]}"
                if len(prop['name']) > 25:
                    button_text += "..."
                    
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"admin_property_detail_{prop['id']}"
                    )
                ])
            
            # Add navigation buttons
            keyboard.append([
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_property_refresh"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_dashboard")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            total_count = len(properties)
            send_telegram_message(
                chat_id,
                f"üè† *–ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã* ({total_count})\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=reply_markup.to_dict()
            )
            
            # Update state
            state_data = profile.telegram_state or {}
            state_data['state'] = STATE_ADMIN_PROPERTY_LIST
            profile.telegram_state = state_data
            profile.save()
            
        else:
            send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä")
            
    except Exception as e:
        logger.error(f"Error getting property list: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    return True


@log_handler
def handle_property_detail(chat_id: int, property_id: int) -> bool:
    """Show property details with admin actions"""
    profile = _get_profile(chat_id)
    
    if not check_admin_access(profile):
        return False
    
    try:
        headers = get_auth_headers(profile)
        url = f"{API_BASE}/properties/{property_id}/"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            prop = response.json()
            
            # Format property details
            rating_display = prop.get('rating_display', '–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤')
            
            details = (
                f"üè† *{prop['name']}*\n\n"
                f"üìç –ê–¥—Ä–µ—Å: {prop['address']}\n"
                f"üèòÔ∏è –†–∞–π–æ–Ω: {prop.get('district', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç: {prop['number_of_rooms']}\n"
                f"üìê –ü–ª–æ—â–∞–¥—å: {prop['area']} –º¬≤\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_display}\n"
                f"üí∞ –¶–µ–Ω–∞: {prop['price_per_day']} ‚Ç∏/—Å—É—Ç–∫–∏\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {prop['status']}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{prop['description'][:200]}"
            )
            
            if len(prop['description']) > 200:
                details += "..."
            
            # Show access codes if user has permission
            if prop.get('entry_code_display'):
                details += f"\n\nüîê *–ö–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞:*\n"
                if prop['entry_code_display']:
                    details += f"üè† –î–æ–º–æ—Ñ–æ–Ω: `{prop['entry_code_display']}`\n"
                if prop.get('key_safe_code_display'):
                    details += f"üóùÔ∏è –°–µ–π—Ñ: `{prop['key_safe_code_display']}`\n"  
                if prop.get('digital_lock_code_display'):
                    details += f"üîë –ó–∞–º–æ–∫: `{prop['digital_lock_code_display']}`\n"
            
            # Create action buttons
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_property_{property_id}"),
                    InlineKeyboardButton("üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"admin_bookings_{property_id}")
                ],
                [
                    InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã", callback_data=f"admin_reviews_{property_id}"),
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_stats_{property_id}")
                ],
                [
                    InlineKeyboardButton("üîí –ö–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞", callback_data=f"admin_codes_{property_id}")
                ],
                [
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_property_list")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            send_telegram_message(
                chat_id,
                details,
                reply_markup=reply_markup.to_dict()
            )
            
            # Update state
            state_data = profile.telegram_state or {}
            state_data['state'] = STATE_ADMIN_PROPERTY_DETAIL
            state_data['current_property_id'] = property_id
            profile.telegram_state = state_data
            profile.save()
            
            # Log access
            AuditLog.objects.create(
                user=profile.user,
                action='view_property_details',
                resource_type='Property',
                resource_id=property_id,
                details={'property_name': prop['name']}
            )
            
        else:
            send_telegram_message(chat_id, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            
    except Exception as e:
        logger.error(f"Error getting property details: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    return True


@log_handler 
def handle_property_bookings(chat_id: int, property_id: int) -> bool:
    """Show bookings for a property"""
    profile = _get_profile(chat_id)
    
    if not check_admin_access(profile):
        return False
    
    try:
        headers = get_auth_headers(profile)
        url = f"{API_BASE}/properties/{property_id}/bookings/"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            bookings = response.json()
            
            if not bookings:
                send_telegram_message(
                    chat_id,
                    "üì≠ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n"
                    "–£ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
                )
                return True
            
            # Format bookings list
            text = f"üìã *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã*\n\n"
            
            # Group by status
            active_bookings = [b for b in bookings if b['status'] in ['confirmed', 'pending_payment']]
            completed_bookings = [b for b in bookings if b['status'] == 'completed']
            cancelled_bookings = [b for b in bookings if b['status'] == 'cancelled']
            
            if active_bookings:
                text += "üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ:*\n"
                for booking in active_bookings[:5]:
                    status_emoji = "‚úÖ" if booking['status'] == 'confirmed' else "‚è≥"
                    text += (
                        f"{status_emoji} {booking['guest_name']} | "
                        f"{booking['start_date']} - {booking['end_date']} | "
                        f"{booking['total_price']}‚Ç∏\n"
                    )
                text += "\n"
            
            if completed_bookings:
                text += f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:* {len(completed_bookings)}\n"
                
            if cancelled_bookings:
                text += f"‚ùå *–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ:* {len(cancelled_bookings)}\n"
            
            # Create action buttons
            keyboard = [
                [
                    InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                                       callback_data=f"admin_booking_stats_{property_id}"),
                ],
                [
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–≤–∞—Ä—Ç–∏—Ä–µ", 
                                       callback_data=f"admin_property_detail_{property_id}")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            send_telegram_message(
                chat_id,
                text,
                reply_markup=reply_markup.to_dict()
            )
            
        else:
            send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            
    except Exception as e:
        logger.error(f"Error getting property bookings: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    return True


@log_handler
def handle_property_reviews(chat_id: int, property_id: int) -> bool:
    """Show reviews for a property"""
    profile = _get_profile(chat_id)
    
    if not check_admin_access(profile):
        return False
    
    try:
        headers = get_auth_headers(profile)
        url = f"{API_BASE}/properties/{property_id}/reviews/"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            reviews = response.json()
            
            if not reviews:
                send_telegram_message(
                    chat_id,
                    "üì≠ *–û—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n"
                    "–£ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."
                )
                return True
            
            # Format reviews
            text = f"‚≠ê *–û—Ç–∑—ã–≤—ã –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ*\n\n"
            
            for review in reviews[:5]:  # Show first 5 reviews
                stars = "‚≠ê" * review['rating']
                text += (
                    f"{stars} *{review['user_name']}*\n"
                    f"_{review['created_at'][:10]}_\n"
                )
                
                if review['comment']:
                    comment = review['comment'][:100]
                    if len(review['comment']) > 100:
                        comment += "..."
                    text += f"{comment}\n"
                
                text += "\n"
            
            if len(reviews) > 5:
                text += f"... –∏ –µ—â–µ {len(reviews) - 5} –æ—Ç–∑—ã–≤–æ–≤"
            
            # Create action buttons
            keyboard = [
                [
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–≤–∞—Ä—Ç–∏—Ä–µ", 
                                       callback_data=f"admin_property_detail_{property_id}")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            send_telegram_message(
                chat_id,
                text,
                reply_markup=reply_markup.to_dict()
            )
            
        else:
            send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
            
    except Exception as e:
        logger.error(f"Error getting property reviews: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    return True


@log_handler
def handle_admin_dashboard(chat_id: int) -> bool:
    """Show admin dashboard with statistics"""
    profile = _get_profile(chat_id)
    
    if not check_admin_access(profile):
        return False
    
    try:
        headers = get_auth_headers(profile)
        url = f"{API_BASE}/properties/dashboard/"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            stats = response.json()
            
            text = (
                f"üìä *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\n"
                f"üè† –ö–≤–∞—Ä—Ç–∏—Ä: {stats['total_properties']}\n"
                f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats['active_bookings']}\n"
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats['completed_bookings']}\n"
                f"‚≠ê –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total_reviews']}\n"
                f"üåü –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['average_rating']}\n\n"
            )
            
            # Add quick actions
            keyboard = [
                [
                    InlineKeyboardButton("üè† –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data="admin_property_list"),
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add_property")
                ],
                [
                    InlineKeyboardButton("üìã –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="admin_all_bookings"),
                    InlineKeyboardButton("‚≠ê –í—Å–µ –æ—Ç–∑—ã–≤—ã", callback_data="admin_all_reviews")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            send_telegram_message(
                chat_id,
                text,
                reply_markup=reply_markup.to_dict()
            )
            
            # Update state
            state_data = profile.telegram_state or {}
            state_data['state'] = STATE_ADMIN_DASHBOARD
            profile.telegram_state = state_data
            profile.save()
            
        else:
            send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
    except Exception as e:
        logger.error(f"Error getting admin dashboard: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    return True


@log_handler
def handle_edit_property_menu(chat_id: int, property_id: int) -> bool:
    """Show property edit menu"""
    profile = _get_profile(chat_id)
    
    if not check_admin_access(profile):
        return False
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_edit_name_{property_id}"),
            InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_edit_desc_{property_id}")
        ],
        [
            InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"admin_edit_price_{property_id}"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"admin_edit_status_{property_id}")
        ],
        [
            InlineKeyboardButton("üîê –ö–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞", callback_data=f"admin_edit_codes_{property_id}")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"admin_property_detail_{property_id}")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    send_telegram_message(
        chat_id,
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup.to_dict()
    )
    
    # Update state
    state_data = profile.telegram_state or {}
    state_data['state'] = STATE_ADMIN_PROPERTY_EDIT
    state_data['current_property_id'] = property_id
    profile.telegram_state = state_data
    profile.save()
    
    return True


@log_handler
def handle_edit_access_codes(chat_id: int, property_id: int) -> bool:
    """Show access codes edit menu"""
    profile = _get_profile(chat_id)
    
    if not check_admin_access(profile):
        return False
    
    # Log sensitive operation
    AuditLog.objects.create(
        user=profile.user,
        action='access_property_codes_edit',
        resource_type='Property',
        resource_id=property_id,
        details={'action': 'opened_codes_edit_menu'}
    )
    
    keyboard = [
        [
            InlineKeyboardButton("üè† –ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞", callback_data=f"edit_entry_code_{property_id}")
        ],
        [
            InlineKeyboardButton("üóùÔ∏è –ö–æ–¥ —Å–µ–π—Ñ–∞", callback_data=f"edit_key_safe_code_{property_id}")
        ],
        [
            InlineKeyboardButton("üîë –ö–æ–¥ –∑–∞–º–∫–∞", callback_data=f"edit_digital_lock_code_{property_id}")
        ],
        [
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"admin_edit_property_{property_id}")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    send_telegram_message(
        chat_id,
        "üîê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞*\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–¥–∞–º–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup.to_dict()
    )
    
    # Update state
    state_data = profile.telegram_state or {}
    state_data['state'] = STATE_EDIT_ACCESS_CODES
    state_data['current_property_id'] = property_id
    profile.telegram_state = state_data
    profile.save()
    
    return True