import requests
import logging
from django.conf import settings
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from booking_bot.listings import filters
from booking_bot.telegram_bot.admin_handlers import show_admin_panel
from booking_bot.telegram_bot.constants import _get_profile, start_command_handler
from booking_bot.telegram_bot.handlers import (
    help_command_handler,
)
from booking_bot.telegram_bot.state_flow import (
    handle_cancel_booking_start,
    show_user_bookings_with_cancel,
    prompt_city,
)
from booking_bot.telegram_bot.main import telegram_message_handler
from booking_bot.telegram_bot.utils import send_telegram_message

logger = logging.getLogger(__name__)


def setup_bot_menu():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –±–æ—Ç–∞ —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–µ–ø–∫–æ–π"""
    bot_token = settings.TELEGRAM_BOT_TOKEN

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    commands = [
        {"command": "start", "description": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
        {"command": "search", "description": "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"},
        {"command": "bookings", "description": "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"},
        {"command": "status", "description": "üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏"},
        {"command": "help", "description": "‚ùì –ü–æ–º–æ—â—å"},
        {"command": "admin", "description": "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"},
    ]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    url = f"https://api.telegram.org/bot{bot_token}/setMyCommands"
    response = requests.post(url, json={"commands": commands})

    if response.status_code == 200:
        logger.info("Bot commands set successfully")
    else:
        logger.error(f"Failed to set bot commands: {response.text}")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    menu_button_url = f"https://api.telegram.org/bot{bot_token}/setChatMenuButton"
    menu_button_data = {"menu_button": {"type": "commands", "text": "–ú–µ–Ω—é"}}

    response = requests.post(menu_button_url, json=menu_button_data)

    if response.status_code == 200:
        logger.info("Bot menu button set successfully")
        return True
    else:
        logger.error(f"Failed to set menu button: {response.text}")
        return False


# –î–æ–±–∞–≤–∏—Ç—å –≤ booking_bot/telegram_bot/main.py
def setup_application():
    global application
    if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN.startswith(
        "PLACEHOLDER"
    ):
        logger.warning("TELEGRAM_BOT_TOKEN not configured; bot will not start.")
        return

    builder = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN)
    application = builder.build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(
        CommandHandler(
            "start",
            lambda update, ctx: start_command_handler(
                update.effective_chat.id,
                update.effective_user.first_name,
                update.effective_user.last_name,
            ),
        )
    )
    application.add_handler(
        CommandHandler(
            "search",
            lambda update, ctx: prompt_city(
                update.effective_chat.id, _get_profile(update.effective_chat.id)
            ),
        )
    )
    application.add_handler(
        CommandHandler(
            "bookings",
            lambda update, ctx: show_user_bookings_with_cancel(
                update.effective_chat.id, "completed"
            ),
        )
    )
    application.add_handler(
        CommandHandler(
            "status",
            lambda update, ctx: show_user_bookings_with_cancel(
                update.effective_chat.id, "active"
            ),
        )
    )
    application.add_handler(
        CommandHandler(
            "help", lambda update, ctx: help_command_handler(update.effective_chat.id)
        )
    )
    application.add_handler(
        CommandHandler(
            "admin", lambda update, ctx: handle_admin_command(update.effective_chat.id)
        )
    )

    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò: –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï ‚Üí –û–ë–©–ò–ï ‚Üí CATCH-ALL
    
    # 1. –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –•–ï–ù–î–õ–ï–†–´ (group=0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    # Callback query handler –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π)
    from telegram.ext import CallbackQueryHandler
    from .main import telegram_callback_query_handler
    application.add_handler(CallbackQueryHandler(telegram_callback_query_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ /cancel_ID (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π regex)
    application.add_handler(
        MessageHandler(
            filters.Regex(r"^/cancel_(\d+)$"),
            lambda update, ctx: handle_cancel_command(update, ctx),
        )
    )

    # 2. CATCH-ALL –•–ï–ù–î–õ–ï–†–´ (group=90, –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (catch-all) - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ group=90
    application.add_handler(
        MessageHandler(filters.TEXT | filters.PHOTO, telegram_message_handler),
        group=90
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    async def setup_bot_commands(app):
        await app.bot.set_my_commands(
            [
                ("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                ("search", "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"),
                ("bookings", "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"),
                ("status", "üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏"),
                ("help", "‚ùì –ü–æ–º–æ—â—å"),
                ("admin", "üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"),
            ]
        )

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        await app.bot.set_chat_menu_button(menu_button={"type": "commands"})
        logger.info("Bot commands and menu button set")

    application.job_queue.run_once(lambda ctx: setup_bot_commands(application), 0)

    logger.info("Bot initialized with menu button")
    return application


def handle_admin_command(chat_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    profile = _get_profile(chat_id)
    if profile.role in ("admin", "super_admin"):
        show_admin_panel(chat_id)
    else:
        send_telegram_message(
            chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."
        )


def handle_cancel_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel_ID"""
    import re

    match = re.match(r"^/cancel_(\d+)$", update.message.text)
    if match:
        booking_id = int(match.group(1))
        handle_cancel_booking_start(update.effective_chat.id, booking_id)
