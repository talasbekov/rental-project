import logging
import requests
from django.contrib.auth import get_user_model
from telegram import KeyboardButton, ReplyKeyboardMarkup

from .utils import send_telegram_message
from .. import settings
from booking_bot.users.models import UserProfile


logger = logging.getLogger(__name__)

STATE_MAIN_MENU             = 'main_menu'
STATE_SELECT_CITY           = 'select_city'
STATE_SELECT_DISTRICT       = 'select_district'
STATE_SELECT_CLASS          = 'select_class'
STATE_SELECT_ROOMS          = 'select_rooms'
STATE_SHOWING_RESULTS       = 'showing_results'
STATE_AWAITING_CHECK_IN     = 'awaiting_check_in'
STATE_AWAITING_CHECK_OUT    = 'awaiting_check_out'
STATE_CONFIRM_BOOKING       = 'confirm_booking'
STATE_AWAITING_REVIEW_TEXT  = 'awaiting_review_text'

# Admin states
STATE_ADMIN_MENU            = 'admin_menu'
STATE_ADMIN_VIEW_STATS      = 'admin_view_stats'
STATE_ADMIN_ADD_PROPERTY    = 'admin_add_property'
STATE_ADMIN_ADD_DESC        = 'admin_add_desc'
STATE_ADMIN_ADD_ADDRESS     = 'admin_add_address'
STATE_ADMIN_ADD_CITY        = 'admin_add_city'
STATE_ADMIN_ADD_DISTRICT    = 'admin_add_district'
STATE_ADMIN_ADD_CLASS       = 'admin_add_class'
STATE_ADMIN_ADD_ROOMS       = 'admin_add_rooms'
STATE_ADMIN_ADD_AREA        = 'admin_add_area'
STATE_ADMIN_ADD_PRICE       = 'admin_add_price'
STATE_ADMIN_ADD_PHOTOS      = 'admin_add_photos'

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã
STATE_CANCEL_BOOKING        = 'cancel_booking'
STATE_CANCEL_REASON         = 'cancel_reason'
STATE_CANCEL_REASON_TEXT    = 'cancel_reason_text'

STATE_AWAITING_CHECK_IN_TIME    = 'awaiting_check_in_time'
STATE_AWAITING_CHECK_OUT_TIME   = 'awaiting_check_out_time'


def log_handler(func):
    def wrapper(*args, **kwargs):
        # args[0] –æ–±—ã—á–Ω–æ ‚Äî chat_id –∏–ª–∏ update, args[1] ‚Äî text –∏–ª–∏ context
        func_name = func.__name__
        logger.info(f"CALL  {func_name} args={args} kwargs={kwargs}")
        return func(*args, **kwargs)
    return wrapper

User = get_user_model()

@log_handler
def _get_or_create_local_profile(chat_id: int):
    # 1) –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å User
    username = f"telegram_{chat_id}"
    user, user_created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': '',
            'last_name': '',
        }
    )
    if user_created:
        user.set_unusable_password()
        user.save()

    # 2) –ü–æ—Ç–æ–º —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É user
    profile, profile_created = UserProfile.objects.get_or_create(
        user=user,
        defaults={
            'telegram_chat_id': str(chat_id),
            'role': 'user',
            # —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å phone_number –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
    )
    return profile

@log_handler
def _get_profile(chat_id, first_name=None, last_name=None, force_remote=False):
    # –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —É–¥–∞–ª—ë–Ω–Ω–æ–º—É API ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    if not force_remote:
        profile, _ = UserProfile.objects.get_or_create(telegram_chat_id=str(chat_id))
        return profile

    payload = {'telegram_chat_id': str(chat_id)}
    if first_name:
        payload['first_name'] = first_name
    if last_name:
        payload['last_name'] = last_name
    try:
        api_url = f"{settings.API_BASE}/telegram_auth/register_or_login/"
        logger.info(f"Attempting to register/login user via API: {api_url}")
        response = requests.post(api_url, json=payload, timeout=10)
        if response.status_code in (200, 201):
            data = response.json()
            access_token = data.get('access')
            profile = UserProfile.objects.get(telegram_chat_id=str(chat_id))
            if profile.telegram_state is None:
                profile.telegram_state = {}
            if access_token:
                profile.telegram_state['jwt_access_token'] = access_token
                profile.save()
                logger.info(f"Stored JWT token for chat {chat_id}")
        else:
            profile, _ = UserProfile.objects.get_or_create(telegram_chat_id=str(chat_id))
    except Exception:
        profile, _ = UserProfile.objects.get_or_create(telegram_chat_id=str(chat_id))
    return profile


@log_handler
def start_command_handler(chat_id, first_name=None, last_name=None):
    """Handle /start: –ª–æ–∫–∞–ª—å–Ω–æ –∏—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è —á–µ—Ä–µ–∑ API."""
    # 1) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    try:
        profile = UserProfile.objects.get(telegram_chat_id=str(chat_id))
        created = False
    except UserProfile.DoesNotExist:
        profile = UserProfile(telegram_chat_id=str(chat_id))
        created = True

    # 2) –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã–π, –¥–µ—Ä–≥–∞–µ–º API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    if created:
        payload = {'telegram_chat_id': str(chat_id)}
        if first_name:
            payload['first_name'] = first_name
        if last_name:
            payload['last_name'] = last_name
        try:
            api_url = f"{settings.API_BASE}/telegram_auth/register_or_login/"
            response = requests.post(api_url, json=payload, timeout=10)
            response.raise_for_status()
            data = response.json()
            access_token = data.get('access')
            profile.telegram_state = {}
            if access_token:
                profile.telegram_state['jwt_access_token'] = access_token
        except Exception as e:
            logger.error(f"Error registering user via API: {e}")
        finally:
            profile.save()

    # 3) –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–∫—Ä–æ–º–µ —Ç–æ–∫–µ–Ω–∞) –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    jwt_token = (profile.telegram_state or {}).get('jwt_access_token')
    profile.telegram_state = {'state': STATE_MAIN_MENU}
    if jwt_token:
        profile.telegram_state['jwt_access_token'] = jwt_token
    profile.save()

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ *–ñ–∏–ª—å–µGO* ‚Äî –≤–∞—à–µ–º –Ω–∞–¥—ë–∂–Ω–æ–º –ø–æ–º–æ—â–Ω–∏–∫–µ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∂–∏–ª—å—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞, –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ–∫ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!\n\n"
        "üè° –£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ –Ω—É–∂–Ω—ã–º –¥–∞—Ç–∞–º –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω –∏ –∫–ª–∞—Å—Å –∂–∏–ª—å—è ‚Äî –æ—Ç —ç–∫–æ–Ω–æ–º–∞ –¥–æ –ø—Ä–µ–º–∏—É–º\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, —á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤\n"
        "‚Ä¢ –û–ø–ª–∞—á–∏–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–µ—Ä–µ–∑ *Kaspi* –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\n"
        "‚Ä¢ –•—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫\n\n"
        "‚ú® –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –≤—ã–±–∏—Ä–∞–π—Ç–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –∏ –±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ ‚Äî –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ —á–∞—Ç–µ!\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ ¬´üîç *–ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä*¬ª –∏ –Ω–∞–π–¥–∏—Ç–µ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ —Å–µ–π—á–∞—Å!"
    )

    keyboard = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"), KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
    ]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏–ª–∏ —Å—É–ø–µ—Ä‚Äë–∞–¥–º–∏–Ω ‚Äî –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é
    if profile.role in ('admin', 'super_admin'):
        keyboard.append([KeyboardButton("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])

    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–∏–¥–µ–ª —Å–≤–æ—é –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é,
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É:
    #     keyboard.append([KeyboardButton("üè† –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã")])

    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    ).to_dict()

    send_telegram_message(chat_id, text, reply_markup=reply_markup)
