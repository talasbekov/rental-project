import logging
from urllib.parse import urljoin

import requests
from django.db import transaction
from django.contrib.auth import get_user_model
from telegram import KeyboardButton, ReplyKeyboardMarkup

from .utils import send_telegram_message
from .. import settings
from booking_bot.users.models import UserProfile

logger = logging.getLogger(__name__)

STATE_MAIN_MENU = "main_menu"
STATE_SELECT_CITY = "select_city"
STATE_SELECT_DISTRICT = "select_district"
STATE_SELECT_CLASS = "select_class"
STATE_SELECT_ROOMS = "select_rooms"
STATE_SHOWING_RESULTS = "showing_results"
STATE_AWAITING_CHECK_IN = "awaiting_check_in"
STATE_AWAITING_CHECK_OUT = "awaiting_check_out"
STATE_CONFIRM_BOOKING = "confirm_booking"
STATE_AWAITING_REVIEW_TEXT = "awaiting_review_text"

# Admin states
STATE_ADMIN_MENU = "admin_menu"
STATE_ADMIN_VIEW_STATS = "admin_view_stats"
STATE_ADMIN_ADD_PROPERTY = "admin_add_property"
STATE_ADMIN_ADD_DESC = "admin_add_desc"
STATE_ADMIN_ADD_ADDRESS = "admin_add_address"
STATE_ADMIN_ADD_CITY = "admin_add_city"
STATE_ADMIN_ADD_DISTRICT = "admin_add_district"
STATE_ADMIN_ADD_CLASS = "admin_add_class"
STATE_ADMIN_ADD_ROOMS = "admin_add_rooms"
STATE_ADMIN_ADD_AREA = "admin_add_area"
STATE_ADMIN_ADD_PRICE = "admin_add_price"
STATE_ADMIN_ADD_PHOTOS = "admin_add_photos"

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã ---
STATE_EDIT_PROPERTY_MENU = "edit_property_menu"
STATE_WAITING_NEW_PRICE = "waiting_new_price"
STATE_WAITING_NEW_DESCRIPTION = "waiting_new_description"
STATE_WAITING_NEW_STATUS = "waiting_new_status"
STATE_PHOTO_MANAGEMENT = "photo_management"

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã
STATE_CANCEL_BOOKING = "cancel_booking"
STATE_CANCEL_REASON = "cancel_reason"
STATE_CANCEL_REASON_TEXT = "cancel_reason_text"

STATE_AWAITING_CHECK_IN_TIME = "awaiting_check_in_time"
STATE_AWAITING_CHECK_OUT_TIME = "awaiting_check_out_time"


def log_handler(func):
    def wrapper(*args, **kwargs):
        # args[0] –æ–±—ã—á–Ω–æ ‚Äî chat_id –∏–ª–∏ update, args[1] ‚Äî text –∏–ª–∏ context
        func_name = func.__name__
        logger.info(f"CALL  {func_name} args={args} kwargs={kwargs}")
        return func(*args, **kwargs)

    return wrapper


User = get_user_model()


@log_handler
@transaction.atomic
def _get_or_create_local_profile(chat_id: int, first_name=None, last_name=None):
    """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    chat_id_str = str(chat_id)

    # 1) –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å User
    username = f"telegram_{chat_id}"
    user, user_created = User.objects.get_or_create(
        username=username,
        defaults={
            "first_name": first_name or "",
            "last_name": last_name or "",
        },
    )
    if user_created:
        user.set_unusable_password()
        user.save()

    # 2) –ü–æ—Ç–æ–º —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É user
    profile, profile_created = UserProfile.objects.get_or_create(
        telegram_chat_id=chat_id_str,
        defaults={
            "user": user,  # –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ user
            "role": "user",
            "requires_prepayment": False,
            "ko_factor": 0.0,
            "telegram_state": {},
            "whatsapp_state": {},
        },
    )

    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ user –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º
    if not profile.user:
        profile.user = user
        profile.save()

    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ telegram_chat_id –ø—É—Å—Ç–æ–π - –∑–∞–ø–æ–ª–Ω—è–µ–º
    if not profile.telegram_chat_id:
        profile.telegram_chat_id = chat_id_str
        profile.save()

    return profile


@log_handler
def _get_profile(chat_id, first_name=None, last_name=None, force_remote=False):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API)"""
    chat_id_str = str(chat_id)

    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = UserProfile.objects.select_related("user").get(telegram_chat_id=chat_id_str)

    except UserProfile.DoesNotExist:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        return _get_or_create_local_profile(chat_id, first_name, last_name)

    # --- –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    if not profile.user:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º user –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω
        username = f"telegram_{chat_id}"
        user, _ = User.objects.get_or_create(
            username=username,
            defaults={
                "first_name": first_name or "",
                "last_name": last_name or "",
            },
        )
        profile.user = user
        profile.save()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ
    updated = False
    if first_name and profile.user.first_name != first_name:
        profile.user.first_name = first_name
        updated = True
    if last_name and profile.user.last_name != last_name:
        profile.user.last_name = last_name
        updated = True
    if updated:
        profile.user.save()

    return profile


@log_handler
@transaction.atomic
def start_command_handler(chat_id, first_name=None, last_name=None):
    """Handle /start: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API"""
    chat_id_str = str(chat_id)

    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
    profile = _get_or_create_local_profile(chat_id, first_name, last_name)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = dict(profile.telegram_state or {})
    state["state"] = STATE_MAIN_MENU
    profile.telegram_state = state
    profile.save()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ *–ñ–∏–ª—å–µGO* ‚Äî –≤–∞—à–µ–º –Ω–∞–¥—ë–∂–Ω–æ–º –ø–æ–º–æ—â–Ω–∏–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è!\n\n"
        "üè° –£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ –ª—é–±–æ–π —Å—Ä–æ–∫\n"
        "‚Ä¢ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∂–∏–ª—å–µ –æ–Ω–ª–∞–π–Ω\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞\n"
        "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ ¬´üîç *–ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä*¬ª!"
    )

    keyboard = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"), KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏"), KeyboardButton("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
    ]
    if profile.role in ("admin", "super_admin"):
        keyboard.append([KeyboardButton("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])

    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard, resize_keyboard=True,
        input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
    ).to_dict()

    send_telegram_message(chat_id, text, reply_markup=reply_markup)
