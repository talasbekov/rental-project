import logging
import requests
from datetime import datetime, date, timedelta
from django.db import transaction
from django.db.models import Count, Avg
from telegram import ReplyKeyboardMarkup, KeyboardButton

from .constants import STATE_MAIN_MENU, STATE_AWAITING_CHECK_IN, STATE_AWAITING_CHECK_OUT, STATE_CONFIRM_BOOKING, \
    STATE_SELECT_CITY, STATE_SELECT_DISTRICT, STATE_SELECT_CLASS, STATE_SELECT_ROOMS, STATE_SHOWING_RESULTS, \
    log_handler, _get_or_create_local_profile, _get_profile, start_command_handler
from .. import settings
from booking_bot.users.models import UserProfile
from booking_bot.listings.models import City, District, Property, PropertyPhoto, Review
from booking_bot.bookings.models import Booking
from booking_bot.payments import initiate_payment as kaspi_initiate_payment, KaspiPaymentError
from .utils import send_telegram_message, send_photo_group, escape_markdown
# Admin handlers import
from .admin_handlers import (
    show_admin_properties,
    show_detailed_statistics,
    show_super_admin_menu,
    handle_add_property_start,
    handle_photo_upload,  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
    export_statistics_csv
)

logger = logging.getLogger(__name__)


@log_handler
def message_handler(chat_id, text, update=None, context=None):
    profile = _get_or_create_local_profile(chat_id)
    state_data = profile.telegram_state or {}
    state = state_data.get('state', STATE_MAIN_MENU)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if update and update.message and update.message.photo:
        if handle_photo_upload(chat_id, update, context):
            return
        elif text.startswith("/debug_photos"):
            parts = text.split()
            if len(parts) > 1:
                try:
                    prop_id = int(parts[1])
                    debug_property_photos(chat_id, prop_id)
                except ValueError:
                    send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞")
            else:
                send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug_photos <ID>")

    if handle_add_property_start(chat_id, text):
        return

    # –õ–æ–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã ¬´–û—Ç–º–µ–Ω–∞¬ª, ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª –∏ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
    if text in ("‚ùå –û—Ç–º–µ–Ω–∞", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"):
        start_command_handler(chat_id)
        return

    # Booking start handlers
    if state == STATE_AWAITING_CHECK_IN:
        handle_checkin_input(chat_id, text)
        return
    if state == STATE_AWAITING_CHECK_OUT:
        handle_checkout_input(chat_id, text)
        return
    if state == STATE_CONFIRM_BOOKING:
        if text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Kaspi":
            handle_payment_confirmation(chat_id)
        else:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    if state == STATE_MAIN_MENU:
        # ‚Äî –û–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö ‚Äî
        if text == "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä":
            prompt_city(chat_id, profile)
            return
        elif text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
            show_user_bookings(chat_id, 'completed')
            return
        elif text == "üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏":
            show_user_bookings(chat_id, 'active')
            return
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            help_command_handler(chat_id)
            return

        # ‚Äî –ü—É–Ω–∫—Ç—ã –¥–ª—è Admin –∏ SuperAdmin ‚Äî
        if profile.role in ('admin', 'super_admin'):
            if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É":
                handle_add_property_start(chat_id)
                return
            # elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            #     show_admin_statistics(chat_id)
            #     return
            elif text == "üè† –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã":
                show_admin_properties(chat_id)
                return

        # ‚Äî –¢–æ–ª—å–∫–æ –¥–ª—è SuperAdmin ‚Äî
        if profile.role == 'super_admin':
            if text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏":
                show_super_admin_menu(chat_id)
                return

    # City selection
    if state == STATE_SELECT_CITY:
        select_city(chat_id, profile, text)
        return

    # District selection
    if state == STATE_SELECT_DISTRICT:
        select_district(chat_id, profile, text)
        return

    # Class selection
    if state == STATE_SELECT_CLASS:
        select_class(chat_id, profile, text)
        return

    # Rooms selection
    if state == STATE_SELECT_ROOMS:
        select_rooms(chat_id, profile, text)
        return

    # Showing results navigation
    if state == STATE_SHOWING_RESULTS:
        navigate_results(chat_id, profile, text)
        return

    # Fallback
    send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /start.")


# Helper flows
@log_handler
def prompt_city(chat_id, profile):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telegram_state –µ—Å–ª–∏ –æ–Ω None
    if profile.telegram_state is None:
        profile.telegram_state = {}

    profile.telegram_state.update({'state': STATE_SELECT_CITY})
    profile.save()

    cities = City.objects.all().order_by('name')
    kb = [[KeyboardButton(c.name)] for c in cities]
    markup = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
    ).to_dict()
    send_telegram_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)

@log_handler
def select_city(chat_id, profile, text):
    try:
        city = City.objects.get(name=text)
        profile.telegram_state.update({'city_id': city.id, 'state': STATE_SELECT_DISTRICT})
        profile.save()
        districts = District.objects.filter(city=city).order_by('name')
        kb = [[KeyboardButton(d.name)] for d in districts]
        markup = ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω"
        ).to_dict()
        send_telegram_message(chat_id, f"–ì–æ—Ä–æ–¥: {city.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=markup)
    except City.DoesNotExist:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@log_handler
def select_district(chat_id, profile, text):
    try:
        district = District.objects.get(name=text)
        profile.telegram_state.update({'district_id': district.id, 'state': STATE_SELECT_CLASS})
        profile.save()
        classes = [('economy', '–ö–æ–º—Ñ–æ—Ä—Ç'), ('business', '–ë–∏–∑–Ω–µ—Å'), ('luxury', '–ü—Ä–µ–º–∏—É–º')]
        kb = [[KeyboardButton(label)] for _, label in classes]
        markup = ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å"
        ).to_dict()
        send_telegram_message(chat_id, f"–†–∞–π–æ–Ω: {district.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∂–∏–ª—å—è:", reply_markup=markup)
    except District.DoesNotExist:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@log_handler
def select_class(chat_id, profile, text):
    mapping = {'–ö–æ–º—Ñ–æ—Ä—Ç': 'economy', '–ë–∏–∑–Ω–µ—Å': 'business', '–ü—Ä–µ–º–∏—É–º': 'luxury'}
    if text in mapping:
        profile.telegram_state.update({'property_class': mapping[text], 'state': STATE_SELECT_ROOMS})
        profile.save()
        kb = [[KeyboardButton(str(i))] for i in [1, 2, 3, '4+']]
        markup = ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?"
        ).to_dict()
        send_telegram_message(chat_id, f"–ö–ª–∞—Å—Å: {text}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=markup)
    else:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@log_handler
def select_rooms(chat_id, profile, text):
    rooms = 4 if text == '4+' else int(text)
    profile.telegram_state.update({'rooms': rooms, 'state': STATE_SHOWING_RESULTS})
    profile.save()
    send_telegram_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {text}\n–ò—â—É –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
    show_search_results(chat_id, profile, offset=0)


@log_handler
def show_search_results(chat_id, profile, offset=0):
    """Show search results with unified Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–≤–∫–ª—é—á–∞—è ¬´–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª)."""
    sd = profile.telegram_state or {}

    query = Property.objects.filter(
        district__city_id=sd.get('city_id'),
        district_id=sd.get('district_id'),
        property_class=sd.get('property_class'),
        number_of_rooms=sd.get('rooms'),
        status='–°–≤–æ–±–æ–¥–Ω–∞'
    ).order_by('price_per_day')

    total = query.count()
    if total == 0:
        kb = [[KeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        send_telegram_message(
            chat_id,
            "–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.",
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict()
        )
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º offset
    sd['search_offset'] = offset
    sd['total_results'] = total
    profile.telegram_state = sd
    profile.save()

    prop = query[offset]

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    photos = PropertyPhoto.objects.filter(property=prop)[:6]
    photo_urls = []

    for photo in photos:
        if photo.image_url:
            # –≠—Ç–æ –≤–Ω–µ—à–Ω–∏–π URL
            photo_urls.append(photo.image_url)
        elif photo.image:
            # –≠—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
            try:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL —Å–∞–π—Ç–∞
                from django.conf import settings

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
                if hasattr(settings, 'SITE_URL') and settings.SITE_URL:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SITE_URL
                    full_url = f"{settings.SITE_URL.rstrip('/')}{photo.image.url}"
                else:
                    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω
                    # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω –∏–∑ request –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    domain = getattr(settings, 'DOMAIN', settings.DOMAIN)
                    full_url = f"{domain.rstrip('/')}{photo.image.url}"

                photo_urls.append(full_url)
                logger.info(f"Generated full URL: {full_url}")

            except Exception as e:
                logger.warning(f"Error getting photo URL: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ URL
    if photo_urls:
        logger.info(f"Sending {len(photo_urls)} photos for property {prop.id}")
        send_photo_group(chat_id, photo_urls)
    else:
        logger.info(f"No photos found for property {prop.id}")

    # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    stats = Review.objects.filter(property=prop).aggregate(avg=Avg('rating'), cnt=Count('id'))
    text = (
        f"*{prop.name}*\n"
        f"üìç {prop.district.city.name}, {prop.district.name}\n"
        f"üè† –ö–ª–∞—Å—Å: {prop.get_property_class_display()}\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {prop.number_of_rooms}\n"
        f"üí∞ –¶–µ–Ω–∞: *{prop.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
    )
    if stats['avg']:
        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg']:.1f}/5 ({stats['cnt']} –æ—Ç–∑—ã–≤–æ–≤)\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏
    if prop.status == '–°–≤–æ–±–æ–¥–Ω–∞':
        keyboard.append([KeyboardButton(f"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {prop.id}")])

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    if stats['cnt'] > 0:
        keyboard.append([KeyboardButton(f"üí¨ –û—Ç–∑—ã–≤—ã {prop.id}")])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav = []
    if offset > 0:
        nav.append(KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"))
    if offset < total - 1:
        nav.append(KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"))
    if nav:
        keyboard.append(nav)

    # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ / –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([KeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"), KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    # –ï–¥–∏–Ω–æ–∂–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É + –í–°–ï –∫–Ω–æ–ø–∫–∏
    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
    )

@log_handler
def debug_property_photos(chat_id, property_id):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä–µ–∫—Ç–∞"""
    try:
        prop = Property.objects.get(id=property_id)
        photos = PropertyPhoto.objects.filter(property=prop)

        debug_text = f"*–û—Ç–ª–∞–¥–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è {prop.name}*\n\n"
        debug_text += f"–í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {photos.count()}\n\n"

        for i, photo in enumerate(photos, 1):
            debug_text += f"–§–æ—Ç–æ {i}:\n"
            debug_text += f"- ID: {photo.id}\n"

            if photo.image_url:
                debug_text += f"- URL: {photo.image_url}\n"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
                try:
                    import requests
                    response = requests.head(photo.image_url, timeout=3)
                    debug_text += f"- –°—Ç–∞—Ç—É—Å URL: {response.status_code}\n"
                except Exception as e:
                    debug_text += f"- –û—à–∏–±–∫–∞ URL: {str(e)}\n"

            if photo.image:
                debug_text += f"- –§–∞–π–ª: {photo.image.name}\n"
                try:
                    debug_text += f"- URL —Ñ–∞–π–ª–∞: {photo.image.url}\n"
                except Exception as e:
                    debug_text += f"- –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: {str(e)}\n"

            debug_text += "\n"

        send_telegram_message(chat_id, debug_text)

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Debug error: {e}")
        send_telegram_message(chat_id, f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")


@log_handler
def navigate_results(chat_id, profile, text):
    sd = profile.telegram_state or {}
    if text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è":
        show_search_results(chat_id, profile, sd.get('search_offset', 0) + 1)
    elif text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è":
        show_search_results(chat_id, profile, max(sd.get('search_offset', 0) - 1, 0))
    elif text.startswith("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"):
        pid = int(text.split()[-1])
        handle_booking_start(chat_id, pid)
    elif text.startswith("üí¨ –û—Ç–∑—ã–≤—ã"):
        pid = int(text.split()[-1])
        show_property_reviews(chat_id, pid, offset=0)
    else:
        send_telegram_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

@log_handler
def show_property_card(chat_id, property_obj):
    photos = PropertyPhoto.objects.filter(property=property_obj)[:6]
    if photos:
        send_photo_group(chat_id, [p.image_url for p in photos])
    stats = Review.objects.filter(property=property_obj).aggregate(
        avg=Avg('rating'), cnt=Count('id')
    )
    text = (
        f"*{property_obj.name}*\n"
        f"üìç {property_obj.district.city.name}, {property_obj.district.name}\n"
        f"üè† –ö–ª–∞—Å—Å: {property_obj.get_property_class_display()}\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {property_obj.number_of_rooms}\n"
        f"üí∞ –¶–µ–Ω–∞: *{property_obj.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
    )
    if stats['avg']:
        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg']:.1f}/5 ({stats['cnt']} –æ—Ç–∑—ã–≤–æ–≤)\n"
    buttons = []
    if property_obj.status == '–°–≤–æ–±–æ–¥–Ω–∞':
        buttons.append([KeyboardButton(f"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {property_obj.id}")])
    if stats['cnt'] > 0:
        buttons.append([KeyboardButton(f"üí¨ –û—Ç–∑—ã–≤—ã {property_obj.id}")])
    buttons.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    send_telegram_message(chat_id, text,
                           reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True, input_field_placeholder="–î–µ–π—Å—Ç–≤–∏–µ").to_dict())

@log_handler
def handle_booking_start(chat_id, property_id):
    profile = _get_profile(chat_id)
    try:
        prop = Property.objects.get(id=property_id, status='–°–≤–æ–±–æ–¥–Ω–∞')
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    profile.telegram_state.update({'state': STATE_AWAITING_CHECK_IN, 'booking_property_id': property_id})
    profile.save()
    today = date.today()
    tomorrow = today + timedelta(days=1)
    text = (
        f"üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã*\n"
        f"{prop.name}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.YYYY –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
    )
    kb = [
        [KeyboardButton(f"–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})")],
        [KeyboardButton(f"–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    send_telegram_message(chat_id, text,
                           reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, input_field_placeholder="–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞").to_dict())

@log_handler
def handle_checkin_input(chat_id, text):
    try:
        check_in = datetime.strptime(text, "%d.%m.%Y").date()
    except:
        if "–°–µ–≥–æ–¥–Ω—è" in text:
            check_in = date.today()
        else:
            check_in = date.today() + timedelta(days=1)
    profile = _get_profile(chat_id)
    sd = profile.telegram_state
    sd.update({'check_in_date': check_in.isoformat(), 'state': STATE_AWAITING_CHECK_OUT})
    profile.telegram_state = sd
    profile.save()
    tomorrow = check_in + timedelta(days=1)
    after = tomorrow + timedelta(days=1)
    text = (
        f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {check_in.strftime('%d.%m.%Y')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
    )
    kb = [
        [KeyboardButton(f"{tomorrow.strftime('%d.%m')} (+1)")],
        [KeyboardButton(f"{after.strftime('%d.%m')} (+2)")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    send_telegram_message(chat_id, text,
                           reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, input_field_placeholder="–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞").to_dict())

@log_handler
def handle_checkout_input(chat_id, text):
    """Handle checkout date input: full dates, +N-–¥–Ω–µ–π –∏ –ª–µ–π–±–ª—ã (DD.MM (+N –¥–Ω–µ–π))."""
    import re
    from datetime import datetime, date, timedelta

    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    # –ë–µ—Ä—ë–º –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    check_in_str = sd.get('check_in_date')
    if not check_in_str:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    check_in = date.fromisoformat(check_in_str)

    # 1) –õ–µ–π–±–ª –≤–∏–¥–∞ "26.06 (+1 –¥–µ–Ω—å)" –∏–ª–∏ "(+2 –¥–Ω—è)"
    m = re.search(r"\(\s*\+?(\d+)", text)
    if m:
        offset = int(m.group(1))
        check_out = check_in + timedelta(days=offset)

    # 2) –°–ª—É—á–∞–π "–°–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "–ó–∞–≤—Ç—Ä–∞" (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    elif text.startswith("–°–µ–≥–æ–¥–Ω—è"):
        check_out = date.today()
    elif text.startswith("–ó–∞–≤—Ç—Ä–∞"):
        check_out = date.today() + timedelta(days=1)

    # 3) –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ "DD.MM.YYYY"
    else:
        try:
            check_out = datetime.strptime(text, "%d.%m.%Y").date()
        except ValueError:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –î–î.MM.YYYY.")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if check_out <= check_in:
        send_telegram_message(chat_id, "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    days = (check_out - check_in).days
    sd.update({
        'check_out_date': check_out.isoformat(),
        'state': STATE_CONFIRM_BOOKING,
        'days': days
    })
    property_id = sd.get('booking_property_id')
    try:
        prop = Property.objects.get(id=property_id)
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    total_price = days * prop.price_per_day
    sd['total_price'] = float(total_price)
    profile.telegram_state = sd
    profile.save()

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ Reply-–∫–Ω–æ–ø–∫–∏
    text_msg = (
        f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
        f"üè† {prop.name}\n"
        f"üìÖ –ó–∞–µ–∑–¥: {check_in.strftime('%d.%m.%Y')}\n"
        f"üìÖ –í—ã–µ–∑–¥: {check_out.strftime('%d.%m.%Y')}\n"
        f"üåô –ù–æ—á–µ–π: {days}\n"
        f"üí∞ –ò—Ç–æ–≥–æ: *{total_price:,.0f} ‚Ç∏*"
    )
    kb = [
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Kaspi")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    ).to_dict()

    send_telegram_message(chat_id, text_msg, reply_markup=reply_markup)


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_payment_confirmation –≤ telegram_bot/handlers.py

@log_handler
def handle_payment_confirmation(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Kaspi"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    property_id = sd.get('booking_property_id')
    check_in_str = sd.get('check_in_date')
    check_out_str = sd.get('check_out_date')
    total_price = sd.get('total_price')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not all([property_id, check_in_str, check_out_str, total_price]):
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        prop = Property.objects.get(id=property_id)
        check_in = date.fromisoformat(check_in_str)
        check_out = date.fromisoformat(check_out_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç
        conflicts = Booking.objects.filter(
            property=prop,
            status__in=['pending_payment', 'confirmed'],
            start_date__lt=check_out,
            end_date__gt=check_in
        ).exists()

        if conflicts:
            send_telegram_message(chat_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ –¥–∞—Ç—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            booking = Booking.objects.create(
                user=profile.user,
                property=prop,
                start_date=check_in,
                end_date=check_out,
                total_price=total_price,
                status='pending_payment'
            )

            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile.user.username}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
            send_telegram_message(
                chat_id,
                "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )

            try:
                # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Kaspi
                payment_info = kaspi_initiate_payment(
                    booking_id=booking.id,
                    amount=float(total_price),
                    description=f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {prop.name} —Å {check_in.strftime('%d.%m.%Y')} –ø–æ {check_out.strftime('%d.%m.%Y')}"
                )

                if payment_info and payment_info.get('checkout_url'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
                    kaspi_payment_id = payment_info.get('payment_id')
                    if kaspi_payment_id:
                        booking.kaspi_payment_id = kaspi_payment_id
                        booking.save()

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
                    checkout_url = payment_info['checkout_url']

                    # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
                    if settings.DEBUG:
                        # –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                        import time
                        time.sleep(2)

                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                        booking.status = 'confirmed'
                        booking.save()

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
                        send_booking_confirmation(chat_id, booking)

                        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        profile.telegram_state = {}
                        profile.save()

                        logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (DEBUG —Ä–µ–∂–∏–º)")
                    else:
                        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                        text = (
                            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                            f"üìã –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n\n"
                            f"üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ:\n"
                            f"{checkout_url}\n\n"
                            f"‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç"
                        )

                        # –ö–Ω–æ–ø–∫–∏
                        kb = [
                            [KeyboardButton("üìä –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
                            [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                        ]

                        send_telegram_message(
                            chat_id,
                            text,
                            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict()
                        )

                        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        profile.telegram_state = {}
                        profile.save()

                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking.id}")

                else:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                    raise KaspiPaymentError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")

            except KaspiPaymentError as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞
                booking.status = 'payment_failed'
                booking.save()

                logger.error(f"–û—à–∏–±–∫–∞ Kaspi –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking.id}: {e}")

                send_telegram_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                    f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {booking.id}"
                )

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        send_telegram_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


def send_booking_confirmation(chat_id, booking):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    property_obj = booking.property

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = (
        f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
        f"üéâ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
        f"üìã *–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n"
        f"–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n"
        f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {escape_markdown(property_obj.name)}\n"
        f"–ê–¥—Ä–µ—Å: {escape_markdown(property_obj.address)}\n"
        f"–ó–∞–µ–∑–¥: {booking.start_date.strftime('%d.%m.%Y')}\n"
        f"–í—ã–µ–∑–¥: {booking.end_date.strftime('%d.%m.%Y')}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.total_price:,.0f} ‚Ç∏\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é
    if property_obj.entry_instructions:
        text += f"üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é:*\n{property_obj.entry_instructions}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞
    if property_obj.digital_lock_code:
        text += f"üîê *–ö–æ–¥ –æ—Ç –∑–∞–º–∫–∞:* `{property_obj.digital_lock_code}`\n"
    elif property_obj.key_safe_code:
        text += f"üîë *–ö–æ–¥ –æ—Ç —Å–µ–π—Ñ–∞ —Å –∫–ª—é—á–∞–º–∏:* `{property_obj.key_safe_code}`\n"

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if hasattr(property_obj.owner, 'profile') and property_obj.owner.profile.phone_number:
        text += f"\nüìû *–ö–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞:* {property_obj.owner.profile.phone_number}\n"

    text += "\nüí¨ –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!"

    # –ö–Ω–æ–ø–∫–∏
    kb = [
        [KeyboardButton("üìä –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict()
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    photos = PropertyPhoto.objects.filter(property=property_obj)[:3]
    if photos:
        photo_urls = [p.get_photo_url() for p in photos if p.get_photo_url()]
        if photo_urls:
            send_photo_group(chat_id, photo_urls)

@log_handler
def show_user_bookings(chat_id, booking_type='active'):
    profile = _get_profile(chat_id)
    if booking_type == 'active':
        bookings = Booking.objects.filter(
            user=profile.user,
            status='confirmed',
            end_date__gte=date.today()
        ).order_by('start_date')
        title = "üìä *–¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    else:
        bookings = Booking.objects.filter(
            user=profile.user,
            status__in=['completed','cancelled']
        ).order_by('-created_at')[:10]
        title = "üìã *–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"
    if not bookings:
        text = f"{title}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {'–∞–∫—Ç–∏–≤–Ω—ã—Ö' if booking_type=='active' else '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö'} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        kb = [[KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        send_telegram_message(chat_id, text,
                               reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict())
        return
    text = title + "\n\n"
    for b in bookings:
        emoji = {'confirmed':'‚úÖ','completed':'‚úîÔ∏è','cancelled':'‚ùå'}.get(b.status,'‚Ä¢')
        text += (
            f"{emoji} *{b.property.name}*\n"
            f"üìÖ {b.start_date.strftime('%d.%m')} - {b.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ {b.total_price} ‚Ç∏\n\n"
        )
    kb = [[KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    send_telegram_message(chat_id, text,
                           reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict())

@log_handler
def show_property_reviews(chat_id, property_id, offset=0):
    try:
        prop = Property.objects.get(id=property_id)
        reviews = Review.objects.filter(property=prop).order_by('-created_at')
        if not reviews[offset:offset+5]:
            send_telegram_message(chat_id, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        text = f"*–û—Ç–∑—ã–≤—ã –æ {prop.name}*\n\n"
        for r in reviews[offset:offset+5]:
            stars = '‚≠ê'*r.rating
            text += f"{stars} _{r.user.first_name}_{r.created_at.strftime('%d.%m.%Y')}\n{r.text}\n\n"
        kb = []
        if offset+5 < reviews.count():
            kb.append([KeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ")])
        kb.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
        send_telegram_message(chat_id, text,
                               reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict())
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@log_handler
def help_command_handler(chat_id):
    text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ñ–∏–ª—å–µGO*\n\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    kb = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"), KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
    ]
    send_telegram_message(chat_id, text,
                           reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?").to_dict())



def date_input_handler(chat_id, text):
    """Dispatch date input to check-in or check-out handler based on state."""
    profile = _get_profile(chat_id)
    state = (profile.telegram_state or {}).get('state')

    if state == STATE_AWAITING_CHECK_IN:
        handle_checkin_input(chat_id, text)
    elif state == STATE_AWAITING_CHECK_OUT:
        handle_checkout_input(chat_id, text)
    else:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã.")
