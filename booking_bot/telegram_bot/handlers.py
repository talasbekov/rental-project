import html
import logging
from datetime import datetime, date, timedelta
from django.utils import timezone
from django.db import transaction
from django.db.models import Count, Avg
from telegram import ReplyKeyboardMarkup, KeyboardButton
from collections import defaultdict
from .constants import (
    STATE_MAIN_MENU,
    STATE_AWAITING_CHECK_IN,
    STATE_AWAITING_CHECK_OUT,
    STATE_CONFIRM_BOOKING,
    STATE_SELECT_CITY,
    STATE_SELECT_DISTRICT,
    STATE_SELECT_CLASS,
    STATE_SELECT_ROOMS,
    STATE_SHOWING_RESULTS,
    STATE_CANCEL_REASON_TEXT,
    STATE_CANCEL_REASON,
    STATE_CANCEL_BOOKING,
    STATE_AWAITING_REVIEW_TEXT,
    log_handler,
    _get_or_create_local_profile,
    _get_profile,
    start_command_handler,
    STATE_AWAITING_CHECK_IN_TIME,
    STATE_AWAITING_CHECK_OUT_TIME,
    STATE_ADMIN_MENU,
    STATE_EDIT_PROPERTY_MENU,
    STATE_WAITING_NEW_PRICE,
    STATE_WAITING_NEW_DESCRIPTION,
    STATE_WAITING_NEW_STATUS,
    STATE_PHOTO_MANAGEMENT, STATE_PHOTO_ADD_URL, STATE_PHOTO_DELETE,
)
from .edit_handlers import save_new_price, save_new_description, save_new_status, save_new_photo, \
    handle_photo_add_choice, handle_photo_url_input, handle_manage_photos_start, handle_photo_delete, \
    edit_handle_photo_upload

from .. import settings
from booking_bot.listings.models import (
    City,
    District,
    Property,
    PropertyPhoto,
    Review,
    Favorite,
    ReviewPhoto,
)
from booking_bot.bookings.models import Booking
from booking_bot.payments import (
    initiate_payment as kaspi_initiate_payment,
    KaspiPaymentError,
)
from .utils import send_telegram_message, send_photo_group

# Admin handlers import
from .admin_handlers import (
    show_admin_panel,
    show_super_admin_menu,
    handle_add_property_start,
    handle_photo_upload,
    show_detailed_statistics,
    export_statistics_csv,
    show_admin_properties,
    show_city_statistics,
    process_add_admin,
    process_remove_admin,
    handle_target_property_selection,
    save_property_target,
    handle_add_admin,
    show_admins_list,
    handle_remove_admin,
    show_plan_fact,
    show_ko_factor_report,
    handle_guest_review_text, handle_edit_property_choice, quick_photo_management,
)
from ..core.models import AuditLog

# –í –±–ª–æ–∫–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ:
from .user_review_handlers import (
    handle_review_booking_command,
    handle_edit_review_command,
    handle_user_review_rating,
    handle_user_review_text,
    handle_user_review_photos,
    handle_user_review_uploading,
    handle_user_review_photo_upload,
)


logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_actions = defaultdict(list)


def check_rate_limit(chat_id, max_actions=5, time_window=3):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π.
    max_actions: –º–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ time_window —Å–µ–∫—É–Ω–¥
    """
    now = timezone.now()
    user_actions = user_last_actions[chat_id]

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    cutoff_time = now - timedelta(seconds=time_window)
    user_actions[:] = [action_time for action_time in user_actions if action_time > cutoff_time]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(user_actions) >= max_actions:
        return False

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    user_actions.append(now)
    return True


# –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é message_handler:
@log_handler
def message_handler(chat_id, text, update=None, context=None):
    # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    if not check_rate_limit(chat_id, max_actions=3, time_window=5):
        logger.warning(f"Rate limit exceeded for chat_id {chat_id}")
        return  # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    profile = _get_or_create_local_profile(chat_id)
    state_data = profile.telegram_state or {}
    state = state_data.get("state", STATE_MAIN_MENU)
    
    logger.info(f"Photo management state: '{state}', text: '{text}'")

    photo_states = [
        STATE_PHOTO_MANAGEMENT,
        STATE_PHOTO_ADD_URL,
        STATE_PHOTO_DELETE,
        'photo_waiting_url',
        'photo_waiting_upload'
    ]

    if state in photo_states:
        from .edit_handlers import handle_photo_management_states
        if handle_photo_management_states(chat_id, text, update, context):
            return

    if state == STATE_EDIT_PROPERTY_MENU:
        handle_edit_property_choice(chat_id, text)
        return
    elif state == STATE_WAITING_NEW_PRICE:
        save_new_price(chat_id, text)
        return
    elif state == STATE_WAITING_NEW_DESCRIPTION:
        save_new_description(chat_id, text)
        return
    elif state == STATE_WAITING_NEW_STATUS:
        save_new_status(chat_id, text)
        return
    elif state == STATE_PHOTO_MANAGEMENT:
        save_new_photo(chat_id, text)
        return

    # ===== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ô =====
    if update and update.message and update.message.photo:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
        if edit_handle_photo_upload(chat_id, update, context):
            return
        # –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
        elif handle_photo_upload(chat_id, update, context):
            return
        # –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–∑—ã–≤–∞
        elif handle_review_photo_upload(chat_id, update, context):
            return
        elif handle_user_review_photo_upload(chat_id, update, context):
            return

        # ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ó–´–í–û–í =====
    if state == STATE_AWAITING_REVIEW_TEXT:
        handle_review_text(chat_id, text)
        return
    elif state == "review_rating":
        handle_review_rating(chat_id, text)
        return
    elif state == "review_text":
        handle_review_text_input(chat_id, text)
        return
    elif state == "review_photos":
        handle_review_photos_choice(chat_id, text)
        return
    elif state == "review_uploading_photos":
        if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            save_review(chat_id)
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            profile.telegram_state = {}
            profile.save()
            start_command_handler(chat_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if update and update.message and update.message.photo:
        if handle_photo_upload(chat_id, update, context):
            return
        elif handle_review_photo_upload(chat_id, update, context):
            return
        elif text.startswith("/debug_photos"):
            if profile.role not in ("admin", "super_admin"):
                send_telegram_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            else:
                parts = text.split()
                if len(parts) > 1:
                    try:
                        prop_id = int(parts[1])
                        debug_property_photos(chat_id, prop_id)
                    except ValueError:
                        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞")
                else:
                    send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug_photos <ID>")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if state == "user_review_rating":
        handle_user_review_rating(chat_id, text)
        return
    elif state == "user_review_text":
        handle_user_review_text(chat_id, text)
        return
    elif state == "user_review_photos":
        handle_user_review_photos(chat_id, text)
        return
    elif state == "user_review_uploading":
        handle_user_review_uploading(chat_id, text)
        return

    # –õ–æ–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã ¬´–û—Ç–º–µ–Ω–∞¬ª, ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª –∏ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
    if text in ("‚ùå –û—Ç–º–µ–Ω–∞", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        start_command_handler(chat_id)
        return

    # –æ—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /cancel_<id>
    if text.startswith("/cancel_"):
        try:
            cancel_id = int(text[len("/cancel_") :])
            handle_cancel_booking_start(chat_id, cancel_id)
        except ValueError:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã.")
        return

    if text.startswith("/extend_"):
        try:
            extend_id = int(text[len("/extend_") :])
            handle_extend_booking(chat_id, extend_id)
        except ValueError:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç–∑—ã–≤–æ–≤
    if text.startswith("/review_"):
        try:
            booking_id = int(text[len("/review_"):])
            handle_review_booking_command(chat_id, booking_id)
        except ValueError:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∑—ã–≤–∞.")
        return

    if text.startswith("/edit_review_"):
        try:
            booking_id = int(text[len("/edit_review_"):])
            handle_edit_review_command(chat_id, booking_id)
        except ValueError:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞.")
        return

    # Booking start handlers
    if state == STATE_AWAITING_CHECK_IN:
        handle_checkin_input(chat_id, text)
        return
    if state == STATE_AWAITING_CHECK_OUT:
        handle_checkout_input(chat_id, text)
        return
    if state == STATE_AWAITING_CHECK_IN_TIME:
        handle_checkin_time(chat_id, text)
        return
    if state == STATE_AWAITING_CHECK_OUT_TIME:
        handle_checkout_time(chat_id, text)
        return
    if state == STATE_CONFIRM_BOOKING:
        if text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Kaspi":
            handle_payment_confirmation(chat_id)
        else:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return
    if state == "extend_booking":
        confirm_extend_booking(chat_id, text)
        return

    if state == "confirm_extend" and text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ":
        process_extend_payment(chat_id)
        return

    if state == STATE_MAIN_MENU:
        # ‚Äî –û–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö ‚Äî
        if text == "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä":
            prompt_city(chat_id, profile)
            return
        elif text == "üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏":
            show_user_bookings_with_cancel(chat_id, "active")
            return
        elif text in ["‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ emoji
            show_favorites_list(chat_id)
            return
        elif text.startswith("‚≠ê") and ". " in text:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            try:
                import re
                match = re.match(r'‚≠ê(\d+)\.\s+(.+)', text)
                if match:
                    num = int(match.group(1))
                    favorites = Favorite.objects.filter(user=profile.user).select_related('property')
                    if num <= favorites.count():
                        fav = favorites[num - 1]
                        show_favorite_property_detail(chat_id, fav.property.id)
                        return
            except Exception as e:
                logger.error(f"Error processing favorite selection: {e}")
            return
        elif text.startswith("‚≠ê") and "." in text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            try:
                num = int(text.split(".")[0].replace("‚≠ê", "").strip())
                favorites = Favorite.objects.filter(user=profile.user).select_related(
                    "property"
                )
                if num <= favorites.count():
                    fav = favorites[num - 1]
                    show_favorite_property_detail(chat_id, fav.property.id)
            except:
                pass
            return
        elif text.startswith("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å") and text.split()[-1].isdigit():
            prop_id = int(text.split()[-1])
            handle_booking_start(chat_id, prop_id)
            return
        elif text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"):
            prop_id = int(text.split()[-1])
            toggle_favorite(chat_id, prop_id)
            show_favorites_list(chat_id)
            return
        elif text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
            show_user_bookings_with_cancel(chat_id, "completed")
            return
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            help_command_handler(chat_id)
            return

        if (
            profile.role in ("admin", "super_admin")
            and text == "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        ):
            show_admin_panel(chat_id)
            return

        if profile.role in ("admin", "super_admin"):
            # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ù–ê–í–ò–ì–ê–¶–ò–ò –ü–û –ö–í–ê–†–¢–ò–†–ê–ú
            if text.startswith("‚û°Ô∏è –î–∞–ª–µ–µ (—Å—Ç—Ä.") or text.startswith("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (—Å—Ç—Ä."):
                import re
                match = re.search(r'—Å—Ç—Ä\.\s*(\d+)', text)
                if match:
                    page = int(match.group(1))
                    show_admin_properties(chat_id, page=page)
                    return
                else:
                    send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                    return

            # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ö–ù–û–ü–ö–ò –°–¢–†–ê–ù–ò–¶–´ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
            if text.startswith("üìÑ"):
                # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–Ω–æ–≤–æ
                import re
                match = re.search(r'(\d+)/\d+', text)
                if match:
                    page = int(match.group(1))
                    show_admin_properties(chat_id, page=page)
                    return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if text.startswith("üìä –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å #"):
                try:
                    prop_id = int(text.split("#")[1])
                    from .admin_handlers import show_property_availability
                    show_property_availability(chat_id, prop_id)
                    return
                except (ValueError, IndexError):
                    send_telegram_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                    return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ –æ–±—ã—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            if state_data.get('state') == 'detailed_stats' and text in ["–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ö–≤–∞—Ä—Ç–∞–ª", "–ì–æ–¥"]:
                period_map = {
                    "–ù–µ–¥–µ–ª—è": "week",
                    "–ú–µ—Å—è—Ü": "month",
                    "–ö–≤–∞—Ä—Ç–∞–ª": "quarter",
                    "–ì–æ–¥": "year"
                }
                show_detailed_statistics(chat_id, period=period_map[text])
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üì• –°–∫–∞—á–∞—Ç—å CSV" –≤ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
            if text == "üì• –°–∫–∞—á–∞—Ç—å CSV":
                sd = profile.telegram_state or {}
                current_state = sd.get('state')
                period = sd.get('period', 'month')

                if current_state in ['detailed_stats', 'extended_stats']:
                    export_statistics_csv(chat_id, context, period=period)
                else:
                    export_statistics_csv(chat_id, context, period='month')
                return

            if state_data.get('state') == 'guest_review_rating':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                rating_map = {
                    "‚≠ê": 1,
                    "‚≠ê‚≠ê": 2,
                    "‚≠ê‚≠ê‚≠ê": 3,
                    "‚≠ê‚≠ê‚≠ê‚≠ê": 4,
                    "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê": 5
                }

                if text in rating_map:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                    sd = profile.telegram_state
                    sd["guest_review_rating"] = rating_map[text]
                    sd["state"] = "guest_review_text"
                    profile.telegram_state = sd
                    profile.save()

                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                    keyboard = [
                        [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
                    ]

                    send_telegram_message(
                        chat_id,
                        f"–û—Ü–µ–Ω–∫–∞: {text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≥–æ—Å—Ç–µ:",
                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
                    )
                    return
                elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
                    profile.telegram_state = {}
                    profile.save()
                    show_admin_panel(chat_id)
                    return

            if state_data.get('state') == 'guest_review_text':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –æ –≥–æ—Å—Ç–µ
                handle_guest_review_text(chat_id, text)
                return

            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É":
                handle_add_property_start(chat_id, text)
                return
            elif text == "üè† –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã":
                show_admin_properties(chat_id)
                return
            elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                show_detailed_statistics(chat_id, period="month")
                return
            elif text == "üì• –°–∫–∞—á–∞—Ç—å CSV":
                export_statistics_csv(chat_id, context, period="month")
                return
            elif text == "‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤":
                from .admin_handlers import show_pending_reviews
                show_pending_reviews(chat_id)
                return
            elif text.startswith("/moderate_"):
                review_id = int(text.replace("/moderate_", ""))
                from .admin_handlers import handle_moderate_review_start
                handle_moderate_review_start(chat_id, review_id)
                return
            elif state_data.get('state') == 'moderate_review_action':
                from .admin_handlers import handle_moderate_review_action
                handle_moderate_review_action(chat_id, text)
                return
            elif text == "üìù –û—Ç–∑—ã–≤—ã –æ –≥–æ—Å—Ç—è—Ö":
                from .admin_handlers import show_pending_guest_reviews
                show_pending_guest_reviews(chat_id)
                return
            elif text.startswith("/review_guest_"):
                booking_id = int(text.replace("/review_guest_", ""))
                from .admin_handlers import handle_guest_review_start
                handle_guest_review_start(chat_id, booking_id)
                return
            if text.startswith("‚úèÔ∏è #"):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    parts = text.split("#", 1)
                    if len(parts) > 1:
                        # –ë–µ—Ä—ë–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ # –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
                        id_part = parts[1].strip()
                        prop_id = None

                        # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
                        import re
                        match = re.search(r'(\d+)', id_part)
                        if match:
                            prop_id = int(match.group(1))

                        if prop_id:
                            from .admin_handlers import handle_edit_property_start
                            handle_edit_property_start(chat_id, prop_id)
                            return

                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–≤–∞—Ä—Ç–∏—Ä—ã")
                    return
                except Exception as e:
                    logger.error(f"Error parsing property edit command: {e}")
                    send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
                    return
            elif text.startswith("üì∑ #"):
                try:
                    prop_id = int(text.split("#")[1])
                    quick_photo_management(chat_id, prop_id)
                    return
                except (ValueError, IndexError):
                    send_telegram_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                    return
            elif text == "/help_photos":
                help_text = (
                    "üì∑ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏*\n\n"
                    "*–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç—É–ø–∞:*\n"
                    "‚Ä¢ –ò–∑ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä: –∫–Ω–æ–ø–∫–∞ üì∑ #ID\n"
                    "‚Ä¢ –ò–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: üì∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ\n"
                    "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: /test_photos ID\n\n"
                    "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
                    "‚Ä¢ üì∑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Ñ–æ—Ç–æ\n"
                    "‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ URL –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞\n"
                    "‚Ä¢ üóë –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏–ª–∏ –≤—Å–µ—Ö\n"
                    "‚Ä¢ üîç –û—Ç–ª–∞–¥–∫–∞: /debug_photos ID\n\n"
                    "*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
                    "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É\n"
                    "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ 5 –ú–ë\n"
                    "‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP, GIF"
                )
                send_telegram_message(chat_id, help_text)
                return

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
            if text.startswith("üèô"):
                period_text = text.replace("üèô ", "")
                if period_text in ["–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ö–≤–∞—Ä—Ç–∞–ª", "–ì–æ–¥"]:
                    period_map = {
                        "–ù–µ–¥–µ–ª—è": "week",
                        "–ú–µ—Å—è—Ü": "month",
                        "–ö–≤–∞—Ä—Ç–∞–ª": "quarter",
                        "–ì–æ–¥": "year",
                    }
                    show_city_statistics(chat_id, period=period_map[period_text])
                    return
            elif text.startswith("/debug_photos"):
                if profile.role not in ("admin", "super_admin"):
                    send_telegram_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                else:
                    parts = text.split()
                    if len(parts) > 1:
                        try:
                            prop_id = int(parts[1])
                            debug_property_photos(chat_id, prop_id)
                        except ValueError:
                            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞")
                    else:
                        send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug_photos <ID>")
                return
            elif text.startswith("/test_photos"):
                if profile.role in ("admin", "super_admin"):
                    parts = text.split()
                    if len(parts) > 1:
                        try:
                            prop_id = int(parts[1])
                            from .edit_handlers import debug_photo_management
                            debug_photo_management(chat_id, prop_id)
                        except ValueError:
                            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—ä–µ–∫—Ç–∞")
                    else:
                        send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test_photos <ID>")
                return
            elif text.startswith("/debug_state"):
                if profile.role in ("admin", "super_admin"):
                    state_info = (
                        f"*–û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
                        f"Chat ID: {chat_id}\n"
                        f"User ID: {profile.user.id}\n"
                        f"Role: {profile.role}\n"
                        f"Current state: {state}\n"
                        f"State data: {state_data}\n"
                    )
                    send_telegram_message(chat_id, state_info)
                return
            elif text.startswith("/reset_state"):
                if profile.role in ("admin", "super_admin"):
                    profile.telegram_state = {}
                    profile.save()
                    send_telegram_message(chat_id, "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")
                    start_command_handler(chat_id)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
            if profile.role == "super_admin":
                if text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏":
                    show_super_admin_menu(chat_id)
                    return
                elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞":
                    handle_add_admin(chat_id)
                    return
                elif text == "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤":
                    show_admins_list(chat_id)
                    return
                elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞":
                    handle_remove_admin(chat_id)
                    return
                elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º":
                    show_city_statistics(chat_id)
                    return
                elif text == "üìä KO-—Ñ–∞–∫—Ç–æ—Ä –≥–æ—Å—Ç–µ–π":
                    show_ko_factor_report(chat_id)
                    return
                elif text == "üéØ –ü–ª–∞–Ω-—Ñ–∞–∫—Ç":
                    show_plan_fact(chat_id)
                    return

                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
                if state_data.get('state') == "add_admin_username":
                    if text != "‚ùå –û—Ç–º–µ–Ω–∞":
                        process_add_admin(chat_id, text)
                    profile.telegram_state = {}
                    profile.save()
                    show_super_admin_menu(chat_id)
                    return

                if state_data.get('state') == "remove_admin":
                    if text != "‚ùå –û—Ç–º–µ–Ω–∞":
                        process_remove_admin(chat_id, text)
                    profile.telegram_state = {}
                    profile.save()
                    show_super_admin_menu(chat_id)
                    return

                # –ü–ª–∞–Ω-—Ñ–∞–∫—Ç
                if state_data.get('state') == "select_property_for_target":
                    handle_target_property_selection(chat_id, text)
                    return

                if state_data.get('state') == "set_target_revenue":
                    save_property_target(chat_id, text)
                    return

    # City selection
    if state == STATE_SELECT_CITY:
        select_city(chat_id, profile, text)
        return

    # District selection
    if state == STATE_SELECT_DISTRICT:
        select_district(chat_id, profile, text)
        return

    # Class selection
    if state == STATE_SELECT_CLASS:
        select_class(chat_id, profile, text)
        return

    # Rooms selection
    if state == STATE_SELECT_ROOMS:
        select_rooms(chat_id, profile, text)
        return

    # Showing results navigation
    if state == STATE_SHOWING_RESULTS:
        navigate_results(chat_id, profile, text)
        return

    # Fallback
    send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /start.")


# Helper flows
@log_handler
def prompt_city(chat_id, profile):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telegram_state –µ—Å–ª–∏ –æ–Ω None
    if profile.telegram_state is None:
        profile.telegram_state = {}

    profile.telegram_state.update({"state": STATE_SELECT_CITY})
    profile.save()

    cities = City.objects.all().order_by("name")
    kb = [[KeyboardButton(c.name)] for c in cities]
    markup = ReplyKeyboardMarkup(
        keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
    ).to_dict()
    send_telegram_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)


@log_handler
def select_city(chat_id, profile, text):
    try:
        city = City.objects.get(name=text)
        profile.telegram_state.update(
            {"city_id": city.id, "state": STATE_SELECT_DISTRICT}
        )
        profile.save()
        districts = District.objects.filter(city=city).order_by("name")
        if not districts.exists():
            # –ï—Å–ª–∏ —Ä–∞–π–æ–Ω–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
            send_telegram_message(
                chat_id,
                f"–ì–æ—Ä–æ–¥ ¬´{city.name}¬ª –ø–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–π–æ–Ω–æ–≤.",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True
                ).to_dict(),
            )
            return
        kb = [[KeyboardButton(d.name)] for d in districts]
        markup = ReplyKeyboardMarkup(
            keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω"
        ).to_dict()
        send_telegram_message(
            chat_id, f"–ì–æ—Ä–æ–¥: {city.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=markup
        )

    except City.DoesNotExist:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@log_handler
def select_district(chat_id, profile, text):
    try:
        district = District.objects.get(name=text)
        profile.telegram_state.update(
            {"district_id": district.id, "state": STATE_SELECT_CLASS}
        )
        profile.save()
        classes = [
            ("comfort", "–ö–æ–º—Ñ–æ—Ä—Ç"),
            ("business", "–ë–∏–∑–Ω–µ—Å"),
            ("premium", "–ü—Ä–µ–º–∏—É–º"),
        ]
        kb = [[KeyboardButton(label)] for _, label in classes]
        markup = ReplyKeyboardMarkup(
            keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å"
        ).to_dict()
        send_telegram_message(
            chat_id,
            f"–†–∞–π–æ–Ω: {district.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∂–∏–ª—å—è:",
            reply_markup=markup,
        )
    except District.DoesNotExist:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@log_handler
def select_class(chat_id, profile, text):
    mapping = {"–ö–æ–º—Ñ–æ—Ä—Ç": "comfort", "–ë–∏–∑–Ω–µ—Å": "business", "–ü—Ä–µ–º–∏—É–º": "premium"}
    if text in mapping:
        profile.telegram_state.update(
            {"property_class": mapping[text], "state": STATE_SELECT_ROOMS}
        )
        profile.save()
        kb = [[KeyboardButton(str(i))] for i in [1, 2, 3, "4+"]]
        markup = ReplyKeyboardMarkup(
            keyboard=kb, resize_keyboard=True, input_field_placeholder="–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?"
        ).to_dict()
        send_telegram_message(
            chat_id, f"–ö–ª–∞—Å—Å: {text}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=markup
        )
    else:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@log_handler
def select_rooms(chat_id, profile, text):
    if text not in ["1", "2", "3", "4+"]:
        send_telegram_message(
            chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."
        )
        return

    rooms = 4 if text == "4+" else int(text)
    profile.telegram_state.update({"rooms": rooms, "state": STATE_SHOWING_RESULTS})
    profile.save()
    send_telegram_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {text}\n–ò—â—É –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
    show_search_results(chat_id, profile, offset=0)


@log_handler
def handle_admin_properties_navigation(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º –∞–¥–º–∏–Ω–∞"""
    import re

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–î–∞–ª–µ–µ" –∏ "–ù–∞–∑–∞–¥"
    if text.startswith("‚û°Ô∏è –î–∞–ª–µ–µ (—Å—Ç—Ä.") or text.startswith("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (—Å—Ç—Ä."):
        match = re.search(r'—Å—Ç—Ä\.\s*(\d+)', text)
        if match:
            page = int(match.group(1))
            show_admin_properties(chat_id, page=page)
            return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    if text.startswith("üìÑ"):
        match = re.search(r'(\d+)/\d+', text)
        if match:
            page = int(match.group(1))
            show_admin_properties(chat_id, page=page)
            return True

    return False

@log_handler
def show_search_results(chat_id, profile, offset=0):
    """Show search results with fixed photo handling and review queries"""
    sd = profile.telegram_state or {}

    query = Property.objects.filter(
        district__city_id=sd.get('city_id'),
        district_id=sd.get('district_id'),
        property_class=sd.get('property_class'),
        number_of_rooms=sd.get('rooms'),
        status='–°–≤–æ–±–æ–¥–Ω–∞'
    ).order_by('price_per_day')

    total = query.count()
    if total == 0:
        kb = [[KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        send_telegram_message(
            chat_id,
            "–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.",
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º offset
    sd['search_offset'] = offset
    sd['total_results'] = total
    profile.telegram_state = sd
    profile.save()

    prop = query[offset]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    from booking_bot.listings.models import PropertyPhoto
    photos = PropertyPhoto.objects.filter(property=prop)[:6]
    photo_urls = []

    for photo in photos:
        url = None

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ image_url, –ø–æ—Ç–æ–º image
        if photo.image_url:
            url = photo.image_url
        elif photo.image:
            try:
                if hasattr(photo.image, 'url'):
                    url = photo.image.url
                    # –ï—Å–ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω
                    if url and not url.startswith('http'):
                        from django.conf import settings
                        site_url = getattr(settings, 'SITE_URL', '')
                        domain = getattr(settings, 'DOMAIN', 'http://localhost:8000')
                        base_url = site_url or domain
                        url = f"{base_url.rstrip('/')}{url}"
            except Exception as e:
                logger.error(f"Error getting image URL: {e}")

        if url:
            photo_urls.append(url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if photo_urls:
        try:
            send_photo_group(chat_id, photo_urls)
        except Exception as e:
            logger.error(f"Error sending photos: {e}")

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—è is_approved
    from booking_bot.listings.models import Review
    from django.db import connection

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ is_approved
    with connection.cursor() as cursor:
        cursor.execute(
            "SELECT column_name FROM information_schema.columns WHERE table_name='listings_review' AND column_name='is_approved'")
        has_is_approved = cursor.fetchone() is not None

    if has_is_approved:
        # –ï—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        stats = Review.objects.filter(property=prop, is_approved=True).aggregate(
            avg=Avg('rating'), cnt=Count('id')
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
        stats = Review.objects.filter(property=prop).aggregate(
            avg=Avg('rating'), cnt=Count('id')
        )

    text = (
        f"*{prop.name}*\n"
        f"üìç {prop.district.city.name}, {prop.district.name}\n"
        f"üè† –ö–ª–∞—Å—Å: {prop.get_property_class_display()}\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {prop.number_of_rooms}\n"
        f"üìè –ü–ª–æ—â–∞–¥—å: {prop.area} –º¬≤\n"
        f"üí∞ –¶–µ–Ω–∞: *{prop.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
    )

    if prop.description:
        text += f"\nüìù {prop.description[:150]}...\n"

    if stats['avg']:
        text += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg']:.1f}/5 ({stats['cnt']} –æ—Ç–∑—ã–≤–æ–≤)"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏
    if prop.status == '–°–≤–æ–±–æ–¥–Ω–∞':
        keyboard.append([KeyboardButton(f"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {prop.id}")])

    # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    from booking_bot.listings.models import Favorite
    is_favorite = Favorite.objects.filter(user=profile.user, property=prop).exists()
    if is_favorite:
        keyboard.append([KeyboardButton(f"‚ùå –ò–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ {prop.id}")])
    else:
        keyboard.append([KeyboardButton(f"‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ {prop.id}")])

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    if stats['cnt'] > 0:
        keyboard.append([KeyboardButton(f"üí¨ –û—Ç–∑—ã–≤—ã {prop.id}")])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav = []
    if offset > 0:
        nav.append(KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"))
    nav.append(KeyboardButton(f"üìÑ {offset + 1}/{total}"))
    if offset < total - 1:
        nav.append(KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"))
    if nav:
        keyboard.append(nav)

    # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ / –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"), KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
    )

@log_handler
def handle_photo_management_states(chat_id, text, update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}
    state = state_data.get('state')

    if state == STATE_PHOTO_MANAGEMENT:
        save_new_photo(chat_id, text)
        return True

    elif state == STATE_PHOTO_ADD_URL:
        handle_photo_add_choice(chat_id, text)
        return True

    elif state == 'photo_waiting_url':
        handle_photo_url_input(chat_id, text)
        return True

    elif state == 'photo_waiting_upload':
        if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å":
            send_telegram_message(chat_id, "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            handle_manage_photos_start(chat_id)
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            handle_manage_photos_start(chat_id)
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ handle_photo_upload
        return True

    elif state == STATE_PHOTO_DELETE:
        handle_photo_delete(chat_id, text)
        return True

    return False

@log_handler
def prompt_review(chat_id, booking):
    """–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    profile = _get_profile(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞
    profile.telegram_state = {
        "state": "review_rating",
        "review_property_id": booking.property.id,
        "review_booking_id": booking.id,
    }
    profile.save()

    text = (
        "üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!*\n\n"
        f"–ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–≤–∞—Ä—Ç–∏—Ä–∞ *{booking.property.name}*?\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:"
    )

    keyboard = [
        [KeyboardButton("‚≠ê"), KeyboardButton("‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤")],
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
    )


@log_handler
def handle_review_text(chat_id, text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Review
    –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}
    prop_id = sd.get("review_property_id")
    if not prop_id:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ä–µ–π—Ç–∏–Ω–≥ (–ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ 1‚Äì5), –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ç–µ–∫—Å—Ç
    rating = 5
    comment = text.strip()
    if comment and comment[0].isdigit():
        try:
            rating_candidate = int(comment[0])
            if 1 <= rating_candidate <= 5:
                rating = rating_candidate
                comment = comment[1:].strip()
        except ValueError:
            pass

    try:
        prop = Property.objects.get(id=prop_id)
        Review.objects.create(
            property=prop, user=profile.user, rating=rating, text=comment
        )
        send_telegram_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except Exception as e:
        logger.error(f"Error creating review: {e}")
        send_telegram_message(
            chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    profile.telegram_state = {}
    profile.save()


@log_handler
def handle_review_rating(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    profile = _get_profile(chat_id)

    if text == "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤":
        profile.telegram_state = {}
        profile.save()
        start_command_handler(chat_id)
        return

    rating = text.count("‚≠ê")
    if rating < 1 or rating > 5:
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥")
        return

    sd = profile.telegram_state
    sd["review_rating"] = rating
    sd["state"] = "review_text"
    profile.telegram_state = sd
    profile.save()

    text = (
        f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
    )

    keyboard = [[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç")], [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, input_field_placeholder="–í–∞—à –æ—Ç–∑—ã–≤..."
        ).to_dict(),
    )


@log_handler
def handle_review_text_input(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        start_command_handler(chat_id)
        return

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç":
        text = ""

    sd["review_text"] = text
    sd["state"] = "review_photos"
    profile.telegram_state = sd
    profile.save()

    text = (
        "üì∑ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –æ—Ç–∑—ã–≤—É?\n"
        "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
    )

    keyboard = [
        [KeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
    )


@log_handler
def handle_review_photos_choice(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        start_command_handler(chat_id)
        return

    if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ":
        save_review(chat_id)
        return

    if text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        sd["state"] = "review_uploading_photos"
        sd["review_photos"] = []
        profile.telegram_state = sd
        profile.save()

        keyboard = [[KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ")], [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]]

        send_telegram_message(
            chat_id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 3 —à—Ç—É–∫).\n" "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
        )


@log_handler
def handle_review_photo_upload(chat_id, update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫ –æ—Ç–∑—ã–≤—É"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    if sd.get("state") != "review_uploading_photos":
        return False

    photos = sd.get("review_photos", [])
    if len(photos) >= 3:
        send_telegram_message(
            chat_id, "–ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."
        )
        return True

    if update.message and update.message.photo:
        photo = max(update.message.photo, key=lambda p: p.file_size)
        photos.append(photo.file_id)
        sd["review_photos"] = photos
        profile.telegram_state = sd
        profile.save()

        send_telegram_message(
            chat_id,
            f"–§–æ—Ç–æ {len(photos)}/3 –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
            f"{'–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏' if len(photos) < 3 else ''} –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'",
        )
        return True

    return False


@log_handler
def save_review(chat_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    prop_id = sd.get("review_property_id")
    rating = sd.get("review_rating", 5)
    text = sd.get("review_text", "")
    photo_ids = sd.get("review_photos", [])

    try:
        prop = Property.objects.get(id=prop_id)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
        review = Review.objects.create(
            property=prop, user=profile.user, rating=rating, text=text
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        for file_id in photo_ids:
            # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ –∏–∑ Telegram
            import requests

            bot_token = settings.TELEGRAM_BOT_TOKEN
            file_response = requests.get(
                f"https://api.telegram.org/bot{bot_token}/getFile",
                params={"file_id": file_id},
            )
            if file_response.status_code == 200:
                file_path = file_response.json()["result"]["file_path"]
                file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"

                ReviewPhoto.objects.create(review=review, image_url=file_url)

        send_telegram_message(
            chat_id,
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n"
            f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n"
            f"{'–° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: ' + str(len(photo_ids)) if photo_ids else ''}",
        )

    except Exception as e:
        logger.error(f"Error saving review: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    profile.telegram_state = {}
    profile.save()
    start_command_handler(chat_id)


@log_handler
def debug_property_photos(chat_id, property_id):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä–µ–∫—Ç–∞"""
    try:
        prop = Property.objects.get(id=property_id)
        photos = PropertyPhoto.objects.filter(property=prop)

        debug_text = f"*–û—Ç–ª–∞–¥–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è {prop.name}*\n\n"
        debug_text += f"–í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {photos.count()}\n\n"

        for i, photo in enumerate(photos, 1):
            debug_text += f"–§–æ—Ç–æ {i}:\n"
            debug_text += f"- ID: {photo.id}\n"

            if photo.image_url:
                debug_text += f"- URL: {photo.image_url}\n"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
                try:
                    import requests
                    response = requests.head(photo.image_url, timeout=3)
                    debug_text += f"- –°—Ç–∞—Ç—É—Å URL: {response.status_code}\n"
                except Exception as e:
                    debug_text += f"- –û—à–∏–±–∫–∞ URL: {str(e)}\n"

            if photo.image:
                debug_text += f"- –§–∞–π–ª: {photo.image.name}\n"
                try:
                    debug_text += f"- URL —Ñ–∞–π–ª–∞: {photo.image.url}\n"
                except Exception as e:
                    debug_text += f"- –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: {str(e)}\n"

            debug_text += "\n"

        send_telegram_message(chat_id, debug_text)

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Debug error: {e}")
        send_telegram_message(chat_id, f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")


# 1. –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def validate_image_url(url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        import requests
        from urllib.parse import urlparse

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
        parsed = urlparse(url)
        if not parsed.scheme in ['http', 'https']:
            return False, "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        valid_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif']
        if not any(url.lower().endswith(ext) for ext in valid_extensions):
            return False, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP, GIF"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL (HEAD –∑–∞–ø—Ä–æ—Å)
        response = requests.head(url, timeout=5, allow_redirects=True)
        if response.status_code != 200:
            return False, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–∫–æ–¥ {response.status_code})"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
        content_type = response.headers.get('content-type', '').lower()
        if not content_type.startswith('image/'):
            return False, "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        content_length = response.headers.get('content-length')
        if content_length:
            size_mb = int(content_length) / (1024 * 1024)
            if size_mb > 10:  # –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë
                return False, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size_mb:.1f} –ú–ë, –º–∞–∫—Å–∏–º—É–º 10 –ú–ë)"

        return True, "OK"

    except requests.RequestException as e:
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"


# 2. –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL
def handle_photo_url_input_improved(chat_id, text):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}
    property_id = state_data.get("editing_property_id")

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        handle_manage_photos_start(chat_id)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    current_count = PropertyPhoto.objects.filter(property_id=property_id).count()
    if current_count >= 6:
        send_telegram_message(
            chat_id,
            "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (6 —à—Ç—É–∫)"
        )
        return

    # –ü–∞—Ä—Å–∏–º URL'—ã
    urls = [u.strip() for u in text.split() if u.strip().startswith('http')]

    if not urls:
        send_telegram_message(
            chat_id,
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    available_slots = 6 - current_count
    if len(urls) > available_slots:
        send_telegram_message(
            chat_id,
            f"‚ö†Ô∏è –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ {available_slots} —Ñ–æ—Ç–æ.\n"
            f"–ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {available_slots} URL."
        )
        urls = urls[:available_slots]

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    created = 0
    errors = []

    send_telegram_message(chat_id, "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")

    for i, url in enumerate(urls, 1):
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
            is_valid, message = validate_image_url(url)
            if not is_valid:
                errors.append(f"URL {i}: {message}")
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            PropertyPhoto.objects.create(property_id=property_id, image_url=url)
            created += 1

        except Exception as e:
            logger.error(f"Error saving photo URL {url}: {e}")
            errors.append(f"URL {i}: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if created > 0:
        result_text = f"‚úÖ *–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {created} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π*"
    else:
        result_text = "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*"

    if errors:
        result_text += f"\n\n‚ö†Ô∏è *–û—à–∏–±–∫–∏ ({len(errors)}):*\n"
        result_text += "\n".join([f"‚Ä¢ {error}" for error in errors[:5]])
        if len(errors) > 5:
            result_text += f"\n‚Ä¢ ...–∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫"

    total_photos = PropertyPhoto.objects.filter(property_id=property_id).count()
    result_text += f"\n\nüì∏ *–í—Å–µ–≥–æ —Ñ–æ—Ç–æ:* {total_photos}/6"

    if total_photos < 6:
        result_text += f"\n–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ: {6 - total_photos}"

    send_telegram_message(chat_id, result_text)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
    handle_manage_photos_start(chat_id)


# 3. –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
def handle_photo_delete_with_confirmation(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}
    property_id = state_data.get("editing_property_id")

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        handle_manage_photos_start(chat_id)
        return

    try:
        prop = Property.objects.get(id=property_id)
        photos = PropertyPhoto.objects.filter(property=prop)

        if text == "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not state_data.get('delete_all_confirmed'):
                state_data['delete_all_confirmed'] = True
                profile.telegram_state = state_data
                profile.save()

                keyboard = [
                    [KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ")],
                    [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
                ]

                send_telegram_message(
                    chat_id,
                    f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
                    f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï {photos.count()} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π?\n"
                    f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
                )
                return

        elif text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ":
            if state_data.get('delete_all_confirmed'):
                count = photos.count()
                photos.delete()
                send_telegram_message(
                    chat_id,
                    f"‚úÖ *–£–¥–∞–ª–µ–Ω–æ {count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π*\n\n"
                    f"–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã."
                )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                state_data.pop('delete_all_confirmed', None)
                profile.telegram_state = state_data
                profile.save()

        elif text.startswith("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ #"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ
            import re
            match = re.search(r'#(\d+)', text)
            if match:
                photo_num = int(match.group(1))
                photo_list = list(photos)

                if 1 <= photo_num <= len(photo_list):
                    photo_to_delete = photo_list[photo_num - 1]
                    photo_to_delete.delete()

                    remaining = PropertyPhoto.objects.filter(property=prop).count()
                    send_telegram_message(
                        chat_id,
                        f"‚úÖ *–§–æ—Ç–æ #{photo_num} —É–¥–∞–ª–µ–Ω–æ*\n\n"
                        f"üì∏ –û—Å—Ç–∞–ª–æ—Å—å —Ñ–æ—Ç–æ: {remaining}/6"
                    )
                else:
                    send_telegram_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ")
                    return
            else:
                send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ")
                return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        handle_manage_photos_start(chat_id)

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        profile.telegram_state = {}
        profile.save()


# 4. –£–ª—É—á—à–µ–Ω–∏—è –≤ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
def show_property_photos_enhanced(chat_id, prop, photos):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∫–∞–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    if not photos.exists():
        send_telegram_message(
            chat_id,
            f"üì∑ *–£ –∫–≤–∞—Ä—Ç–∏—Ä—ã ¬´{prop.name}¬ª –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π*\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ—Ç–æ
    url_photos = photos.filter(image_url__isnull=False).count()
    file_photos = photos.filter(image__isnull=False).count()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_urls = []
    failed_count = 0

    for photo in photos:
        url = None
        if photo.image_url:
            url = photo.image_url
        elif photo.image:
            try:
                if hasattr(photo.image, 'url'):
                    url = photo.image.url
                    if url and not url.startswith('http'):
                        from django.conf import settings
                        site_url = getattr(settings, 'SITE_URL', '')
                        domain = getattr(settings, 'DOMAIN', 'http://localhost:8000')
                        base_url = site_url or domain
                        url = f"{base_url.rstrip('/')}{url}"
            except Exception as e:
                logger.error(f"Error getting image URL: {e}")
                failed_count += 1

        if url:
            photo_urls.append(url)
        else:
            failed_count += 1

    if photo_urls:
        try:
            send_photo_group(chat_id, photo_urls)

            stats_text = (
                f"üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã ¬´{prop.name}¬ª*\n\n"
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–æ: {len(photo_urls)} —Ñ–æ—Ç–æ\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {photos.count()}\n"
                f"‚Ä¢ –ü–æ URL: {url_photos}\n"
                f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_photos}"
            )

            if failed_count > 0:
                stats_text += f"\n‚Ä¢ ‚ùå –û—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {failed_count}"

            send_telegram_message(chat_id, stats_text)

        except Exception as e:
            logger.error(f"Error sending photos: {e}")
            send_telegram_message(
                chat_id,
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π*\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {len(photo_urls)} —Ñ–æ—Ç–æ.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    else:
        send_telegram_message(
            chat_id,
            f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*\n\n"
            f"–í –±–∞–∑–µ –µ—Å—Ç—å {photos.count()} –∑–∞–ø–∏—Å–µ–π –æ —Ñ–æ—Ç–æ, –Ω–æ –Ω–∏ –æ–¥–Ω—É –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏–ª–∏ URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        )


@log_handler
def show_favorites_list(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    profile = _get_profile(chat_id)

    favorites = Favorite.objects.filter(user=profile.user).select_related(
        "property", "property__district__city"
    )

    if not favorites.exists():
        text = "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ*\n\n–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç."
        kb = [[KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    else:
        text = "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ*\n\n"
        kb = []

        for i, fav in enumerate(favorites[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            prop = fav.property
            text += (
                f"{i}. *{prop.name}*\n"
                f"   üìç {prop.district.city.name}, {prop.district.name}\n"
                f"   üí∞ {prop.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏\n\n"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
            kb.append([KeyboardButton(f"‚≠ê{i}. {prop.name[:30]}")])

        kb.append([KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")])
        kb.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
    )


@log_handler
def show_favorite_property_detail(chat_id, property_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    profile = _get_profile(chat_id)

    try:
        prop = Property.objects.get(id=property_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        if not Favorite.objects.filter(user=profile.user, property=prop).exists():
            send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        photos = PropertyPhoto.objects.filter(property=prop)[:6]
        if photos:
            photo_urls = []
            for p in photos:
                if p.image_url:
                    photo_urls.append(p.image_url)
                elif p.image:
                    try:
                        url = p.image.url
                        if not url.startswith('http'):
                            from django.conf import settings
                            site_url = getattr(settings, 'SITE_URL', '')
                            domain = getattr(settings, 'DOMAIN', 'http://localhost:8000')
                            base_url = site_url or domain
                            url = f"{base_url.rstrip('/')}{url}"
                        photo_urls.append(url)
                    except:
                        pass

            if photo_urls:
                send_photo_group(chat_id, photo_urls)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        from django.db.models import Avg, Count

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–ª—è is_approved
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT column_name FROM information_schema.columns WHERE table_name='listings_review' AND column_name='is_approved'")
            has_is_approved = cursor.fetchone() is not None

        if has_is_approved:
            stats = Review.objects.filter(property=prop, is_approved=True).aggregate(
                avg=Avg('rating'), cnt=Count('id')
            )
        else:
            stats = Review.objects.filter(property=prop).aggregate(
                avg=Avg('rating'), cnt=Count('id')
            )

        text = (
            f"‚≠ê *–ò–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ*\n\n"
            f"*{prop.name}*\n"
            f"üìç {prop.district.city.name}, {prop.district.name}\n"
            f"üè† –ö–ª–∞—Å—Å: {prop.get_property_class_display()}\n"
            f"üõè –ö–æ–º–Ω–∞—Ç: {prop.number_of_rooms}\n"
            f"üìè –ü–ª–æ—â–∞–¥—å: {prop.area} –º¬≤\n"
            f"üí∞ –¶–µ–Ω–∞: *{prop.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
        )

        if prop.description:
            text += f"\nüìù {prop.description}\n"

        if stats['avg']:
            text += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg']:.1f}/5 ({stats['cnt']} –æ—Ç–∑—ã–≤–æ–≤)\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []

        # –ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω–∞
        if prop.status == "–°–≤–æ–±–æ–¥–Ω–∞":
            keyboard.append([KeyboardButton(f"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {prop.id}")])
        else:
            text += f"\nüö´ –°—Ç–∞—Ç—É—Å: {prop.status}"

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if stats['cnt'] > 0:
            keyboard.append([KeyboardButton(f"üí¨ –û—Ç–∑—ã–≤—ã {prop.id}")])

        keyboard.append([KeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ {prop.id}")])
        keyboard.append([KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")])
        keyboard.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
        )

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        show_favorites_list(chat_id)


@log_handler
def toggle_favorite(chat_id, property_id):
    """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    profile = _get_profile(chat_id)

    try:
        prop = Property.objects.get(id=property_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        favorite = Favorite.objects.filter(user=profile.user, property=prop).first()

        if favorite:
            favorite.delete()
            send_telegram_message(chat_id, f"‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {prop.name}")
        else:
            Favorite.objects.create(user=profile.user, property=prop)
            send_telegram_message(chat_id, f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {prop.name}")

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@log_handler
def navigate_results(chat_id, profile, text):
    sd = profile.telegram_state or {}
    if text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è":
        show_search_results(chat_id, profile, sd.get("search_offset", 0) + 1)
    elif text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è":
        show_search_results(chat_id, profile, max(sd.get("search_offset", 0) - 1, 0))
    elif text.startswith("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"):
        pid = int(text.split()[-1])
        handle_booking_start(chat_id, pid)
    elif text.startswith("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"):
        pid = int(text.split()[-1])
        toggle_favorite(chat_id, pid)
        show_search_results(chat_id, profile, sd.get("search_offset", 0))
    elif text.startswith("‚ùå –ò–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"):
        pid = int(text.split()[-1])
        toggle_favorite(chat_id, pid)
        show_search_results(chat_id, profile, sd.get("search_offset", 0))
    elif text.startswith("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä"):
        pid = int(text.split()[-1])
        show_property_card(chat_id, Property.objects.get(id=pid))
    elif text.startswith("üí¨ –û—Ç–∑—ã–≤—ã"):
        pid = int(text.split()[-1])
        show_property_reviews(chat_id, pid, offset=0)
    else:
        send_telegram_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")


@log_handler
def show_property_card(chat_id, property_obj):
    photos = PropertyPhoto.objects.filter(property=property_obj)[:6]
    if photos:
        send_photo_group(chat_id, [p.image_url for p in photos])
    stats = Review.objects.filter(property=property_obj).aggregate(
        avg=Avg("rating"), cnt=Count("id")
    )
    text = (
        f"*{property_obj.name}*\n"
        f"üìç {property_obj.district.city.name}, {property_obj.district.name}\n"
        f"üè† –ö–ª–∞—Å—Å: {property_obj.get_property_class_display()}\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {property_obj.number_of_rooms}\n"
        f"üí∞ –¶–µ–Ω–∞: *{property_obj.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
    )
    if stats["avg"]:
        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg']:.1f}/5 ({stats['cnt']} –æ—Ç–∑—ã–≤–æ–≤)\n"
    buttons = []
    if property_obj.status == "–°–≤–æ–±–æ–¥–Ω–∞":
        buttons.append([KeyboardButton(f"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {property_obj.id}")])
    if stats["cnt"] > 0:
        buttons.append([KeyboardButton(f"üí¨ –û—Ç–∑—ã–≤—ã {property_obj.id}")])
    buttons.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(
            buttons, resize_keyboard=True, input_field_placeholder="–î–µ–π—Å—Ç–≤–∏–µ"
        ).to_dict(),
    )


@log_handler
def handle_booking_start(chat_id, property_id):
    profile = _get_profile(chat_id)
    try:
        prop = Property.objects.get(id=property_id, status="–°–≤–æ–±–æ–¥–Ω–∞")
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    profile.telegram_state.update(
        {"state": STATE_AWAITING_CHECK_IN, "booking_property_id": property_id}
    )
    profile.save()
    today = date.today()
    tomorrow = today + timedelta(days=1)
    text = (
        f"üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã*\n"
        f"{prop.name}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.YYYY –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
    )
    kb = [
        [KeyboardButton(f"–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})")],
        [KeyboardButton(f"–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ]
    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(
            kb, resize_keyboard=True, input_field_placeholder="–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞"
        ).to_dict(),
    )


@log_handler
def handle_checkin_input(chat_id, text):
    try:
        check_in = datetime.strptime(text, "%d.%m.%Y").date()
    except:
        if "–°–µ–≥–æ–¥–Ω—è" in text:
            check_in = date.today()
        else:
            check_in = date.today() + timedelta(days=1)
    profile = _get_profile(chat_id)
    sd = profile.telegram_state
    sd.update(
        {"check_in_date": check_in.isoformat(), "state": STATE_AWAITING_CHECK_OUT}
    )
    profile.telegram_state = sd
    profile.save()
    tomorrow = check_in + timedelta(days=1)
    after = tomorrow + timedelta(days=1)
    text = (
        f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {check_in.strftime('%d.%m.%Y')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
    )
    kb = [
        [KeyboardButton(f"{tomorrow.strftime('%d.%m')} (+1)")],
        [KeyboardButton(f"{after.strftime('%d.%m')} (+2)")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ]
    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(
            kb, resize_keyboard=True, input_field_placeholder="–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞"
        ).to_dict(),
    )


@log_handler
def handle_checkout_input(chat_id, text):
    """Handle checkout date input with time selection"""
    import re
    from datetime import datetime, date, timedelta

    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    # –ë–µ—Ä—ë–º –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    check_in_str = sd.get("check_in_date")
    if not check_in_str:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    check_in = date.fromisoformat(check_in_str)

    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ (–∫–∞–∫ –±—ã–ª–æ)
    m = re.search(r"\(\s*\+?(\d+)", text)
    if m:
        offset = int(m.group(1))
        check_out = check_in + timedelta(days=offset)
    elif text.startswith("–°–µ–≥–æ–¥–Ω—è"):
        check_out = date.today()
    elif text.startswith("–ó–∞–≤—Ç—Ä–∞"):
        check_out = date.today() + timedelta(days=1)
    else:
        try:
            check_out = datetime.strptime(text, "%d.%m.%Y").date()
        except ValueError:
            send_telegram_message(
                chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –î–î.MM.YYYY."
            )
            return

    if check_out <= check_in:
        send_telegram_message(chat_id, "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–µ–∑–¥–∞
    sd.update(
        {
            "check_out_date": check_out.isoformat(),
            "state": STATE_AWAITING_CHECK_IN_TIME,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å STATE_CONFIRM_BOOKING
        }
    )
    profile.telegram_state = sd
    profile.save()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–µ–∑–¥–∞
    text = f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {check_out.strftime('%d.%m.%Y')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–µ–∑–¥–∞:"
    kb = [
        [KeyboardButton("12:00"), KeyboardButton("14:00")],
        [KeyboardButton("16:00"), KeyboardButton("18:00")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ]
    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
    )


@log_handler
def handle_checkin_time(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–µ–∑–¥–∞"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    if text in ["12:00", "14:00", "16:00", "18:00"]:
        sd["check_in_time"] = text
        sd["state"] = STATE_AWAITING_CHECK_OUT_TIME
        profile.telegram_state = sd
        profile.save()

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞:"
        kb = [
            [KeyboardButton("10:00"), KeyboardButton("11:00")],
            [KeyboardButton("12:00"), KeyboardButton("14:00")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
        ]
        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
        )
    else:
        send_telegram_message(
            chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        )


@log_handler
def handle_checkout_time(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–µ–∑–¥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    if text in ["10:00", "11:00", "12:00", "14:00"]:
        sd["check_out_time"] = text
        sd["state"] = STATE_CONFIRM_BOOKING

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        property_id = sd.get("booking_property_id")
        check_in = date.fromisoformat(sd.get("check_in_date"))
        check_out = date.fromisoformat(sd.get("check_out_date"))
        check_in_time = sd.get("check_in_time", "14:00")
        check_out_time = text

        prop = Property.objects.get(id=property_id)
        days = (check_out - check_in).days
        total_price = days * prop.price_per_day
        sd["total_price"] = float(total_price)

        profile.telegram_state = sd
        profile.save()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        text_msg = (
            f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            f"üè† {prop.name}\n"
            f"üìÖ –ó–∞–µ–∑–¥: {check_in.strftime('%d.%m.%Y')} –≤ {check_in_time}\n"
            f"üìÖ –í—ã–µ–∑–¥: {check_out.strftime('%d.%m.%Y')} –¥–æ {check_out_time}\n"
            f"üåô –ù–æ—á–µ–π: {days}\n"
            f"üí∞ –ò—Ç–æ–≥–æ: *{total_price:,.0f} ‚Ç∏*"
        )
        kb = [[KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Kaspi")], [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]]
        send_telegram_message(
            chat_id,
            text_msg,
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
        )
    else:
        send_telegram_message(
            chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        )


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_payment_confirmation –≤ telegram_bot/handlers.py


@log_handler
def handle_payment_confirmation(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Kaspi"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    property_id = sd.get("booking_property_id")
    check_in_str = sd.get("check_in_date")
    check_out_str = sd.get("check_out_date")
    total_price = sd.get("total_price")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not all([property_id, check_in_str, check_out_str, total_price]):
        send_telegram_message(
            chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        prop = Property.objects.get(id=property_id)
        check_in = date.fromisoformat(check_in_str)
        check_out = date.fromisoformat(check_out_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç
        conflicts = Booking.objects.filter(
            property=prop,
            status__in=["pending_payment", "confirmed"],
            start_date__lt=check_out,
            end_date__gt=check_in,
        ).exists()

        if conflicts:
            send_telegram_message(
                chat_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ –¥–∞—Ç—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            booking = Booking.objects.create(
                user=profile.user,
                property=prop,
                start_date=check_in,
                end_date=check_out,
                check_in_time=sd.get("check_in_time", "14:00"),  # –î–æ–±–∞–≤–∏—Ç—å
                check_out_time=sd.get("check_out_time", "12:00"),  # –î–æ–±–∞–≤–∏—Ç—å
                total_price=total_price,
                status="pending_payment",
                created_at=timezone.now(),
            )

            logger.info(
                f"–°–æ–∑–¥–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile.user.username}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
            send_telegram_message(
                chat_id, "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )

            try:
                # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Kaspi
                payment_info = kaspi_initiate_payment(
                    booking_id=booking.id,
                    amount=float(total_price),
                    description=f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {prop.name} —Å {check_in.strftime('%d.%m.%Y')} –ø–æ {check_out.strftime('%d.%m.%Y')}",
                )

                if payment_info and payment_info.get("checkout_url"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
                    kaspi_payment_id = payment_info.get("payment_id")
                    if kaspi_payment_id:
                        booking.kaspi_payment_id = kaspi_payment_id
                        booking.save()

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
                    checkout_url = payment_info["checkout_url"]

                    # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
                    if settings.DEBUG:
                        # –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                        import time
                        time.sleep(2)

                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                        booking.status = 'confirmed'
                        booking.save()

                        # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
                        from booking_bot.listings.models import PropertyCalendarManager
                        PropertyCalendarManager.block_dates(
                            prop,
                            check_in,
                            check_out,
                            booking=booking,
                            status='booked'
                        )
                        logger.info(f"Dates blocked for booking {booking.id}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
                        send_booking_confirmation(chat_id, booking)

                        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        profile.telegram_state = {}
                        profile.save()

                        logger.info(
                            f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (DEBUG —Ä–µ–∂–∏–º)"
                        )
                    else:
                        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                        text = (
                            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                            f"üìã –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n\n"
                            f"üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ:\n"
                            f"{checkout_url}\n\n"
                            f"‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç"
                        )

                        # –ö–Ω–æ–ø–∫–∏
                        kb = [
                            [KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
                            [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
                        ]

                        send_telegram_message(
                            chat_id,
                            text,
                            reply_markup=ReplyKeyboardMarkup(
                                kb, resize_keyboard=True
                            ).to_dict(),
                        )

                        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        profile.telegram_state = {}
                        profile.save()

                        logger.info(
                            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking.id}"
                        )

                else:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                    raise KaspiPaymentError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")

            except KaspiPaymentError as e:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞
                booking.status = "payment_failed"
                booking.save()

                logger.error(f"–û—à–∏–±–∫–∞ Kaspi –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking.id}: {e}")

                send_telegram_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                    f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {booking.id}",
                )

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        send_telegram_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


def send_booking_confirmation(chat_id, booking):
    import html
    property_obj = booking.property
    user = booking.user

    text = (
        "<b>‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
        "üéâ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
        "<b>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        f"–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n"
        f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {html.escape(property_obj.name)}\n"
        f"–ê–¥—Ä–µ—Å: {html.escape(property_obj.address or '')}\n"
        f"–ó–∞–µ–∑–¥: {booking.start_date.strftime('%d.%m.%Y')}\n"
        f"–í—ã–µ–∑–¥: {booking.end_date.strftime('%d.%m.%Y')}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.total_price:,.0f} ‚Ç∏\n\n"
    )

    if property_obj.entry_instructions:
        text += f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é:</b>\n{html.escape(property_obj.entry_instructions)}\n\n"

    codes = property_obj.get_access_codes(user)
    AuditLog.log(
        user=user,
        action="send_code",
        obj=property_obj,
        details={"booking_id": booking.id, "channel": "telegram", "codes_sent": list(codes.keys())},
        telegram_chat_id=str(chat_id),
    )

    if codes.get("digital_lock_code"):
        text += f"üîê <b>–ö–æ–¥ –æ—Ç –∑–∞–º–∫–∞:</b> <code>{html.escape(codes['digital_lock_code'])}</code>\n"
    if codes.get("key_safe_code"):
        text += f"üîë <b>–ö–æ–¥ –æ—Ç —Å–µ–π—Ñ–∞:</b> <code>{html.escape(codes['key_safe_code'])}</code>\n"

    if hasattr(property_obj.owner, "profile") and property_obj.owner.profile.phone_number:
        text += f"\nüìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞:</b> {html.escape(property_obj.owner.profile.phone_number)}\n"
        AuditLog.log(
            user=user,
            action="view_phone",
            obj=property_obj.owner.profile,
            details={"context": "booking_confirmation"},
            telegram_chat_id=str(chat_id),
        )

    text += "\nüí¨ –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!"

    kb = [[KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    send_telegram_message(chat_id, text, reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(), parse_mode="HTML")
    prompt_review(chat_id, booking)



@log_handler
def show_user_bookings(chat_id, booking_type="active"):
    profile = _get_profile(chat_id)
    if booking_type == "active":
        bookings = Booking.objects.filter(
            user=profile.user, status="confirmed", end_date__gte=date.today()
        ).order_by("start_date")
        title = "üìä *–¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    else:
        bookings = Booking.objects.filter(
            user=profile.user, status__in=["completed", "cancelled"]
        ).order_by("-created_at")[:10]
        title = "üìã *–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"
    if not bookings:
        text = f"{title}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {'–∞–∫—Ç–∏–≤–Ω—ã—Ö' if booking_type=='active' else '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö'} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        kb = [[KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
        )
        return
    text = title + "\n\n"
    for b in bookings:
        emoji = {"confirmed": "‚úÖ", "completed": "‚úîÔ∏è", "cancelled": "‚ùå"}.get(
            b.status, "‚Ä¢"
        )
        text += (
            f"{emoji} *{b.property.name}*\n"
            f"üìÖ {b.start_date.strftime('%d.%m')} - {b.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ {b.total_price} ‚Ç∏\n\n"
        )
    kb = [[KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
    )


@log_handler
def show_property_reviews(chat_id, property_id, offset=0):
    try:
        prop = Property.objects.get(id=property_id)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è is_approved
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT column_name FROM information_schema.columns WHERE table_name='listings_review' AND column_name='is_approved'")
            has_is_approved = cursor.fetchone() is not None

        if has_is_approved:
            reviews = Review.objects.filter(property=prop, is_approved=True).order_by("-created_at")
        else:
            reviews = Review.objects.filter(property=prop).order_by("-created_at")

        if not reviews[offset:offset + 5]:
            send_telegram_message(chat_id, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = f"<b>–û—Ç–∑—ã–≤—ã –æ {html.escape(prop.name)}</b>\n\n"
        for r in reviews[offset:offset + 5]:
            stars = "‚≠ê" * r.rating
            author = r.user.first_name or r.user.username or "–ì–æ—Å—Ç—å"
            text += (
                f"{stars} <i>{html.escape(author)}</i> "
                f"{r.created_at.strftime('%d.%m.%Y')}\n"
                f"{html.escape(r.text or '')}\n\n"
            )

        kb = []
        if offset + 5 < reviews.count():
            kb.append([KeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ")])
        kb.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
            parse_mode="HTML",
        )
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@log_handler
def help_command_handler(chat_id):
    profile = _get_or_create_local_profile(chat_id)
    text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ñ–∏–ª—å–µGO*\n\n"
        "üîç *–ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä* ‚Äî –Ω–∞–π—Ç–∏ –∂–∏–ª—å–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
        "üìã *–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è* ‚Äî –∏—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"
        "üìä *–°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏* ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ* ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n"
        "‚ùì *–ü–æ–º–æ—â—å* ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    kb = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"), KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏"), KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]

    # –ï—Å–ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–∞–Ω–µ–ª–∏
    if profile.role in ("admin", "super_admin"):
        kb.append([KeyboardButton("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(
            kb, resize_keyboard=True, input_field_placeholder="–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        ).to_dict(),
    )


def date_input_handler(chat_id, text):
    """Dispatch date input to check-in or check-out handler based on state."""
    profile = _get_profile(chat_id)
    state = (profile.telegram_state or {}).get("state")

    if state == STATE_AWAITING_CHECK_IN:
        handle_checkin_input(chat_id, text)
    elif state == STATE_AWAITING_CHECK_OUT:
        handle_checkout_input(chat_id, text)
    else:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã.")


@log_handler
def handle_cancel_booking_start(chat_id, booking_id):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.get(
            id=booking_id,
            user=profile.user,
            status__in=["pending_payment", "confirmed"],
        )

        if not booking.is_cancellable():
            send_telegram_message(
                chat_id,
                "‚ùå –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
                "–û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–æ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.",
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        profile.telegram_state = {
            "state": STATE_CANCEL_BOOKING,
            "cancelling_booking_id": booking_id,
        }
        profile.save()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        text = (
            f"üö´ *–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking_id}*\n\n"
            f"üè† {booking.property.name}\n"
            f"üìÖ {booking.start_date.strftime('%d.%m.%Y')} - "
            f"{booking.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ {booking.total_price:,.0f} ‚Ç∏\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?"
        )

        keyboard = [
            [KeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å")],
            [KeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å")],
        ]

        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
        )

    except Booking.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@log_handler
def handle_cancel_confirmation(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    booking_id = state_data.get("cancelling_booking_id")
    if not booking_id:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if text == "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å":
        profile.telegram_state = {}
        profile.save()
        send_telegram_message(
            chat_id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n" "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        start_command_handler(chat_id)
        return

    if text == "‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏—á–∏–Ω—ã
        state_data["state"] = STATE_CANCEL_REASON
        profile.telegram_state = state_data
        profile.save()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        keyboard = [
            [KeyboardButton("–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã")],
            [KeyboardButton("–ù–∞—à–µ–ª –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç")],
            [KeyboardButton("–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ")],
            [KeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π")],
            [KeyboardButton("–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö")],
            [KeyboardButton("–§–æ—Ä—Å-–º–∞–∂–æ—Ä")],
            [KeyboardButton("–û—Ç–º–µ–Ω–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")],
            [KeyboardButton("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞")],
            [KeyboardButton("–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞")],
        ]

        send_telegram_message(
            chat_id,
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard,
                resize_keyboard=True,
                input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É",
            ).to_dict(),
        )


@log_handler
def handle_cancel_reason_selection(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    booking_id = state_data.get("cancelling_booking_id")
    if not booking_id:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–æ–¥—ã –ø—Ä–∏—á–∏–Ω
    reason_mapping = {
        "–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã": "changed_plans",
        "–ù–∞—à–µ–ª –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç": "found_better",
        "–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ": "too_expensive",
        "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π": "payment_issues",
        "–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö": "wrong_dates",
        "–§–æ—Ä—Å-–º–∞–∂–æ—Ä": "emergency",
        "–û—Ç–º–µ–Ω–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º": "owner_cancelled",
        "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞": "no_response",
        "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞": "other",
    }

    if text in reason_mapping:
        reason_code = reason_mapping[text]

        if reason_code == "other":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            state_data["cancel_reason"] = reason_code
            state_data["state"] = STATE_CANCEL_REASON_TEXT
            profile.telegram_state = state_data
            profile.save()

            keyboard = [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]]
            send_telegram_message(
                chat_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard,
                    resize_keyboard=True,
                    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É",
                ).to_dict(),
            )
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É
            perform_booking_cancellation(
                chat_id,
                booking_id,
                reason_code,
                text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ reason_text
            )
    else:
        send_telegram_message(
            chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )


@log_handler
def handle_cancel_reason_text(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        start_command_handler(chat_id)
        return

    booking_id = state_data.get("cancelling_booking_id")
    reason_code = state_data.get("cancel_reason", "other")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
    perform_booking_cancellation(chat_id, booking_id, reason_code, text)


@log_handler
def perform_booking_cancellation(chat_id, booking_id, reason_code, reason_text):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.get(id=booking_id, user=profile.user)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ cancel –∏–∑ –º–æ–¥–µ–ª–∏
        booking.cancel(user=profile.user, reason=reason_code, reason_text=reason_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = (
            f"‚úÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–æ*\n\n"
            f"üè† {booking.property.name}\n"
            f"üìÖ {booking.start_date.strftime('%d.%m.%Y')} - "
            f"{booking.end_date.strftime('%d.%m.%Y')}\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason_text}\n\n"
            "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )

        # –ï—Å–ª–∏ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
        if booking.kaspi_payment_id:
            text += "\nüí≥ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        profile.telegram_state = {}
        profile.save()

        keyboard = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")],
            [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ]

        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        notify_owner_about_cancellation(booking, reason_text)

    except Booking.DoesNotExist:
        send_telegram_message(
            chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        profile.telegram_state = {}
        profile.save()


def notify_owner_about_cancellation(booking, reason_text):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    owner = booking.property.owner
    if hasattr(owner, "profile") and owner.profile.telegram_chat_id:
        text = (
            f"‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ*\n\n"
            f"üè† {booking.property.name}\n"
            f"üìÖ {booking.start_date.strftime('%d.%m.%Y')} - "
            f"{booking.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ {booking.total_price:,.0f} ‚Ç∏\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason_text}\n\n"
            "–î–∞—Ç—ã —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        send_telegram_message(owner.profile.telegram_chat_id, text)


@log_handler
def show_user_bookings_with_cancel(chat_id, booking_type="active"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã –∏ –æ—Ü–µ–Ω–∫–∏"""
    profile = _get_profile(chat_id)

    if booking_type == "active":
        bookings = Booking.objects.filter(
            user=profile.user,
            status="confirmed",
            end_date__gte=date.today()
        ).select_related('property', 'property__district__city').order_by("start_date")
        title = "üìä *–¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    elif booking_type == "completed":
        bookings = Booking.objects.filter(
            user=profile.user,
            status="completed"
        ).select_related('property', 'property__district__city').order_by("-end_date")[:20]
        title = "üìã *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    else:
        bookings = Booking.objects.filter(
            user=profile.user,
            status__in=["completed", "cancelled"]
        ).select_related('property', 'property__district__city').order_by("-created_at")[:20]
        title = "üìã *–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"

    if not bookings:
        status_text = {
            "active": "–∞–∫—Ç–∏–≤–Ω—ã—Ö",
            "completed": "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö",
            "all": ""
        }.get(booking_type, "")

        text = f"{title}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {status_text} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."

        kb = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")],
            [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]

        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
        )
        return

    text = title + "\n\n"

    for i, booking in enumerate(bookings, 1):
        emoji = {"confirmed": "‚úÖ", "completed": "‚úîÔ∏è", "cancelled": "‚ùå"}.get(
            booking.status, "‚Ä¢"
        )

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        text += (
            f"{emoji} *{i}. {booking.property.name}*\n"
            f"   üìç {booking.property.district.city.name if booking.property.district else '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üìÖ {booking.start_date.strftime('%d.%m.%Y')} - {booking.end_date.strftime('%d.%m.%Y')}\n"
            f"   üí∞ {booking.total_price:,.0f} ‚Ç∏\n"
            f"   üè† –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n"
        )

        # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã
        if booking.status == "confirmed" and booking.is_cancellable():
            days_to_checkin = (booking.start_date - date.today()).days
            if days_to_checkin > 0:
                text += f"   ‚è∞ –î–æ –∑–∞–µ–∑–¥–∞: {days_to_checkin} –¥–Ω.\n"
            text += f"   üö´ –û—Ç–º–µ–Ω–∏—Ç—å: /cancel_{booking.id}\n"

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è –¥–æ –≤—ã–µ–∑–¥–∞
            days_to_checkout = (booking.end_date - date.today()).days
            if 0 <= days_to_checkout <= 3:
                text += f"   ‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å: /extend_{booking.id}\n"

        # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        elif booking.status == "completed":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            existing_review = Review.objects.filter(
                property=booking.property,
                user=profile.user,
                booking_id=booking.id
            ).first()

            if existing_review:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
                stars = "‚≠ê" * existing_review.rating
                text += f"   üìù *–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars}*\n"

                if existing_review.text:
                    preview_text = existing_review.text[:50]
                    if len(existing_review.text) > 50:
                        preview_text += "..."
                    text += f"   üí¨ ¬´{preview_text}¬ª\n"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –æ—Ç–∑—ã–≤–µ
                photo_count = ReviewPhoto.objects.filter(review=existing_review).count()
                if photo_count > 0:
                    text += f"   üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\n"

                text += f"   ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤: /edit_review_{booking.id}\n"
            else:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                days_since_checkout = (date.today() - booking.end_date).days

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ü–µ–Ω–∏—Ç—å
                if days_since_checkout <= 7:
                    text += f"   ‚≠ê *–û—Ü–µ–Ω–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É!* /review_{booking.id}\n"
                    text += f"   üí° _–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏_\n"
                elif days_since_checkout <= 30:
                    text += f"   ‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤: /review_{booking.id}\n"
                else:
                    text += f"   ‚≠ê –ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å: /review_{booking.id}\n"

        # –î–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        elif booking.status == "cancelled":
            if booking.cancel_reason:
                reason_display = {
                    "changed_plans": "–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã",
                    "found_better": "–ù–∞—à–µ–ª –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç",
                    "too_expensive": "–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ",
                    "payment_issues": "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π",
                    "wrong_dates": "–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö",
                    "emergency": "–§–æ—Ä—Å-–º–∞–∂–æ—Ä",
                    "owner_cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º",
                    "no_response": "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                    "other": "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"
                }.get(booking.cancel_reason, booking.cancel_reason)
                text += f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {reason_display}\n"

        text += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
    if booking_type == "completed":
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_reviews_count = Review.objects.filter(user=profile.user).count()
        completed_count = Booking.objects.filter(
            user=profile.user,
            status="completed"
        ).count()

        if completed_count > 0:
            review_percentage = (user_reviews_count / completed_count) * 100
            text += f"\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:*\n"
            text += f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ {user_reviews_count} –∏–∑ {completed_count} –∫–≤–∞—Ä—Ç–∏—Ä ({review_percentage:.0f}%)\n"

            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_reviews = Review.objects.filter(user=profile.user)
            if user_reviews.exists():
                from django.db.models import Avg
                avg_rating = user_reviews.aggregate(avg_rating=Avg('rating'))['avg_rating']
                text += f"–í–∞—à —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * int(avg_rating)} ({avg_rating:.1f})\n"

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    kb = []

    if booking_type == "active":
        kb.append([KeyboardButton("üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")])
    elif booking_type == "completed":
        kb.append([KeyboardButton("üìä –¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")])

    kb.extend([
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")],
        [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ])

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
    )


@log_handler
def handle_extend_booking(chat_id, booking_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.get(
            id=booking_id, user=profile.user, status="confirmed"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if booking.end_date < date.today():
            send_telegram_message(chat_id, "‚ùå –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ—Å–ª–µ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞
        check_date = booking.end_date + timedelta(days=1)
        max_extend_days = 0

        for i in range(1, 15):  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ 14 –¥–Ω–µ–π
            conflicts = (
                Booking.objects.filter(
                    property=booking.property,
                    status__in=["confirmed", "pending_payment"],
                    start_date__lte=check_date,
                    end_date__gt=check_date,
                )
                .exclude(id=booking.id)
                .exists()
            )

            if conflicts:
                break
            max_extend_days = i
            check_date += timedelta(days=1)

        if max_extend_days == 0:
            send_telegram_message(
                chat_id,
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∑–∞–Ω—è—Ç–∞ –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –≤—ã–µ–∑–¥–∞.\n"
                "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        profile.telegram_state = {
            "state": "extend_booking",
            "extending_booking_id": booking_id,
            "max_extend_days": max_extend_days,
        }
        profile.save()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        text = (
            f"üìÖ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            f"üè† {booking.property.name}\n"
            f"–¢–µ–∫—É—â–∏–π –≤—ã–µ–∑–¥: {booking.end_date.strftime('%d.%m.%Y')}\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: –¥–æ {max_extend_days} –¥–Ω–µ–π\n\n"
            f"–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å?"
        )

        keyboard = []
        for days in [1, 2, 3, 5, 7]:
            if days <= max_extend_days:
                new_price = days * booking.property.price_per_day
                keyboard.append(
                    [
                        KeyboardButton(
                            f"+{days} {'–¥–µ–Ω—å' if days == 1 else '–¥–Ω–µ–π'} ({new_price:,.0f} ‚Ç∏)"
                        )
                    ]
                )

        keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])

        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
        )

    except Booking.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


@log_handler
def confirm_extend_booking(chat_id, text):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    import re

    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    booking_id = sd.get("extending_booking_id")
    if not booking_id:
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
    match = re.search(r"\+(\d+)", text)
    if not match:
        send_telegram_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    extend_days = int(match.group(1))
    booking = Booking.objects.get(id=booking_id)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    extend_price = extend_days * booking.property.price_per_day
    new_end_date = booking.end_date + timedelta(days=extend_days)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    sd["extend_days"] = extend_days
    sd["extend_price"] = float(extend_price)
    sd["new_end_date"] = new_end_date.isoformat()
    sd["state"] = "confirm_extend"
    profile.telegram_state = sd
    profile.save()

    text = (
        f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è*\n\n"
        f"üè† {booking.property.name}\n"
        f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {new_end_date.strftime('%d.%m.%Y')}\n"
        f"‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–Ω–µ–π: {extend_days}\n"
        f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: *{extend_price:,.0f} ‚Ç∏*\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ?"
    )

    keyboard = [
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
    )


@log_handler
def process_extend_payment(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    booking_id = sd.get("extending_booking_id")
    extend_days = sd.get("extend_days")
    extend_price = sd.get("extend_price")
    new_end_date = date.fromisoformat(sd.get("new_end_date"))

    try:
        booking = Booking.objects.get(id=booking_id)

        # –í DEBUG —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        if settings.DEBUG:
            booking.end_date = new_end_date
            booking.total_price += extend_price
            booking.save()

            send_telegram_message(
                chat_id,
                f"‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {new_end_date.strftime('%d.%m.%Y')}\n"
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {booking.total_price:,.0f} ‚Ç∏",
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
            owner = booking.property.owner
            if hasattr(owner, "profile") and owner.profile.telegram_chat_id:
                send_telegram_message(
                    owner.profile.telegram_chat_id,
                    f"üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–æ!\n\n"
                    f"üè† {booking.property.name}\n"
                    f"–ì–æ—Å—Ç—å: {booking.user.first_name} {booking.user.last_name}\n"
                    f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {new_end_date.strftime('%d.%m.%Y')}\n"
                    f"–î–æ–ø–ª–∞—Ç–∞: {extend_price:,.0f} ‚Ç∏",
                )
        else:
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Kaspi
            from booking_bot.payments import initiate_payment

            payment_info = initiate_payment(
                booking_id=f"extend_{booking_id}",
                amount=extend_price,
                description=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking_id}",
            )

            if payment_info.get("checkout_url"):
                send_telegram_message(
                    chat_id,
                    f"üí≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n{payment_info['checkout_url']}",
                )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        profile.telegram_state = {}
        profile.save()

    except Exception as e:
        logger.error(f"Error extending booking: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏")


# –î–æ–±–∞–≤–∏—Ç—å –≤ telegram_bot/handlers.py –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

@log_handler
def handle_review_booking_command(chat_id, booking_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /review_<booking_id> - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.get(
            id=booking_id,
            user=profile.user,
            status="completed"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤–∞
        existing_review = Review.objects.filter(
            property=booking.property,
            user=profile.user,
            booking_id=booking.id
        ).first()

        if existing_review:
            send_telegram_message(
                chat_id,
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—É.\n"
                f"–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit_review_{booking_id}"
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
        start_review_creation(chat_id, booking)

    except Booking.DoesNotExist:
        send_telegram_message(
            chat_id,
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        )


@log_handler
def handle_edit_review_command(chat_id, booking_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_review_<booking_id> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.get(
            id=booking_id,
            user=profile.user,
            status="completed"
        )

        existing_review = Review.objects.filter(
            property=booking.property,
            user=profile.user,
            booking_id=booking.id
        ).first()

        if not existing_review:
            send_telegram_message(
                chat_id,
                f"‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /review_{booking_id}"
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        start_review_editing(chat_id, booking, existing_review)

    except Booking.DoesNotExist:
        send_telegram_message(
            chat_id,
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )


@log_handler
def start_review_creation(chat_id, booking):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    profile.telegram_state = {
        "state": "user_review_rating",
        "review_booking_id": booking.id,
        "review_property_id": booking.property.id,
        "review_mode": "create"
    }
    profile.save()

    text = (
        f"‚≠ê *–û—Ü–µ–Ω–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É*\n\n"
        f"üè† {booking.property.name}\n"
        f"üìÖ –í–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ: {booking.start_date.strftime('%d.%m.%Y')} - "
        f"{booking.end_date.strftime('%d.%m.%Y')}\n\n"
        "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:"
    )

    keyboard = [
        [KeyboardButton("‚≠ê"), KeyboardButton("‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
    )


@log_handler
def start_review_editing(chat_id, booking, existing_review):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞
    profile.telegram_state = {
        "state": "user_review_rating",
        "review_booking_id": booking.id,
        "review_property_id": booking.property.id,
        "review_mode": "edit",
        "existing_review_id": existing_review.id
    }
    profile.save()

    current_stars = "‚≠ê" * existing_review.rating

    text = (
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞*\n\n"
        f"üè† {booking.property.name}\n"
        f"üìÖ –í–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ: {booking.start_date.strftime('%d.%m.%Y')} - "
        f"{booking.end_date.strftime('%d.%m.%Y')}\n\n"
        f"–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: {current_stars} ({existing_review.rating}/5)\n"
        f"–¢–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤: {existing_review.text[:100] if existing_review.text else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}...\n\n"
        "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É:"
    )

    keyboard = [
        [KeyboardButton("‚≠ê"), KeyboardButton("‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
    )


@log_handler
def handle_user_review_rating(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    if text == "üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤":
        existing_review_id = state_data.get('existing_review_id')
        if existing_review_id:
            try:
                review = Review.objects.get(id=existing_review_id)
                property_name = review.property.name
                review.delete()

                send_telegram_message(
                    chat_id,
                    f"‚úÖ –û—Ç–∑—ã–≤ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ¬´{property_name}¬ª —É–¥–∞–ª–µ–Ω"
                )
            except Review.DoesNotExist:
                send_telegram_message(chat_id, "‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        profile.telegram_state = {}
        profile.save()
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating = text.count("‚≠ê")
    if rating < 1 or rating > 5:
        send_telegram_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–∫—Å—Ç—É
    state_data["review_rating"] = rating
    state_data["state"] = "user_review_text"
    profile.telegram_state = state_data
    profile.save()

    booking_id = state_data.get("review_booking_id")
    booking = Booking.objects.get(id=booking_id)

    text_msg = (
        f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ¬´{booking.property.name}¬ª\n"
        f"–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç':"
    )

    keyboard = [
        [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]

    send_telegram_message(
        chat_id,
        text_msg,
        reply_markup=ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            input_field_placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤..."
        ).to_dict()
    )


@log_handler
def handle_user_review_text(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç":
        text = ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
    state_data["review_text"] = text
    state_data["state"] = "user_review_photos"
    profile.telegram_state = state_data
    profile.save()

    text_msg = (
        "üì∑ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –æ—Ç–∑—ã–≤—É?\n"
        "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
    )

    keyboard = [
        [KeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]

    send_telegram_message(
        chat_id,
        text_msg,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
    )


@log_handler
def handle_user_review_photos(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫ –æ—Ç–∑—ã–≤—É"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ":
        save_user_review(chat_id)
        return

    if text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        state_data["state"] = "user_review_uploading"
        state_data["review_photos"] = []
        profile.telegram_state = state_data
        profile.save()

        keyboard = [
            [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
        ]

        send_telegram_message(
            chat_id,
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 3 —à—Ç—É–∫).\n"
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
        )


@log_handler
def handle_user_review_photo_upload(chat_id, update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫ –æ—Ç–∑—ã–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if state_data.get("state") != "user_review_uploading":
        return False

    photos = state_data.get("review_photos", [])
    if len(photos) >= 3:
        send_telegram_message(
            chat_id,
            "–ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'"
        )
        return True

    if update.message and update.message.photo:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo = max(update.message.photo, key=lambda p: getattr(p, 'file_size', 0) or 0)
        photos.append(photo.file_id)
        state_data["review_photos"] = photos
        profile.telegram_state = state_data
        profile.save()

        send_telegram_message(
            chat_id,
            f"üì∑ –§–æ—Ç–æ {len(photos)}/3 –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
            f"{'–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ ' if len(photos) < 3 else ''}"
            f"–Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'"
        )
        return True

    return False


@log_handler
def handle_user_review_uploading(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    profile = _get_profile(chat_id)

    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É":
        save_user_review(chat_id)
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        show_user_bookings_with_cancel(chat_id, "completed")


@log_handler
def save_user_review(chat_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    booking_id = state_data.get("review_booking_id")
    property_id = state_data.get("review_property_id")
    rating = state_data.get("review_rating", 5)
    text = state_data.get("review_text", "")
    photo_ids = state_data.get("review_photos", [])
    review_mode = state_data.get("review_mode", "create")
    existing_review_id = state_data.get("existing_review_id")

    try:
        booking = Booking.objects.get(id=booking_id)
        property_obj = Property.objects.get(id=property_id)

        if review_mode == "edit" and existing_review_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
            review = Review.objects.get(id=existing_review_id)
            review.rating = rating
            review.text = text
            review.save()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞
            ReviewPhoto.objects.filter(review=review).delete()

            action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
            review = Review.objects.create(
                property=property_obj,
                user=profile.user,
                rating=rating,
                text=text,
                booking_id=booking_id  # –°–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            )
            action_text = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        for file_id in photo_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ –∏–∑ Telegram
                bot_token = settings.TELEGRAM_BOT_TOKEN
                import requests

                file_response = requests.get(
                    f"https://api.telegram.org/bot{bot_token}/getFile",
                    params={"file_id": file_id}
                )

                if file_response.status_code == 200:
                    file_path = file_response.json()["result"]["file_path"]
                    file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"

                    ReviewPhoto.objects.create(
                        review=review,
                        image_url=file_url
                    )
            except Exception as e:
                logger.error(f"Error saving review photo: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text_msg = (
            f"‚úÖ –û—Ç–∑—ã–≤ {action_text}!\n\n"
            f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {property_obj.name}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating} ({rating}/5)\n"
        )

        if text:
            text_msg += f"üí¨ –¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}\n"

        if photo_ids:
            text_msg += f"üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photo_ids)}\n"

        text_msg += "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"

        keyboard = [
            [KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
            [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]

        send_telegram_message(
            chat_id,
            text_msg,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
        owner = property_obj.owner
        if hasattr(owner, 'profile') and owner.profile.telegram_chat_id:
            owner_text = (
                f"‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ!\n\n"
                f"üè† {property_obj.name}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating} ({rating}/5)\n"
                f"üë§ –û—Ç: {profile.user.first_name or '–ì–æ—Å—Ç—å'}\n"
            )

            if text:
                owner_text += f"üí¨ {text}\n"

            send_telegram_message(owner.profile.telegram_chat_id, owner_text)

    except Exception as e:
        logger.error(f"Error saving user review: {e}", exc_info=True)
        send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    profile.telegram_state = {}
    profile.save()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    show_user_bookings_with_cancel(chat_id, "completed")


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK QUERY =====

@log_handler
def handle_review_rating_callback(chat_id, booking_id, rating):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑ inline –∫–Ω–æ–ø–æ–∫"""
    profile = _get_profile(chat_id)
    
    try:
        booking = Booking.objects.get(id=booking_id, user=profile.user)
        property_obj = booking.property
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_data = profile.telegram_state or {}
        state_data.update({
            'booking_id': booking_id,
            'review_property_id': property_obj.id,
            'review_rating': rating,
            'state': 'review_text',
            'review_mode': 'create'
        })
        profile.telegram_state = state_data
        profile.save()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
        stars = "‚≠ê" * rating
        send_telegram_message(
            chat_id,
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {stars}\n\n"
            f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ \"{property_obj.title}\":",
            reply_markup={
                "keyboard": [
                    [{"text": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç"}],
                    [{"text": "‚ùå –û—Ç–º–µ–Ω–∞"}]
                ],
                "resize_keyboard": True
            }
        )
        
    except Booking.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        show_user_bookings_with_cancel(chat_id, "completed")
    except Exception as e:
        logger.error(f"Error in handle_review_rating_callback: {e}")
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@log_handler
def handle_submit_review_with_photos(chat_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    if state_data.get('state') != 'review_uploading_photos':
        send_telegram_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
    try:
        save_user_review(chat_id)
    except Exception as e:
        logger.error(f"Error saving review with photos: {e}")
        send_telegram_message(
            chat_id, 
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞"
        )
