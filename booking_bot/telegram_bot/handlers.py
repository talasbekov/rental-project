import logging
import requests
from datetime import datetime
from .. import settings

from booking_bot.users.models import UserProfile
from .utils import send_telegram_message, _edit_message

logger = logging.getLogger(__name__)

# Actions
ACTION_SEARCH = 'search'
ACTION_SEARCH_ROOMS = 'search_rooms'
ACTION_SEARCH_CLASS = 'search_class'
ACTION_BOOK_START = 'awaiting_start_date'
ACTION_BOOK_END = 'awaiting_end_date'

AVAILABLE_REGIONS = ['Almaty', 'Astana', 'Shymkent']
AVAILABLE_ROOMS = ['1', '2', '3', '4+']
AVAILABLE_CLASSES = [('economy', 'Economy'), ('comfort', 'Comfort'), ('premium', 'Premium')]


def _get_profile(chat_id):
    profile, _ = UserProfile.objects.get_or_create(telegram_chat_id=str(chat_id))
    return profile


def start_command_handler(chat_id):
    profile = _get_profile(chat_id)
    profile.telegram_state = {}
    profile.save()
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ü–∏–π."
    send_telegram_message(chat_id, text)


def menu_command_handler(chat_id):
    text = (
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n"
        "1. –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É\n"
        "2. –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "3. –ü–æ–º–æ—â—å\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞."
    )
    send_telegram_message(chat_id, text)


def help_command_handler(chat_id):
    text = (
        "ü§ñ *–ü–æ–º–æ—â—å*\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "1 ‚Äî –ø–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä\n"
        "2 ‚Äî —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"
        "3 ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"
    )
    send_telegram_message(chat_id, text)


def text_message_handler(chat_id, text):
    if text == '1':
        _send_region_buttons(chat_id)
    elif text == '2':
        list_bookings_handler(chat_id)
    elif text == '3':
        help_command_handler(chat_id)
    else:
        send_telegram_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏—Ç–µ /menu.")


def _send_region_buttons(chat_id):
    keyboard = [[{"text": r, "callback_data": f"search_region|{r}"}] for r in AVAILABLE_REGIONS]
    send_telegram_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", {"inline_keyboard": keyboard})


def callback_query_handler(chat_id, data, message_id):
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö callback_data."""
    parts = data.split('|')
    action = parts[0]
    payload = parts[1] if len(parts) > 1 else None

    if action == 'search_region':
        _handle_search_region(chat_id, payload, message_id)
    elif action == 'search_rooms':
        _handle_search_rooms(chat_id, payload, message_id)
    elif action == 'search_class':
        _handle_search_class(chat_id, payload, message_id)
    elif action == 'book_property':
        _handle_book_property(chat_id, payload)
    elif action == 'cancel_booking':
        _handle_cancel_booking(chat_id, payload)
    else:
        send_telegram_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


def _handle_search_region(chat_id, region, message_id):
    profile = _get_profile(chat_id)
    profile.telegram_state = {'action': ACTION_SEARCH, 'region': region}
    profile.save()

    keyboard = [[{"text": r, "callback_data": f"search_rooms|{r}"}] for r in AVAILABLE_ROOMS]
    _edit_message(chat_id, message_id, f"–†–µ–≥–∏–æ–Ω: <b>{region}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç:", {"inline_keyboard": keyboard})


def _handle_search_rooms(chat_id, rooms, message_id):
    profile = _get_profile(chat_id)
    state = profile.telegram_state or {}
    state.update({'action': ACTION_SEARCH_ROOMS, 'rooms': rooms})
    profile.telegram_state = state
    profile.save()

    keyboard = [[{"text": label, "callback_data": f"search_class|{key}"}] for key, label in AVAILABLE_CLASSES]
    _edit_message(chat_id, message_id, f"–ö–æ–º–Ω–∞—Ç: <b>{rooms}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", {"inline_keyboard": keyboard})


def _handle_search_class(chat_id, cls, message_id):
    profile = _get_profile(chat_id)
    state = profile.telegram_state or {}
    state.update({'action': ACTION_SEARCH_CLASS, 'class': cls})
    profile.telegram_state = state
    profile.save()

    params = {
        'region': state['region'],
        'rooms': state['rooms'],
        'class': cls,
    }
    try:
        url = f"{settings.API_BASE}/properties/"
        resp = requests.get(url, params=params, timeout=5)
        resp.raise_for_status()
        apartments = resp.json()
    except Exception as e:
        logger.error("Error fetching apartments", exc_info=True)
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not apartments:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        for apt in apartments[:5]:
            text = (
                f"<b>{apt['title']}</b>\n"
                f"üí∞ {apt['price']} per night"
            )
            btn = [[{"text": "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"book_property|{apt['id']}"}]]
            send_telegram_message(chat_id, text, {"inline_keyboard": btn})

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    profile.telegram_state = {}
    profile.save()


def _handle_book_property(chat_id, prop_id):
    profile = _get_profile(chat_id)
    profile.telegram_state = {'action': ACTION_BOOK_START, 'property_id': prop_id}
    profile.save()
    send_telegram_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (YYYY-MM-DD):")


def date_input_handler(chat_id, text):
    profile = _get_profile(chat_id)
    state = profile.telegram_state or {}
    action = state.get('action')

    try:
        date_obj = datetime.strptime(text, "%Y-%m-%d").date()
    except ValueError:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
        return

    if action == ACTION_BOOK_START:
        state.update({'start_date': text, 'action': ACTION_BOOK_END})
        profile.telegram_state = state
        profile.save()
        send_telegram_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (YYYY-MM-DD):")
    elif action == ACTION_BOOK_END:
        start = datetime.strptime(state['start_date'], "%Y-%m-%d").date()
        if date_obj <= start:
            send_telegram_message(chat_id, "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –∑–∞–µ–∑–¥–∞.")
            return

        data = {
            'property_id': state['property_id'],
            'start_date': state['start_date'],
            'end_date': text,
        }
        headers = {}
        if getattr(profile, 'jwt', None):
            headers['Authorization'] = f"Bearer {profile.jwt}"

        try:
            resp = requests.post(f"{settings.API_BASE}/api/bookings/", json=data, headers=headers, timeout=5)
            resp.raise_for_status()
            booking = resp.json()
        except Exception:
            logger.exception("Booking error")
            send_telegram_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
            profile.telegram_state = {}
            profile.save()
            return

        send_telegram_message(chat_id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
        if booking.get('payment_url'):
            send_telegram_message(chat_id, booking['payment_url'])

        profile.telegram_state = {}
        profile.save()
    else:
        send_telegram_message(chat_id, "–ù—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é (/menu).")


def list_bookings_handler(chat_id):
    profile = _get_profile(chat_id)
    headers = {}
    if getattr(profile, 'jwt', None):
        headers['Authorization'] = f"Bearer {profile.jwt}"

    try:
        resp = requests.get(f"{settings.API_BASE}/api/bookings/", headers=headers, timeout=5)
        resp.raise_for_status()
        bookings = resp.json()
    except Exception:
        logger.exception("Fetch bookings error")
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return

    if not bookings:
        send_telegram_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
    else:
        for b in bookings:
            text = (
                f"üÜî #{b['id']}\n"
                f"{b['property_title']}\n"
                f"{b['start_date']} ‚Äì {b['end_date']}\n"
                f"–°—Ç–∞—Ç—É—Å: {b['status']}"
            )
            btn = [[{"text": "–û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": f"cancel_booking|{b['id']}"}]]
            send_telegram_message(chat_id, text, {"inline_keyboard": btn})


def _handle_cancel_booking(chat_id, booking_id):
    profile = _get_profile(chat_id)
    headers = {}
    if getattr(profile, 'jwt', None):
        headers['Authorization'] = f"Bearer {profile.jwt}"

    try:
        resp = requests.delete(f"{settings.API_BASE}/api/bookings/{booking_id}/", headers=headers, timeout=5)
        resp.raise_for_status()
    except requests.exceptions.HTTPError as e:
        logger.error("Cancel error", exc_info=True)
        send_telegram_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    except Exception:
        logger.exception("Cancel booking exception")
        send_telegram_message(chat_id, "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    send_telegram_message(chat_id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
