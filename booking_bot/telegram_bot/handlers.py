import logging
import requests
from datetime import datetime, date, timedelta
from django.db import transaction, models
from django.db.models import Avg, Count
from .. import settings

from booking_bot.users.models import UserProfile
from booking_bot.listings.models import City, District, Property, PropertyPhoto, Review
from booking_bot.bookings.models import Booking
from booking_bot.payments import initiate_payment as kaspi_initiate_payment, KaspiPaymentError
from .utils import send_telegram_message, _edit_message, send_photo_group

logger = logging.getLogger(__name__)

# States
STATE_MAIN_MENU = 'main_menu'
STATE_SELECT_CITY = 'select_city'
STATE_SELECT_DISTRICT = 'select_district'
STATE_SELECT_CLASS = 'select_class'
STATE_SELECT_ROOMS = 'select_rooms'
STATE_SHOWING_RESULTS = 'showing_results'
STATE_AWAITING_DATES = 'awaiting_dates'
STATE_AWAITING_CHECK_IN = 'awaiting_check_in'
STATE_AWAITING_CHECK_OUT = 'awaiting_check_out'
STATE_CONFIRM_BOOKING = 'confirm_booking'
STATE_AWAITING_REVIEW_RATING = 'awaiting_review_rating'
STATE_AWAITING_REVIEW_TEXT = 'awaiting_review_text'

# Admin states
STATE_ADMIN_MENU = 'admin_menu'
STATE_ADMIN_ADD_PROPERTY = 'admin_add_property'
STATE_ADMIN_VIEW_STATS = 'admin_view_stats'


def _get_profile(chat_id, first_name=None, last_name=None):
    """Get or create a User profile with JWT token"""
    payload = {'telegram_chat_id': str(chat_id)}
    if first_name:
        payload['first_name'] = first_name
    if last_name:
        payload['last_name'] = last_name

    try:
        api_url = f"{settings.API_BASE}/telegram_auth/register_or_login/"
        logger.info(f"Attempting to register/login user via API: {api_url}")
        response = requests.post(api_url, json=payload, timeout=10)

        if response.status_code in [200, 201]:
            data = response.json()
            access_token = data.get('access')
            if access_token:
                profile = UserProfile.objects.get(telegram_chat_id=str(chat_id))
                if profile.telegram_state is None:
                    profile.telegram_state = {}
                profile.telegram_state['jwt_access_token'] = access_token
                profile.save()
                logger.info(f"Successfully retrieved and stored access token for chat_id: {chat_id}")
            else:
                logger.error(f"No access token in response for chat_id: {chat_id}")
                profile, _ = UserProfile.objects.get_or_create(telegram_chat_id=str(chat_id))
        else:
            logger.error(f"API call failed for chat_id: {chat_id}. Status: {response.status_code}")
            profile, _ = UserProfile.objects.get_or_create(telegram_chat_id=str(chat_id))

    except Exception as e:
        logger.error(f"Error in _get_profile for chat_id {chat_id}: {e}", exc_info=True)
        profile, _ = UserProfile.objects.get_or_create(telegram_chat_id=str(chat_id))

    if profile is None:
        profile, _ = UserProfile.objects.get_or_create(telegram_chat_id=str(chat_id))

    return profile


def start_command_handler(chat_id, first_name=None, last_name=None):
    """Handle /start command"""
    profile = _get_profile(chat_id, first_name=first_name, last_name=last_name)

    # Initialize telegram_state
    if profile.telegram_state is None:
        profile.telegram_state = {}

    # Clear any previous state except JWT token
    jwt_token = profile.telegram_state.get('jwt_access_token')
    profile.telegram_state = {'state': STATE_MAIN_MENU}
    if jwt_token:
        profile.telegram_state['jwt_access_token'] = jwt_token
    profile.save()

    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ñ–∏–ª—å–µGO ‚Äî –ø–æ–º–æ–≥—É –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ —Å—É—Ç–∫–∏."

    # Base menu for all users
    keyboard_buttons = [
        [{"text": "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä", "callback_data": "main_search"}],
        [{"text": "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "callback_data": "main_bookings"}],
        [{"text": "üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏", "callback_data": "main_current"}],
        [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "main_help"}],
    ]

    if profile.role == 'admin' or profile.role == 'super_admin':
        # Common for Admin and Superuser
        keyboard_buttons.append([{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", "callback_data": "admin_add_property"}])
        # Retain Admin Panel for other admin functions like "–ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã"
        keyboard_buttons.append([{"text": "üîß –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏", "callback_data": "admin_menu"}])


    if profile.role == 'super_admin':
        # Superuser specific
        # Assuming 'admin_stats' from show_admin_menu is the detailed statistics.
        # Or we might need a new callback for super_admin level statistics if it's different.
        # For now, let's use 'admin_stats' and it can be refined later.
        keyboard_buttons.append([{"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–°—É–ø–µ—Ä–∞–¥–º–∏–Ω)", "callback_data": "admin_stats"}])
        # Note: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏" is inside "–ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏" (admin_menu)

    send_telegram_message(chat_id, text, {"inline_keyboard": keyboard_buttons})


def help_command_handler(chat_id):
    """Handle /help command"""
    text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ñ–∏–ª—å–µGO*\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω, –∫–ª–∞—Å—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç."
    )
    send_telegram_message(chat_id, text)


def show_admin_menu(chat_id, message_id=None):
    """Show an admin menu"""
    profile = _get_profile(chat_id)

    text = "üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*"
    keyboard = [
        [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", "callback_data": "admin_add_property"}],
        [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"}],
        [{"text": "üè† –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "callback_data": "admin_properties"}],
        [{"text": "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_main"}],
    ]

    if profile.role == 'super_admin':
        keyboard.insert(2, [{"text": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", "callback_data": "admin_manage"}])

    if message_id:
        _edit_message(chat_id, message_id, text, {"inline_keyboard": keyboard})
    else:
        send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})


def show_property_card(chat_id, property_obj, show_booking_btn=True, show_reviews_btn=True):
    """Display property card with photos and details"""
    # Get photos
    photos = PropertyPhoto.objects.filter(property=property_obj)[:6]

    # Send photos if available
    if photos:
        photo_urls = [photo.image_url for photo in photos]
        send_photo_group(chat_id, photo_urls)

    # Get review stats
    review_stats = Review.objects.filter(property=property_obj).aggregate(
        avg_rating=Avg('rating'),
        count=Count('id')
    )
    avg_rating = review_stats['avg_rating'] or 0
    review_count = review_stats['count'] or 0

    # Format property details
    text = (
        f"*{property_obj.name}*\n"
        f"üìç {property_obj.district.city.name}, {property_obj.district.name}\n"
        f"üè† –ö–ª–∞—Å—Å: {property_obj.get_property_class_display()}\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {property_obj.number_of_rooms}\n"
        f"üìê –ü–ª–æ—â–∞–¥—å: {property_obj.area} –º¬≤\n"
        f"üí∞ –¶–µ–Ω–∞: *{property_obj.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
    )

    if avg_rating > 0:
        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5 ({review_count} –æ—Ç–∑—ã–≤–æ–≤)\n"

    if property_obj.description:
        text += f"\nüìù {property_obj.description[:200]}..."

    # Buttons
    keyboard = []

    if show_booking_btn and property_obj.status == 'available':
        keyboard.append([{"text": "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"book_{property_obj.id}"}])

    if show_reviews_btn and review_count > 0:
        keyboard.append([{"text": f"üí¨ –û—Ç–∑—ã–≤—ã ({review_count})", "callback_data": f"reviews_{property_obj.id}"}])

    keyboard.append([{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "callback_data": "back_to_results"}])

    send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})


def show_search_results(chat_id, profile, offset=0):
    """Show search results"""
    state_data = profile.telegram_state or {}

    # Get search parameters
    city_id = state_data.get('city_id')
    district_id = state_data.get('district_id')
    property_class = state_data.get('property_class')
    rooms = state_data.get('rooms')

    if not all([city_id, district_id, property_class, rooms]):
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω—ã.")
        start_command_handler(chat_id)
        return

    # Build a query
    query = Property.objects.filter(
        district__city_id=city_id,
        district_id=district_id,
        property_class=property_class,
        number_of_rooms=rooms,
        status='available'
    ).order_by('price_per_day')

    total_count = query.count()

    if total_count == 0:
        text = "–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω –∏–ª–∏ –∫–ª–∞—Å—Å –∂–∏–ª—å—è."
        keyboard = [
            [{"text": "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", "callback_data": "main_search"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_main"}],
        ]
        send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})
        return

    # Get current property
    properties = list(query[offset:offset + 1])
    if not properties:
        send_telegram_message(chat_id, "–ë–æ–ª—å—à–µ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    current_property = properties[0]

    # Save current offset
    state_data['search_offset'] = offset
    state_data['total_results'] = total_count
    profile.telegram_state = state_data
    profile.save()

    # Show property card
    show_property_card(chat_id, current_property)

    # Navigation buttons
    nav_keyboard = []

    if offset < total_count - 1:
        nav_keyboard.append([{"text": "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", "callback_data": f"next_property_{offset + 1}"}])
    else:
        # Last property
        send_telegram_message(
            chat_id,
            "–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.",
            {"inline_keyboard": [
                [{"text": "‚¨ÖÔ∏è –ö –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞", "callback_data": "next_property_0"}],
                [{"text": "üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "callback_data": "main_search"}],
            ]}
        )


def handle_booking_start(chat_id, property_id):
    """Start a booking process"""
    profile = _get_profile(chat_id)

    try:
        property_obj = Property.objects.get(id=property_id, status='available')
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    # Save booking info
    state_data = profile.telegram_state or {}
    state_data['state'] = STATE_AWAITING_CHECK_IN
    state_data['booking_property_id'] = property_id
    profile.telegram_state = state_data
    profile.save()

    # Default dates (today ‚Üí tomorrow)
    today = date.today()
    tomorrow = today + timedelta(days=1)

    text = (
        f"üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã*\n"
        f"{property_obj.name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: {today.strftime('%d.%m.%Y')}"
    )

    keyboard = [
        [{"text": f"–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})", "callback_data": f"date_today"}],
        [{"text": f"–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})", "callback_data": f"date_tomorrow"}],
        [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel_booking"}],
    ]

    send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})


def process_review_request(booking_id):
    """Send review request after checkout"""
    try:
        booking = Booking.objects.get(id=booking_id)
        profile = UserProfile.objects.get(user=booking.user)

        if not profile.telegram_chat_id:
            return

        # Check if review already exists
        if Review.objects.filter(property=booking.property, user=booking.user).exists():
            return

        text = (
            f"–ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–≤–∞—Ä—Ç–∏—Ä–∞ *{booking.property.name}*?\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥."
        )

        keyboard = [
            [
                {"text": "‚≠ê", "callback_data": f"rate_1_{booking.id}"},
                {"text": "‚≠ê‚≠ê", "callback_data": f"rate_2_{booking.id}"},
                {"text": "‚≠ê‚≠ê‚≠ê", "callback_data": f"rate_3_{booking.id}"},
            ],
            [
                {"text": "‚≠ê‚≠ê‚≠ê‚≠ê", "callback_data": f"rate_4_{booking.id}"},
                {"text": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", "callback_data": f"rate_5_{booking.id}"},
            ],
            [{"text": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "callback_data": "skip_review"}],
        ]

        send_telegram_message(profile.telegram_chat_id, text, {"inline_keyboard": keyboard})

    except Exception as e:
        logger.error(f"Error sending review request: {e}")


def show_property_reviews(chat_id, property_id, offset=0):
    """Show property reviews"""
    try:
        property_obj = Property.objects.get(id=property_id)
        reviews = Review.objects.filter(property=property_obj).order_by('-created_at')

        total_reviews = reviews.count()
        page_size = 10
        current_reviews = reviews[offset:offset + page_size]

        if not current_reviews:
            send_telegram_message(chat_id, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = f"*–û—Ç–∑—ã–≤—ã –æ {property_obj.name}*\n\n"

        for review in current_reviews:
            stars = "‚≠ê" * review.rating
            text += f"{stars}\n"
            text += f"_{review.user.first_name or '–ì–æ—Å—Ç—å'}_, {review.created_at.strftime('%d.%m.%Y')}\n"
            if review.text:
                text += f"{review.text}\n"
            text += "\n"

        keyboard = []

        if offset + page_size < total_reviews:
            keyboard.append([{"text": "‚û°Ô∏è –î–∞–ª—å—à–µ", "callback_data": f"reviews_{property_id}_{offset + page_size}"}])

        keyboard.append([{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": f"property_{property_id}"}])

        send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


def callback_query_handler(chat_id, data, message_id):
    """Handle callback queries"""
    profile = _get_profile(chat_id)

    # Main menu callbacks
    if data == 'main_search':
        show_city_selection(chat_id, message_id)
        return
    elif data == 'main_bookings':
        show_user_bookings(chat_id, 'completed')
        return
    elif data == 'main_current':
        show_user_bookings(chat_id, 'active')
        return
    elif data == 'main_help':
        help_command_handler(chat_id)
        return
    elif data == 'back_to_main':
        start_command_handler(chat_id)
        return

    # Admin callbacks
    elif data == 'admin_menu':
        show_admin_menu(chat_id, message_id)
        return
    elif data == 'admin_stats':
        show_admin_statistics(chat_id)
        return

    # Admin callbacks
    elif data == 'admin_menu':
        show_admin_menu(chat_id, message_id)
        return
    elif data == 'admin_properties':
        show_admin_properties(chat_id)
        return
    elif data == 'admin_stats':
        show_detailed_statistics(chat_id, 'month')
        return
    elif data == 'admin_add_property':
        handle_add_property_start(chat_id)
        return
    elif data == 'manage_admins' and profile.role == 'super_admin':
        show_super_admin_menu(chat_id)
        return
    elif data.startswith('stats_'):
        period = data.split('_')[1]
        show_detailed_statistics(chat_id, period)
        return
    elif data.startswith('export_stats_'):
        period = data.split('_', 2)[2]
        export_statistics_csv(chat_id, period)
        return

    # City selection
    elif data.startswith('city_'):
        city_id = int(data.split('_')[1])
        handle_city_selection(chat_id, city_id, message_id)
        return

    # District selection
    elif data.startswith('district_'):
        district_id = int(data.split('_')[1])
        handle_district_selection(chat_id, district_id, message_id)
        return

    # Property class selection
    elif data.startswith('class_'):
        property_class = data.split('_')[1]
        handle_class_selection(chat_id, property_class, message_id)
        return

    # Rooms selection
    elif data.startswith('rooms_'):
        rooms = data.split('_')[1]
        handle_rooms_selection(chat_id, rooms, message_id)
        return

    # Property navigation
    elif data.startswith('next_property_'):
        offset = int(data.split('_')[2])
        show_search_results(chat_id, profile, offset)
        return

    # Booking
    elif data.startswith('book_'):
        property_id = int(data.split('_')[1])
        handle_booking_start(chat_id, property_id)
        return

    # Reviews
    elif data.startswith('reviews_'):
        parts = data.split('_')
        property_id = int(parts[1])
        offset = int(parts[2]) if len(parts) > 2 else 0
        show_property_reviews(chat_id, property_id, offset)
        return

    # Rating
    elif data.startswith('rate_'):
        parts = data.split('_')
        rating = int(parts[1])
        booking_id = int(parts[2])
        handle_review_rating(chat_id, booking_id, rating)
        return

    # Date selection
    elif data == 'date_today':
        handle_date_selection(chat_id, date.today())
        return
    elif data == 'date_tomorrow':
        handle_date_selection(chat_id, date.today() + timedelta(days=1))
        return

    # Checkout date shortcuts
    elif data.startswith('checkout_'):
        days = int(data.split('_')[1])
        handle_checkout_shortcut(chat_id, days)
        return

    # Payment confirmation
    elif data == 'confirm_payment':
        handle_payment_confirmation(chat_id)
        return

    # Cancel booking
    elif data == 'cancel_booking':
        cancel_booking_process(chat_id)
        return

    # Submit review without text
    elif data == 'submit_review_no_text':
        submit_review_no_text(chat_id)
        return

    # Skip review
    elif data == 'skip_review':
        skip_review(chat_id)
        return

    # Back to results
    elif data == 'back_to_results':
        profile = _get_profile(chat_id)
        state_data = profile.telegram_state or {}
        offset = state_data.get('search_offset', 0)
        show_search_results(chat_id, profile, offset)
        return

    # Unknown callback
    logger.warning(f"Unknown callback data: {data}")


def show_city_selection(chat_id, message_id=None):
    """Show city selection"""
    profile = _get_profile(chat_id)

    cities = City.objects.all().order_by('name')
    if not cities:
        send_telegram_message(chat_id, "–ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    keyboard = [[{"text": city.name, "callback_data": f"city_{city.id}"}] for city in cities]

    # Update state
    state_data = profile.telegram_state or {}
    state_data['state'] = STATE_SELECT_CITY
    profile.telegram_state = state_data
    profile.save()

    if message_id:
        _edit_message(chat_id, message_id, text, {"inline_keyboard": keyboard})
    else:
        send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})


def handle_city_selection(chat_id, city_id, message_id):
    """Handle city selection"""
    profile = _get_profile(chat_id)

    try:
        city = City.objects.get(id=city_id)
        districts = District.objects.filter(city=city).order_by('name')

        if not districts:
            _edit_message(chat_id, message_id, "–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤.")
            return

        text = f"–ì–æ—Ä–æ–¥: *{city.name}*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:"
        keyboard = [[{"text": d.name, "callback_data": f"district_{d.id}"}] for d in districts]

        # Update state
        state_data = profile.telegram_state or {}
        state_data['state'] = STATE_SELECT_DISTRICT
        state_data['city_id'] = city_id
        profile.telegram_state = state_data
        profile.save()

        _edit_message(chat_id, message_id, text, {"inline_keyboard": keyboard})

    except City.DoesNotExist:
        _edit_message(chat_id, message_id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def handle_district_selection(chat_id, district_id, message_id):
    """Handle district selection"""
    profile = _get_profile(chat_id)

    try:
        district = District.objects.get(id=district_id)

        text = f"–†–∞–π–æ–Ω: *{district.name}*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∂–∏–ª—å—è:"
        keyboard = [
            [{"text": "–ö–æ–º—Ñ–æ—Ä—Ç", "callback_data": "class_economy"}],
            [{"text": "–ë–∏–∑–Ω–µ—Å", "callback_data": "class_business"}],
            [{"text": "–ü—Ä–µ–º–∏—É–º", "callback_data": "class_luxury"}],
        ]

        # Update state
        state_data = profile.telegram_state or {}
        state_data['state'] = STATE_SELECT_CLASS
        state_data['district_id'] = district_id
        profile.telegram_state = state_data
        profile.save()

        _edit_message(chat_id, message_id, text, {"inline_keyboard": keyboard})

    except District.DoesNotExist:
        _edit_message(chat_id, message_id, "–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def handle_class_selection(chat_id, property_class, message_id):
    """Handle property class selection"""
    profile = _get_profile(chat_id)

    class_display = {
        'economy': '–ö–æ–º—Ñ–æ—Ä—Ç',
        'business': '–ë–∏–∑–Ω–µ—Å',
        'luxury': '–ü—Ä–µ–º–∏—É–º'
    }

    text = f"–ö–ª–∞—Å—Å: *{class_display.get(property_class, property_class)}*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:"
    keyboard = [
        [{"text": "1", "callback_data": "rooms_1"}],
        [{"text": "2", "callback_data": "rooms_2"}],
        [{"text": "3", "callback_data": "rooms_3"}],
        [{"text": "4+", "callback_data": "rooms_4"}],
    ]

    # Update state
    state_data = profile.telegram_state or {}
    state_data['state'] = STATE_SELECT_ROOMS
    state_data['property_class'] = property_class
    profile.telegram_state = state_data
    profile.save()

    _edit_message(chat_id, message_id, text, {"inline_keyboard": keyboard})


def handle_rooms_selection(chat_id, rooms, message_id):
    """Handle rooms selection and start search"""
    profile = _get_profile(chat_id)

    # Convert "4+" to 4
    rooms_int = 4 if rooms == "4" else int(rooms)

    # Update state
    state_data = profile.telegram_state or {}
    state_data['state'] = STATE_SHOWING_RESULTS
    state_data['rooms'] = rooms_int
    profile.telegram_state = state_data
    profile.save()

    _edit_message(chat_id, message_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: *{rooms}*\n\n–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")

    # Show results
    show_search_results(chat_id, profile, offset=0)


def handle_date_selection(chat_id, check_in_date):
    """Handle check-in date selection"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    # Save check-in date
    state_data['check_in_date'] = check_in_date.isoformat()
    state_data['state'] = STATE_AWAITING_CHECK_OUT
    profile.telegram_state = state_data
    profile.save()

    # Ask for checkout date
    tomorrow = check_in_date + timedelta(days=1)
    after_tomorrow = check_in_date + timedelta(days=2)

    text = (
        f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: *{check_in_date.strftime('%d.%m.%Y')}*\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: {tomorrow.strftime('%d.%m.%Y')}"
    )

    keyboard = [
        [{"text": f"{tomorrow.strftime('%d.%m')} (+1 –¥–µ–Ω—å)", "callback_data": f"checkout_1"}],
        [{"text": f"{after_tomorrow.strftime('%d.%m')} (+2 –¥–Ω—è)", "callback_data": f"checkout_2"}],
        [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel_booking"}],
    ]

    send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})


def handle_review_rating(chat_id, booking_id, rating):
    """Handle review rating submission"""
    profile = _get_profile(chat_id)

    try:
        # booking = Booking.objects.get(id=booking_id, user=profile.user)

        # Save rating in state
        state_data = profile.telegram_state or {}
        state_data['state'] = STATE_AWAITING_REVIEW_TEXT
        state_data['review_booking_id'] = booking_id
        state_data['review_rating'] = rating
        profile.telegram_state = state_data
        profile.save()

        text = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {'‚≠ê' * rating}!\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ –≤–∞—à–µ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
        )

        keyboard = [
            [{"text": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "callback_data": "submit_review_no_text"}],
        ]

        send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})

    except Booking.DoesNotExist:
        send_telegram_message(chat_id, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def show_user_bookings(chat_id, booking_type='active'):
    """Show user bookings"""
    profile = _get_profile(chat_id)

    if booking_type == 'active':
        bookings = Booking.objects.filter(
            user=profile.user,
            status='confirmed',
            end_date__gte=date.today()
        ).order_by('start_date')
        title = "üìä *–¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    else:
        bookings = Booking.objects.filter(
            user=profile.user,
            status__in=['completed', 'cancelled']
        ).order_by('-created_at')[:10]
        title = "üìã *–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"

    if not bookings:
        text = title + "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç " + (
            "–∞–∫—Ç–∏–≤–Ω—ã—Ö" if booking_type == 'active' else "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö") + " –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        keyboard = [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_main"}]]
        send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})
        return

    text = title + "\n\n"

    for booking in bookings:
        status_emoji = {
            'confirmed': '‚úÖ',
            'completed': '‚úîÔ∏è',
            'cancelled': '‚ùå',
            'pending': '‚è≥'
        }

        text += (
            f"{status_emoji.get(booking.status, '‚Ä¢')} *{booking.property.name}*\n"
            f"üìÖ {booking.start_date.strftime('%d.%m')} - {booking.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ {booking.total_price} ‚Ç∏\n"
        )

        if booking_type == 'active' and booking.status == 'confirmed':
            text += f"/details_{booking.id} - –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏\n"

        text += "\n"

    keyboard = [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "back_to_main"}]]
    send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})


def show_admin_statistics(chat_id):
    """Show admin statistics"""
    profile = _get_profile(chat_id)

    if profile.role not in ['admin', 'super_admin']:
        send_telegram_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # Get date ranges
    today = date.today()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)

    # Base query
    if profile.role == 'admin':
        properties = Property.objects.filter(owner=profile.user)
    else:
        properties = Property.objects.all()

    if not properties.exists():
        send_telegram_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä.")
        return

    # Calculate statistics
    total_properties = properties.count()

    # Revenue calculations
    bookings_query = Booking.objects.filter(
        property__in=properties,
        status__in=['confirmed', 'completed']
    )

    week_revenue = sum(
        b.total_price for b in bookings_query.filter(created_at__gte=week_ago)
    )
    month_revenue = sum(
        b.total_price for b in bookings_query.filter(created_at__gte=month_ago)
    )

    # Top properties by revenue
    from django.db.models import Sum
    top_properties = properties.annotate(
        revenue=Sum('bookings__total_price',
                    filter=models.Q(bookings__status__in=['confirmed', 'completed']))
    ).order_by('-revenue')[:5]

    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üè† –í—Å–µ–≥–æ –∫–≤–∞—Ä—Ç–∏—Ä: {total_properties}\n"
        f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {week_revenue:,.0f} ‚Ç∏\n"
        f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {month_revenue:,.0f} ‚Ç∏\n\n"
        f"*–¢–û–ü-5 –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –¥–æ—Ö–æ–¥—É:*\n"
    )

    for i, prop in enumerate(top_properties, 1):
        if prop.revenue:
            text += f"{i}. {prop.name} - {prop.revenue:,.0f} ‚Ç∏\n"

    keyboard = [
        [{"text": "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_detailed_stats"}],
        [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "admin_menu"}],
    ]

    send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})


def date_input_handler(chat_id, text):
    """Handle date input from user"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}
    current_state = state_data.get('state')

    if current_state == STATE_AWAITING_CHECK_IN:
        # Parse check-in date
        try:
            check_in = datetime.strptime(text, "%d.%m.%Y").date()
            if check_in < date.today():
                send_telegram_message(chat_id, "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
                return
            handle_date_selection(chat_id, check_in)
        except ValueError:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

    elif current_state == STATE_AWAITING_CHECK_OUT:
        # Parse checkout date
        try:
            check_out = datetime.strptime(text, "%d.%m.%Y").date()
            check_in = date.fromisoformat(state_data.get('check_in_date'))

            if check_out <= check_in:
                send_telegram_message(chat_id, "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.")
                return

            # Calculate price and confirm booking
            property_id = state_data.get('booking_property_id')
            property_obj = Property.objects.get(id=property_id)
            days = (check_out - check_in).days
            total_price = days * property_obj.price_per_day

            # Save booking details
            state_data['check_out_date'] = check_out.isoformat()
            state_data['total_price'] = float(total_price)
            state_data['days'] = days
            state_data['state'] = STATE_CONFIRM_BOOKING
            profile.telegram_state = state_data
            profile.save()

            # Show confirmation
            text = (
                f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
                f"üè† {property_obj.name}\n"
                f"üìÖ –ó–∞–µ–∑–¥: {check_in.strftime('%d.%m.%Y')}\n"
                f"üìÖ –í—ã–µ–∑–¥: {check_out.strftime('%d.%m.%Y')}\n"
                f"üåô –ù–æ—á–µ–π: {days}\n"
                f"üí∞ –ò—Ç–æ–≥–æ: *{total_price:,.0f} ‚Ç∏*"
            )

            keyboard = [
                [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Kaspi", "callback_data": "confirm_payment"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": "cancel_booking"}],
            ]

            send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})

        except ValueError:
            send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        except Property.DoesNotExist:
            send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif current_state == STATE_AWAITING_REVIEW_TEXT:
        # Handle review text
        booking_id = state_data.get('review_booking_id')
        rating = state_data.get('review_rating')

        if booking_id and rating:
            try:
                booking = Booking.objects.get(id=booking_id, user=profile.user)

                # Create review
                Review.objects.create(
                    property=booking.property,
                    user=profile.user,
                    rating=rating,
                    text=text[:1000]  # Limit text length
                )

                send_telegram_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üëç")

                # Clear state
                profile.telegram_state = {}
                profile.save()

            except Exception as e:
                logger.error(f"Error creating review: {e}")
                send_telegram_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")

    else:
        # Default response
        send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start")


def handle_checkout_shortcut(chat_id, days):
    """Handle quick checkout date selection"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    check_in_str = state_data.get('check_in_date')
    if not check_in_str:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    check_in = date.fromisoformat(check_in_str)
    check_out = check_in + timedelta(days=days)

    # Save checkout date and proceed
    state_data['check_out_date'] = check_out.isoformat()
    state_data['state'] = STATE_CONFIRM_BOOKING

    # Calculate price
    property_id = state_data.get('booking_property_id')
    try:
        property_obj = Property.objects.get(id=property_id)
        total_price = days * property_obj.price_per_day

        state_data['total_price'] = float(total_price)
        state_data['days'] = days
        profile.telegram_state = state_data
        profile.save()

        # Show confirmation
        text = (
            f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            f"üè† {property_obj.name}\n"
            f"üìÖ –ó–∞–µ–∑–¥: {check_in.strftime('%d.%m.%Y')}\n"
            f"üìÖ –í—ã–µ–∑–¥: {check_out.strftime('%d.%m.%Y')}\n"
            f"üåô –ù–æ—á–µ–π: {days}\n"
            f"üí∞ –ò—Ç–æ–≥–æ: *{total_price:,.0f} ‚Ç∏*"
        )

        keyboard = [
            [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Kaspi", "callback_data": "confirm_payment"}],
            [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": "cancel_booking"}],
        ]

        send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


def handle_payment_confirmation(chat_id):
    """Handle payment confirmation and initiate Kaspi payment"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    # Get booking details
    property_id = state_data.get('booking_property_id')
    check_in_str = state_data.get('check_in_date')
    check_out_str = state_data.get('check_out_date')
    total_price = state_data.get('total_price')

    if not all([property_id, check_in_str, check_out_str, total_price]):
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    try:
        property_obj = Property.objects.get(id=property_id)
        check_in = date.fromisoformat(check_in_str)
        check_out = date.fromisoformat(check_out_str)

        # Check availability again
        conflicts = Booking.objects.filter(
            property=property_obj,
            status__in=['pending_payment', 'confirmed'],
            start_date__lt=check_out,
            end_date__gt=check_in
        ).exists()

        if conflicts:
            send_telegram_message(
                chat_id,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ –¥–∞—Ç—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã."
            )
            return

        # Create booking
        with transaction.atomic():
            booking = Booking.objects.create(
                user=profile.user,
                property=property_obj,
                start_date=check_in,
                end_date=check_out,
                total_price=total_price,
                status='pending_payment'
            )

            logger.info(f"Created booking {booking.id} for user {profile.user.username}")

            # Initiate Kaspi payment
            try:
                payment_info = kaspi_initiate_payment(
                    booking_id=booking.id,
                    amount=float(total_price),
                    description=f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {property_obj.name}"
                )

                if payment_info and payment_info.get('checkout_url'):
                    # Save Kaspi payment ID
                    kaspi_payment_id = payment_info.get('payment_id')
                    if kaspi_payment_id:
                        booking.kaspi_payment_id = kaspi_payment_id
                        booking.save()

                    # Send payment link
                    text = (
                        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                        f"–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n\n"
                        f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Kaspi:\n"
                        f"{payment_info['checkout_url']}\n\n"
                        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–µ–∑–¥–∞."
                    )

                    send_telegram_message(chat_id, text)

                    # Clear state
                    profile.telegram_state = {}
                    profile.save()

                else:
                    raise KaspiPaymentError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")

            except KaspiPaymentError as e:
                logger.error(f"Kaspi payment error for booking {booking.id}: {e}")
                booking.status = 'payment_failed'
                booking.save()

                send_telegram_message(
                    chat_id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )

    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Error creating booking: {e}", exc_info=True)
        send_telegram_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")


def cancel_booking_process(chat_id):
    """Cancel the booking process"""
    profile = _get_profile(chat_id)

    # Clear state
    profile.telegram_state = {}
    profile.save()

    send_telegram_message(chat_id, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    start_command_handler(chat_id)


def submit_review_no_text(chat_id):
    """Submit review without text"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    booking_id = state_data.get('review_booking_id')
    rating = state_data.get('review_rating')

    if not booking_id or not rating:
        send_telegram_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    try:
        booking = Booking.objects.get(id=booking_id, user=profile.user)

        # Create review
        Review.objects.create(
            property=booking.property,
            user=profile.user,
            rating=rating,
            text=""
        )

        send_telegram_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! ‚≠ê")

        # Clear state
        profile.telegram_state = {}
        profile.save()

    except Exception as e:
        logger.error(f"Error creating review: {e}")
        send_telegram_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")


def skip_review(chat_id):
    """Skip review request"""
    profile = _get_profile(chat_id)
    profile.telegram_state = {}
    profile.save()

    send_telegram_message(chat_id, "–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ–∑–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'.")


# Import admin handlers
from .admin_handlers import (
    show_admin_properties,
    show_detailed_statistics,
    show_super_admin_menu,
    handle_add_property_start,
    export_statistics_csv
)
