import logging

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CallbackContext,
)

from .utils import send_telegram_message
from .. import settings
from .handlers import (
    start_command_handler,
    date_input_handler,
    help_command_handler,
    message_handler,
)

# Enable logging for python-telegram-bot
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
message_logger = logging.getLogger("telegram_messages")


def message_logging_handler(update: Update, context: CallbackContext):
    """–ï–¥–∏–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (group=99)."""
    try:
        if not update.message:
            return
            
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id if update.effective_user else None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if update.message.text:
            message_text = update.message.text
        elif update.message.photo:
            message_text = f"[PHOTO:{len(update.message.photo)} items]"
        else:
            message_text = "[OTHER_CONTENT]"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π state –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = "UNKNOWN"
        try:
            from .constants import _get_profile
            profile = _get_profile(chat_id)
            if profile and profile.telegram_state:
                current_state = profile.telegram_state.get("state", "NO_STATE")
        except Exception:
            current_state = "ERROR_GETTING_STATE"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_logger.info(
            f"INCOMING_MESSAGE | chat_id={chat_id} | user_id={user_id} | "
            f"state={current_state} | text='{message_text[:100]}'"
        )
        
    except Exception as e:
        message_logger.error(f"Error in message logging handler: {e}")


async def set_bot_commands(application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    commands = [
        ("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ("search", "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"),
        ("bookings", "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"),
        ("help", "‚ùì –ü–æ–º–æ—â—å"),
    ]
    await application.bot.set_my_commands(commands)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    await application.bot.set_chat_menu_button(menu_button={"type": "commands"})


# Global application instance
application = None


def telegram_callback_query_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö inline-–∫–Ω–æ–ø–æ–∫.

    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
    callback –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.
    """
    query = update.callback_query
    if not query:
        return

    try:
        query.answer()
    except Exception:  # noqa: BLE001
        logger.warning("Failed to answer callback query")

    chat = query.message.chat if query.message else None
    if chat:
        send_telegram_message(
            chat.id,
            "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.",
        )


def telegram_message_handler(update: Update, context: CallbackContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        chat_id = update.effective_chat.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message and update.message.text:
            text = update.message.text
            message_handler(chat_id, text, update, context)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        elif update.message and update.message.photo:
            # –î–ª—è —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º update –∏ context
            message_handler(chat_id, "", update, context)

        else:
            send_telegram_message(
                chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
            )

    except Exception as e:
        logger.error(f"Error in telegram handler: {e}", exc_info=True)
        send_telegram_message(
            update.effective_chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
        )


def setup_application():
    global application
    if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN.startswith(
        "PLACEHOLDER"
    ):
        logger.warning("TELEGRAM_BOT_TOKEN not configured; bot will not start.")
        return

    builder = Application.builder().token(settings.TELEGRAM_BOT_TOKEN)
    application = builder.build()

    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò: –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï ‚Üí –û–ë–©–ò–ï ‚Üí CATCH-ALL
    
    # 1. –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –•–ï–ù–î–õ–ï–†–´ (group=0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    # –ö–æ–º–∞–Ω–¥—ã (—Å–∞–º—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
    application.add_handler(
        CommandHandler(
            "start",
            lambda update, ctx: start_command_handler(
                update.effective_chat.id,
                update.effective_user.first_name,
                update.effective_user.last_name,
            ),
        )
    )
    application.add_handler(
        CommandHandler(
            "help", lambda update, ctx: help_command_handler(update.effective_chat.id)
        )
    )

    # Callback query handler –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π)
    application.add_handler(CallbackQueryHandler(telegram_callback_query_handler))
    
    # 2. CATCH-ALL –•–ï–ù–î–õ–ï–†–´ (group=90-99, –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (catch-all) - group=90
    application.add_handler(
        MessageHandler(filters.TEXT | filters.PHOTO, telegram_message_handler),
        group=90
    )
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥) - group=99 (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π)
    application.add_handler(
        MessageHandler(filters.TEXT | filters.PHOTO, message_logging_handler),
        group=99
    )

    # Set commands and menu button
    application.job_queue.run_once(lambda ctx: set_bot_commands(application), 0)

    logger.info("Bot initialized")
    return application
