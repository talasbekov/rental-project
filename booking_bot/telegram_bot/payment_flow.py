"""–õ–æ–≥–∏–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã –≤ Telegram-–±–æ—Ç–µ."""

import logging
from datetime import date

from telegram import KeyboardButton, ReplyKeyboardMarkup

from booking_bot import settings
from booking_bot.services.booking_service import (
    BookingError,
    BookingRequest,
    create_booking,
)
from booking_bot.bookings.tasks import cancel_expired_booking
from booking_bot.listings.models import Property
from booking_bot.payments import (
    initiate_payment as kaspi_initiate_payment,
    KaspiPaymentError,
)
from booking_bot.notifications.delivery import (
    build_confirmation_message,
    log_codes_delivery,
)

from .constants import log_handler, _get_profile
from .utils import send_telegram_message

logger = logging.getLogger(__name__)


@log_handler
def handle_payment_confirmation(chat_id: int) -> None:
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    property_id = state_data.get("booking_property_id")
    check_in_str = state_data.get("check_in_date")
    check_out_str = state_data.get("check_out_date")

    if not all([property_id, check_in_str, check_out_str]):
        send_telegram_message(
            chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return

    try:
        property_obj = Property.objects.get(id=property_id)
        check_in = date.fromisoformat(check_in_str)
        check_out = date.fromisoformat(check_out_str)

        request = BookingRequest(
            user=profile.user,
            property=property_obj,
            start_date=check_in,
            end_date=check_out,
            check_in_time=state_data.get("check_in_time", "14:00"),
            check_out_time=state_data.get("check_out_time", "12:00"),
            status="pending_payment",
            hold_calendar=True,
        )

        try:
            booking = create_booking(request)
        except BookingError as exc:
            logger.info("Booking creation failed for chat %s: %s", chat_id, exc)
            send_telegram_message(chat_id, f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {exc}")
            return

        if booking.expires_at:
            cancel_expired_booking.apply_async(args=[booking.id], eta=booking.expires_at)

        logger.info(
            "–°–æ–∑–¥–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (Telegram)",
            booking.id,
            profile.user.username,
        )

        send_telegram_message(
            chat_id, "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        try:
            payment_info = kaspi_initiate_payment(
                booking_id=booking.id,
                amount=float(booking.total_price),
                description=(
                    f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {property_obj.name} —Å "
                    f"{check_in.strftime('%d.%m.%Y')} –ø–æ {check_out.strftime('%d.%m.%Y')}"
                ),
            )

            if not payment_info or not payment_info.get("checkout_url"):
                raise KaspiPaymentError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")

            kaspi_payment_id = payment_info.get("payment_id")
            if kaspi_payment_id:
                booking.kaspi_payment_id = kaspi_payment_id
                booking.save(update_fields=["kaspi_payment_id"])

            checkout_url = payment_info["checkout_url"]

            if settings.DEBUG:
                import time

                time.sleep(2)
                booking.status = "confirmed"
                booking.save(update_fields=["status", "updated_at"])
                send_booking_confirmation(chat_id, booking)
                profile.telegram_state = {}
                profile.save()
                logger.info(
                    "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ %s –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (DEBUG —Ä–µ–∂–∏–º)",
                    booking.id,
                )
            else:
                buttons = [
                    [KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
                    [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
                ]
                send_telegram_message(
                    chat_id,
                    (
                        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                        f"üìã –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n\n"
                        f"üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ:\n{checkout_url}\n\n"
                        f"‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç"
                    ),
                    reply_markup=ReplyKeyboardMarkup(
                        buttons, resize_keyboard=True
                    ).to_dict(),
                )
                profile.telegram_state = {}
                profile.save()
                logger.info(
                    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è %s",
                    booking.id,
                )
        except KaspiPaymentError as exc:
            booking.status = "payment_failed"
            booking.save(update_fields=["status", "updated_at"])
            logger.error("Kaspi payment error for booking %s: %s", booking.id, exc)
            send_telegram_message(
                chat_id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {booking.id}",
            )
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as exc:  # noqa: BLE001 - –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %s", exc, exc_info=True)
        send_telegram_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


def send_booking_confirmation(chat_id: int, booking) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    text = build_confirmation_message(booking)
    codes_block = log_codes_delivery(
        booking, channel="telegram", recipient=str(chat_id)
    )
    if codes_block:
        text += f"\n{codes_block}"

    buttons = [[KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True).to_dict(),
        parse_mode="HTML",
    )

    try:
        from .handlers import prompt_review

        prompt_review(chat_id, booking)
    except Exception:  # noqa: BLE001 - –º—è–≥–∫–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞/–æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
        logger.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è %s", booking.id
        )

    logger.info(
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s",
        booking.id,
        booking.user.username,
    )
