"""State management helpers for the Telegram bot booking flow."""

import logging
import re
from datetime import date, timedelta

from telegram import KeyboardButton, ReplyKeyboardMarkup

from django.conf import settings
from django.db import connection
from django.db.models import Avg, Count

from .constants import (
    STATE_CANCEL_BOOKING,
    STATE_CANCEL_REASON,
    STATE_CANCEL_REASON_TEXT,
    STATE_MAIN_MENU,
    STATE_SEARCH_REFINED,
    STATE_SELECT_CITY,
    STATE_SELECT_CLASS,
    STATE_SELECT_DISTRICT,
    STATE_SELECT_ROOMS,
    STATE_SHOWING_RESULTS,
    log_handler,
    log_state_transition,
    _get_profile,
    start_command_handler,
)
from .utils import send_telegram_message, send_photo_group
from booking_bot.listings.cache import get_cached_property_ids, invalidate_search_cache
from booking_bot.listings.models import (
    City,
    District,
    Favorite,
    Property,
    PropertyPhoto,
    Review,
    ReviewPhoto,
)
from booking_bot.bookings.models import Booking

logger = logging.getLogger(__name__)

CANCEL_REASON_LABELS = dict(Booking.CANCEL_REASON_CHOICES)
REVERSE_CANCEL_REASON = {label: code for code, label in CANCEL_REASON_LABELS.items()}
USER_CANCEL_REASON_CODES = [
    "changed_plans",
    "found_better",
    "too_expensive",
    "payment_issues",
    "wrong_dates",
    "emergency",
    "no_response",
    "other",
]




def _normalize(text: str) -> str:
    return (text or "").strip()


def _reply_keyboard(rows, placeholder: str | None = None):
    return ReplyKeyboardMarkup(
        rows, resize_keyboard=True, input_field_placeholder=placeholder
    ).to_dict()


def _send_with_keyboard(chat_id: int, text: str, rows=None, placeholder: str | None = None):
    reply_markup = _reply_keyboard(rows, placeholder) if rows is not None else None
    send_telegram_message(chat_id, text, reply_markup=reply_markup)


def _get_state(profile):
    return profile.telegram_state or {}


def _save_state(profile, state):
    profile.telegram_state = state
    profile.save()


def _update_state(profile, **changes):
    state = _get_state(profile)
    state.update(changes)
    _save_state(profile, state)
    return state


def _extract_trailing_int(text: str) -> int | None:
    match = re.search(r"(\d+)(?!.*\d)", text or "")
    return int(match.group(1)) if match else None


def _resolve_first(*values):
    for value in values:
        if value is not None:
            return value
    return None


def _has_review_approval_column() -> bool:
    if not hasattr(_has_review_approval_column, "cached"):
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT column_name FROM information_schema.columns "
                "WHERE table_name='listings_review' AND column_name='is_approved'"
            )
            _has_review_approval_column.cached = cursor.fetchone() is not None
    return _has_review_approval_column.cached


def _favorite_exists(user, prop) -> bool:
    return Favorite.objects.filter(user=user, property=prop).exists()


PROPERTY_CLASS_LABELS = {
    "–ö–æ–º—Ñ–æ—Ä—Ç": "comfort",
    "–ë–∏–∑–Ω–µ—Å": "business",
    "–ü—Ä–µ–º–∏—É–º": "premium",
}
ROOM_OPTIONS = ["1", "2", "3", "4+"]


@log_handler
def navigate_results(chat_id, profile, text):
    """Handle navigation commands while showing property search results."""
    state = _get_state(profile)
    offset = state.get("search_offset", 0)
    total = state.get("total_results") or 0
    normalized = _normalize(text)

    if not normalized:
        send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º.")
        return

    max_index = max(total - 1, 0)

    if normalized in {"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", "–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è"}:
        show_search_results(chat_id, profile, min(offset + 1, max_index))
        return
    if normalized in {"‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", "‚óÄÔ∏è –ù–∞–∑–∞–¥"}:
        show_search_results(chat_id, profile, max(offset - 1, 0))
        return

    if normalized.startswith("üìÑ") or normalized.startswith("–°—Ç—Ä–∞–Ω–∏—Ü–∞"):
        match = re.search(r"(\d+)", normalized)
        if match:
            page = int(match.group(1))
            show_search_results(chat_id, profile, max(0, min(page - 1, max_index)))
        else:
            send_telegram_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return

    if normalized.startswith("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"):
        property_id = _extract_trailing_int(normalized)
        if property_id is None:
            send_telegram_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        from .booking_flow import handle_booking_start

        handle_booking_start(chat_id, property_id)
        return

    if normalized.startswith("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ") or normalized.startswith("‚ùå –ò–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"):
        property_id = _extract_trailing_int(normalized)
        if property_id is None:
            send_telegram_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        toggle_favorite(chat_id, property_id)
        show_search_results(chat_id, profile, offset)
        return

    if normalized.startswith("üí¨ –û—Ç–∑—ã–≤—ã"):
        property_id = _extract_trailing_int(normalized)
        if property_id is None:
            send_telegram_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã.")
            return
        from .user_review_handlers import handle_show_property_reviews

        handle_show_property_reviews(chat_id, property_id, page=1)
        return

    if normalized in {"üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä", "üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}:
        navigate_refined_search(chat_id, profile, normalized)
        return

    if normalized in {"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"}:
        show_favorites_list(chat_id)
        return

    if normalized == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    if normalized.startswith("‚≠ê") and "." in normalized:
        match = re.match(r"‚≠ê(\d+)\.\s?", normalized)
        if match:
            index = int(match.group(1)) - 1
            favorites = Favorite.objects.filter(user=profile.user).select_related("property")
            if 0 <= index < favorites.count():
                show_favorite_property_detail(chat_id, favorites[index].property.id)
                return

    send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º.")

@log_handler
def navigate_refined_search(chat_id, profile, text):
    """Handle transitions from results view to refined search or main menu."""
    state = _get_state(profile)
    old_state = state.get("state", STATE_MAIN_MENU)

    if text == "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä":
        base_filters = {
            "city_id": state.get("city_id"),
            "district_id": state.get("district_id"),
            "property_class": state.get("property_class"),
            "rooms": state.get("rooms"),
        }
        _update_state(
            profile,
            state=STATE_SELECT_CITY,
            base_filters=base_filters,
            refined_filters={},
            search_offset=0,
        )
        log_state_transition(chat_id, old_state, STATE_SELECT_CITY, "refined_search_start")
        prompt_city(chat_id, profile)
        return

    if text == "üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        _update_state(
            profile,
            state=STATE_MAIN_MENU,
            base_filters={},
            refined_filters={},
            search_offset=0,
        )
        log_state_transition(chat_id, old_state, STATE_MAIN_MENU, "return_to_main_from_results")
        start_command_handler(chat_id)
        return

    navigate_results(chat_id, profile, text)

@log_handler
def prompt_city(chat_id, profile):
    """Request a city from the user."""
    _update_state(profile, state=STATE_SELECT_CITY)
    rows = [[KeyboardButton(city.name)] for city in City.objects.all().order_by("name")]
    _send_with_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", rows, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥")


@log_handler
def select_city(chat_id, profile, text):
    try:
        city = City.objects.get(name=text)
    except City.DoesNotExist:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    state = _get_state(profile)
    old_state = state.get("state", STATE_MAIN_MENU)

    if state.get("base_filters"):
        refined_filters = state.get("refined_filters", {})
        refined_filters["city_id"] = city.id
        state["refined_filters"] = refined_filters
    else:
        state["city_id"] = city.id

    state["state"] = STATE_SELECT_DISTRICT
    _save_state(profile, state)

    log_state_transition(chat_id, old_state, STATE_SELECT_DISTRICT, f"selected_city_{city.name}")

    districts = list(District.objects.filter(city=city).order_by("name"))
    if not districts:
        _send_with_keyboard(
            chat_id,
            f"–ì–æ—Ä–æ–¥ ¬´{city.name}¬ª –ø–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–π–æ–Ω–æ–≤.",
            [[KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        )
        return

    rows = [[KeyboardButton(district.name)] for district in districts]
    _send_with_keyboard(
        chat_id,
        f"–ì–æ—Ä–æ–¥: {city.name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        rows,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω",
    )


@log_handler
def select_district(chat_id, profile, text):
    try:
        district = District.objects.get(name=text)
    except District.DoesNotExist:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    state = _get_state(profile)
    old_state = state.get("state", STATE_MAIN_MENU)

    if state.get("base_filters"):
        refined_filters = state.get("refined_filters", {})
        refined_filters["district_id"] = district.id
        state["refined_filters"] = refined_filters
    else:
        state["district_id"] = district.id

    state["state"] = STATE_SELECT_CLASS
    _save_state(profile, state)

    log_state_transition(chat_id, old_state, STATE_SELECT_CLASS, f"selected_district_{district.name}")

    rows = [[KeyboardButton(label)] for label in PROPERTY_CLASS_LABELS]
    _send_with_keyboard(
        chat_id,
        f"–†–∞–π–æ–Ω: {district.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∂–∏–ª—å—è:",
        rows,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å",
    )


@log_handler
def select_class(chat_id, profile, text):
    property_class = PROPERTY_CLASS_LABELS.get(text)
    if property_class is None:
        send_telegram_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    _update_state(profile, property_class=property_class, state=STATE_SELECT_ROOMS)
    rows = [[KeyboardButton(option)] for option in ROOM_OPTIONS]
    _send_with_keyboard(
        chat_id,
        f"–ö–ª–∞—Å—Å: {text}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        rows,
        "–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?",
    )


@log_handler
def select_rooms(chat_id, profile, text):
    if text not in ROOM_OPTIONS:
        send_telegram_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.",
        )
        return

    rooms_value = 4 if text == "4+" else int(text)
    _update_state(profile, rooms=rooms_value, state=STATE_SHOWING_RESULTS)

    send_telegram_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {text}\n–ò—â—É –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
    show_search_results(chat_id, profile, offset=0)


@log_handler
def show_search_results(chat_id, profile, offset=0):
    """Display search results and update pagination state."""
    state = _get_state(profile)
    base_filters = state.get("base_filters", {})
    refined_filters = state.get("refined_filters", {})

    city_id = _resolve_first(
        refined_filters.get("city_id"), state.get("city_id"), base_filters.get("city_id")
    )
    district_id = _resolve_first(
        refined_filters.get("district_id"), state.get("district_id"), base_filters.get("district_id")
    )
    property_class = _resolve_first(
        refined_filters.get("property_class"),
        state.get("property_class"),
        base_filters.get("property_class"),
    )
    rooms = _resolve_first(
        refined_filters.get("rooms"), state.get("rooms"), base_filters.get("rooms")
    )

    cached_filters = {
        "district__city_id": city_id,
        "district_id": district_id,
        "property_class": property_class,
        "number_of_rooms": rooms,
        "status": "–°–≤–æ–±–æ–¥–Ω–∞",
    }
    query_filters = {key: value for key, value in cached_filters.items() if value is not None}

    queryset = Property.objects.filter(**query_filters).order_by("price_per_day")

    def _fetch_ids() -> List[int]:
        return list(queryset.values_list("id", flat=True))

    filters_ready = len(query_filters) == len(cached_filters)
    property_ids = (
        get_cached_property_ids(cached_filters, _fetch_ids)
        if filters_ready
        else _fetch_ids()
    )

    total = len(property_ids)
    if total == 0:
        _send_with_keyboard(
            chat_id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–º –∫–≤–∞—Ä—Ç–∏—Ä –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
            [[KeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        )
        return

    offset = max(0, min(offset, total - 1))
    _update_state(profile, search_offset=offset, total_results=total)

    prop_id = property_ids[offset]
    try:
        prop = Property.objects.select_related("district__city").get(id=prop_id)
    except Property.DoesNotExist:
        invalidate_search_cache()
        send_telegram_message(
            chat_id,
            "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∏—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        show_search_results(chat_id, profile, offset=0)
        return

    photo_urls = _collect_photo_urls(prop)
    if photo_urls:
        try:
            send_photo_group(chat_id, photo_urls)
        except Exception as exc:  # noqa: BLE001
            logger.error("Error sending photos: %s", exc)

    if _has_review_approval_column():
        stats = Review.objects.filter(property=prop, is_approved=True).aggregate(
            avg=Avg("rating"), cnt=Count("id")
        )
    else:
        stats = Review.objects.filter(property=prop).aggregate(avg=Avg("rating"), cnt=Count("id"))

    text = (
        f"*{prop.name}*\n"
        f"üìç {prop.district.city.name}, {prop.district.name}\n"
        f"üè† –ö–ª–∞—Å—Å: {prop.get_property_class_display()}\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {prop.number_of_rooms}\n"
        f"üìè –ü–ª–æ—â–∞–¥—å: {prop.area} –º¬≤\n"
        f"üí∞ –¶–µ–Ω–∞: *{prop.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
    )

    if prop.description:
        text += f"\nüìù {prop.description[:150]}...\n"

    if stats.get("avg"):
        text += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg']:.1f}/5 ({stats['cnt']} –æ—Ç–∑—ã–≤–æ–≤)"

    keyboard = []

    if prop.status == "–°–≤–æ–±–æ–¥–Ω–∞":
        keyboard.append([KeyboardButton(f"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {prop.id}")])
    else:
        text += f"\nüö´ –°—Ç–∞—Ç—É—Å: {prop.status}"

    if _favorite_exists(profile.user, prop):
        keyboard.append([KeyboardButton(f"‚ùå –ò–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ {prop.id}")])
    else:
        keyboard.append([KeyboardButton(f"‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ {prop.id}")])

    if stats.get("cnt"):
        keyboard.append([KeyboardButton(f"üí¨ –û—Ç–∑—ã–≤—ã {prop.id}")])

    nav_buttons = []
    if offset > 0:
        nav_buttons.append(KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"))
    nav_buttons.append(KeyboardButton(f"üìÑ {offset + 1}/{total}"))
    if offset < total - 1:
        nav_buttons.append(KeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"), KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    _send_with_keyboard(chat_id, text, keyboard)

@log_handler
def show_property_card(chat_id, property_obj):
    photo_urls = _collect_photo_urls(property_obj)
    if photo_urls:
        send_photo_group(chat_id, photo_urls)

    text = (
        f"*{property_obj.name}*\n"
        f"üìç {property_obj.district.city.name}, {property_obj.district.name}\n"
        f"üè† –ö–ª–∞—Å—Å: {property_obj.get_property_class_display()}\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {property_obj.number_of_rooms}\n"
        f"üìê –ü–ª–æ—â–∞–¥—å: {property_obj.area} –º¬≤\n"
        f"üí∞ –¶–µ–Ω–∞: *{property_obj.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
    )

    if property_obj.reviews_count > 0:
        text += f"‚≠ê {property_obj.rating_stars}\n"
    else:
        text += "‚≠ê –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"

    if property_obj.description:
        text += f"\n{property_obj.description}"

    buttons = []
    if property_obj.status == "–°–≤–æ–±–æ–¥–Ω–∞":
        buttons.append([KeyboardButton(f"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {property_obj.id}")])

    buttons.append([KeyboardButton(f"üí¨ –û—Ç–∑—ã–≤—ã {property_obj.id}")])
    buttons.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    _send_with_keyboard(chat_id, text, buttons, "–î–µ–π—Å—Ç–≤–∏–µ")


@log_handler
def show_user_bookings(chat_id, booking_type="active"):
    profile = _get_profile(chat_id)
    if booking_type == "active":
        bookings = Booking.objects.filter(
            user=profile.user, status="confirmed", end_date__gte=date.today()
        ).order_by("start_date")
        title = "üìä *–¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    else:
        bookings = Booking.objects.filter(
            user=profile.user, status__in=["completed", "cancelled"]
        ).order_by("-created_at")[:10]
        title = "üìã *–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"
    if not bookings:
        text = f"{title}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {'–∞–∫—Ç–∏–≤–Ω—ã—Ö' if booking_type == 'active' else '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö'} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        kb = [[KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
        )
        return
    text = title + "\n\n"
    for booking in bookings:
        emoji = {"confirmed": "‚úÖ", "completed": "‚úîÔ∏è", "cancelled": "‚ùå"}.get(
            booking.status, "‚Ä¢"
        )
        text += (
            f"{emoji} *{booking.property.name}*\n"
            f"üìÖ {booking.start_date.strftime('%d.%m')} - {booking.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ {booking.total_price} ‚Ç∏\n\n"
        )
    kb = [[KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
    )

@log_handler
def show_favorites_list(chat_id):
    """Display user's favorites list."""
    profile = _get_profile(chat_id)

    favorites = Favorite.objects.filter(user=profile.user).select_related(
        "property", "property__district__city"
    )

    if not favorites.exists():
        text = "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ*\n\n–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç."
        kb = [[KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    else:
        text = "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ*\n\n"
        kb = []
        for i, fav in enumerate(favorites[:10], 1):
            prop = fav.property
            text += (
                f"{i}. *{prop.name}*\n"
                f"   üìç {prop.district.city.name}, {prop.district.name}\n"
                f"   üí∞ {prop.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏\n\n"
            )
            kb.append([KeyboardButton(f"‚≠ê{i}. {prop.name[:30]}")])

        kb.append([KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")])
        kb.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
    )


@log_handler
def show_favorite_property_detail(chat_id, property_id):
    """Show detailed info for a favorite property."""
    profile = _get_profile(chat_id)

    try:
        prop = Property.objects.get(id=property_id)
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        show_favorites_list(chat_id)
        return

    if not Favorite.objects.filter(user=profile.user, property=prop).exists():
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        return

    photos = PropertyPhoto.objects.filter(property=prop)[:6]
    photo_urls = []
    for photo in photos:
        url = photo.image_url
        if not url and photo.image:
            try:
                url = photo.image.url
                if url and not url.startswith("http"):
                    base_url = getattr(settings, "SITE_URL", "") or getattr(settings, "DOMAIN", "http://localhost:8000")
                    url = f"{base_url.rstrip('/')}{url}"
            except Exception:  # noqa: BLE001
                url = None
        if url:
            photo_urls.append(url)
    if photo_urls:
        send_photo_group(chat_id, photo_urls)

    with connection.cursor() as cursor:
        cursor.execute(
            "SELECT column_name FROM information_schema.columns WHERE table_name='listings_review' AND column_name='is_approved'"
        )
        has_is_approved = cursor.fetchone() is not None

    if has_is_approved:
        stats = Review.objects.filter(property=prop, is_approved=True).aggregate(avg=Avg("rating"), cnt=Count("id"))
    else:
        stats = Review.objects.filter(property=prop).aggregate(avg=Avg("rating"), cnt=Count("id"))

    text = (
        "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ*\n\n"
        f"*{prop.name}*\n"
        f"üìç {prop.district.city.name}, {prop.district.name}\n"
        f"üè† –ö–ª–∞—Å—Å: {prop.get_property_class_display()}\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {prop.number_of_rooms}\n"
        f"üìè –ü–ª–æ—â–∞–¥—å: {prop.area} –º¬≤\n"
        f"üí∞ –¶–µ–Ω–∞: *{prop.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*\n"
    )

    if prop.description:
        text += f"\nüìù {prop.description}\n"

    if stats.get("avg"):
        text += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg']:.1f}/5 ({stats['cnt']} –æ—Ç–∑—ã–≤–æ–≤)\n"

    keyboard = []
    if prop.status == "–°–≤–æ–±–æ–¥–Ω–∞":
        keyboard.append([KeyboardButton(f"üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {prop.id}")])
    else:
        text += f"\nüö´ –°—Ç–∞—Ç—É—Å: {prop.status}"

    if stats.get("cnt"):
        keyboard.append([KeyboardButton(f"üí¨ –û—Ç–∑—ã–≤—ã {prop.id}")])

    keyboard.append([KeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ {prop.id}")])
    keyboard.append([KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")])
    keyboard.append([KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
    )


@log_handler
def toggle_favorite(chat_id, property_id):
    """Toggle favorite status for a property."""
    profile = _get_profile(chat_id)

    try:
        prop = Property.objects.get(id=property_id)
    except Property.DoesNotExist:
        send_telegram_message(chat_id, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    favorite = Favorite.objects.filter(user=profile.user, property=prop).first()
    if favorite:
        favorite.delete()
        message = f"‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {prop.name}"
    else:
        Favorite.objects.create(user=profile.user, property=prop)
        message = f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {prop.name}"

    send_telegram_message(chat_id, message)

def _prompt_cancel_reason_selection(chat_id):
    keyboard = []
    row = []
    for idx, code in enumerate(USER_CANCEL_REASON_CODES, 1):
        label = CANCEL_REASON_LABELS.get(code)
        if not label:
            continue
        row.append(KeyboardButton(label))
        if idx % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])

    send_telegram_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
    )


@log_handler
def handle_cancel_booking_start(chat_id, booking_id):
    """Initiate cancellation flow for the booking."""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.select_related("property", "property__district__city").get(
            id=booking_id, user=profile.user
        )
    except Booking.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if not booking.is_cancellable():
        send_telegram_message(
            chat_id,
            "‚ùå –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        )
        return

    state_data = profile.telegram_state or {}
    state_data.update({
        "state": STATE_CANCEL_BOOKING,
        "cancelling_booking_id": booking.id,
    })
    profile.telegram_state = state_data
    profile.save()

    days_to_checkin = (booking.start_date - date.today()).days
    text = (
        f"‚ùóÔ∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.id}\n\n"
        f"üè† {booking.property.name}\n"
        f"üìç {booking.property.district.city.name if booking.property.district else ''}\n"
        f"üìÖ {booking.start_date.strftime('%d.%m.%Y')} - {booking.end_date.strftime('%d.%m.%Y')}\n"
        f"üí∞ {booking.total_price:,.0f} ‚Ç∏\n"
    )
    if days_to_checkin > 0:
        text += f"‚è∞ –î–æ –∑–∞–µ–∑–¥–∞: {days_to_checkin} –¥–Ω.\n"
    if booking.kaspi_payment_id:
        text += "\n–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã."

    keyboard = [
        [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")],
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
    )


@log_handler
def handle_cancel_confirmation(chat_id, text):
    """Handle user confirmation before collecting cancellation reason."""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    if sd.get("state") != STATE_CANCEL_BOOKING:
        send_telegram_message(chat_id, "–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel_<id>.")
        return

    normalized = (text or "").strip()

    if normalized == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É":
        sd["state"] = STATE_CANCEL_REASON
        profile.telegram_state = sd
        profile.save()
        _prompt_cancel_reason_selection(chat_id)
        return

    if normalized == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        show_user_bookings_with_cancel(chat_id, "active")
        return

    send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è.")


@log_handler
def handle_cancel_reason(chat_id, text):
    """Store selected cancellation reason or request custom text."""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    booking_id = sd.get("cancelling_booking_id")
    if not booking_id:
        send_telegram_message(chat_id, "–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        profile.telegram_state = {}
        profile.save()
        return

    normalized = (text or "").strip()

    if normalized == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        show_user_bookings_with_cancel(chat_id, "active")
        return

    reason_code = REVERSE_CANCEL_REASON.get(normalized)
    if not reason_code or reason_code not in USER_CANCEL_REASON_CODES:
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        _prompt_cancel_reason_selection(chat_id)
        return

    sd["cancel_reason"] = reason_code

    if reason_code == "other":
        sd["state"] = STATE_CANCEL_REASON_TEXT
        profile.telegram_state = sd
        profile.save()
        send_telegram_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã.")
        return

    profile.telegram_state = sd
    profile.save()
    handle_cancel_reason_text(chat_id, "")


@log_handler
def handle_cancel_reason_text(chat_id, text):
    """Finalize cancellation after receiving optional custom reason text."""
    profile = _get_profile(chat_id)
    sd = profile.telegram_state or {}

    booking_id = sd.get("cancelling_booking_id")
    if not booking_id:
        send_telegram_message(chat_id, "–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        profile.telegram_state = {}
        profile.save()
        return

    if (text or "").strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        show_user_bookings_with_cancel(chat_id, "active")
        return

    reason_code = sd.get("cancel_reason", "other")
    reason_text = text.strip() if text else ""
    perform_booking_cancellation(chat_id, booking_id, reason_code, reason_text)


@log_handler
def perform_booking_cancellation(chat_id, booking_id, reason_code, reason_text):
    """Cancel booking and notify user and owner."""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.get(id=booking_id, user=profile.user)
    except Booking.DoesNotExist:
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        profile.telegram_state = {}
        profile.save()
        return

    booking.cancel(user=profile.user, reason=reason_code, reason_text=reason_text)

    text = (
        f"‚úÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–æ*\n\n"
        f"üè† {booking.property.name}\n"
        f"üìÖ {booking.start_date.strftime('%d.%m.%Y')} - {booking.end_date.strftime('%d.%m.%Y')}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason_text or CANCEL_REASON_LABELS.get(reason_code, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
    )

    if booking.kaspi_payment_id:
        text += "\nüí≥ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."

    profile.telegram_state = {}
    profile.save()

    keyboard = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")],
        [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict(),
    )

    notify_owner_about_cancellation(booking, reason_text or CANCEL_REASON_LABELS.get(reason_code, ""))
    show_user_bookings_with_cancel(chat_id, "active")


def notify_owner_about_cancellation(booking, reason_text):
    """Notify property owner about cancellation."""
    owner = booking.property.owner
    if hasattr(owner, "profile") and owner.profile.telegram_chat_id:
        text = (
            f"‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ*\n\n"
            f"üè† {booking.property.name}\n"
            f"üìÖ {booking.start_date.strftime('%d.%m.%Y')} - {booking.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ {booking.total_price:,.0f} ‚Ç∏\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason_text}\n\n"
            "–î–∞—Ç—ã —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        send_telegram_message(owner.profile.telegram_chat_id, text)

@log_handler
def show_user_bookings_with_cancel(chat_id, booking_type="active"):
    """Show bookings with abilities to cancel, extend or review."""
    profile = _get_profile(chat_id)

    if booking_type == "active":
        bookings = Booking.objects.filter(
            user=profile.user,
            status="confirmed",
            end_date__gte=date.today(),
        ).select_related("property", "property__district__city").order_by("start_date")
        title = "üìä *–¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    elif booking_type == "completed":
        bookings = Booking.objects.filter(
            user=profile.user,
            status="completed",
        ).select_related("property", "property__district__city").order_by("-end_date")[:20]
        title = "üìã *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    else:
        bookings = Booking.objects.filter(
            user=profile.user,
            status__in=["completed", "cancelled"],
        ).select_related("property", "property__district__city").order_by("-created_at")[:20]
        title = "üìã *–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"

    if not bookings:
        status_text = {
            "active": "–∞–∫—Ç–∏–≤–Ω—ã—Ö",
            "completed": "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö",
            "all": "",
        }.get(booking_type, "")
        text = f"{title}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {status_text} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        kb = [[KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        send_telegram_message(
            chat_id,
            text,
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
        )
        return

    text = title + "\n\n"

    for i, booking in enumerate(bookings, 1):
        emoji = {"confirmed": "‚úÖ", "completed": "‚úîÔ∏è", "cancelled": "‚ùå"}.get(
            booking.status, "‚Ä¢"
        )

        text += (
            f"{emoji} *{i}. {booking.property.name}*\n"
            f"   üìç {booking.property.district.city.name if booking.property.district else '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üìÖ {booking.start_date.strftime('%d.%m.%Y')} - {booking.end_date.strftime('%d.%m.%Y')}\n"
            f"   üí∞ {booking.total_price:,.0f} ‚Ç∏\n"
            f"   üè† –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n"
        )

        if booking.status in {"confirmed", "completed"}:
            instructions = booking.property.entry_instructions
            if instructions:
                formatted_instructions = "\n".join(
                    f"      {line.strip()}" for line in instructions.splitlines() if line.strip()
                ) or f"      {instructions.strip()}"
                text += "   üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n" + formatted_instructions + "\n"

            try:
                codes = booking.property.get_access_codes(profile.user)
            except Exception as exc:  # noqa: BLE001 - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É
                logger.error(
                    "Failed to fetch access codes for booking %s: %s",
                    booking.id,
                    exc,
                )
                codes = {}

            access_lines = []
            if codes.get("entry_floor"):
                access_lines.append(f"      üè¢ –≠—Ç–∞–∂: {codes['entry_floor']}")
            if codes.get("entry_code"):
                access_lines.append(f"      üö™ –ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞: {codes['entry_code']}")
            if codes.get("digital_lock_code"):
                access_lines.append(f"      üîê –ö–æ–¥ –∑–∞–º–∫–∞: {codes['digital_lock_code']}")
            if codes.get("key_safe_code"):
                access_lines.append(f"      üîë –ö–æ–¥ —Å–µ–π—Ñ–∞: {codes['key_safe_code']}")
            if codes.get("owner_phone"):
                access_lines.append(f"      üìû –ö–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: {codes['owner_phone']}")

            if access_lines:
                text += "   üîê –î–æ—Å—Ç—É–ø:\n" + "\n".join(access_lines) + "\n"

        if booking.status == "confirmed" and booking.is_cancellable():
            days_to_checkin = (booking.start_date - date.today()).days
            if days_to_checkin > 0:
                text += f"   ‚è∞ –î–æ –∑–∞–µ–∑–¥–∞: {days_to_checkin} –¥–Ω.\n"
            text += f"   üö´ –û—Ç–º–µ–Ω–∏—Ç—å: /cancel_{booking.id}\n"

            days_to_checkout = (booking.end_date - date.today()).days
            if 0 <= days_to_checkout <= 3:
                text += f"   ‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å: /extend_{booking.id}\n"

        elif booking.status == "completed":
            existing_review = Review.objects.filter(
                property=booking.property,
                user=profile.user,
                booking_id=booking.id,
            ).first()

            if existing_review:
                stars = "‚≠ê" * existing_review.rating
                text += f"   üìù *–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars}*\n"
                if existing_review.text:
                    preview_text = existing_review.text[:50]
                    if len(existing_review.text) > 50:
                        preview_text += "..."
                    text += f"   üí¨ ¬´{preview_text}¬ª\n"

                photo_count = ReviewPhoto.objects.filter(review=existing_review).count()
                if photo_count > 0:
                    text += f"   üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\n"

                text += f"   ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤: /edit_review_{booking.id}\n"
            else:
                days_since_checkout = (date.today() - booking.end_date).days
                if days_since_checkout <= 7:
                    text += f"   ‚≠ê *–û—Ü–µ–Ω–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É!* /review_{booking.id}\n"
                    text += "   üí° _–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏_\n"
                elif days_since_checkout <= 30:
                    text += f"   ‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤: /review_{booking.id}\n"
                else:
                    text += f"   ‚≠ê –ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å: /review_{booking.id}\n"

        elif booking.status == "cancelled" and booking.cancel_reason:
            reason_display = {
                "changed_plans": "–ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã",
                "found_better": "–ù–∞—à–µ–ª –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç",
                "too_expensive": "–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ",
                "payment_issues": "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π",
                "wrong_dates": "–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö",
                "emergency": "–§–æ—Ä—Å-–º–∞–∂–æ—Ä",
                "owner_cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º",
                "no_response": "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                "other": "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞",
            }.get(booking.cancel_reason, booking.cancel_reason)
            text += f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {reason_display}\n"

        text += "\n"

    if booking_type == "completed":
        user_reviews_count = Review.objects.filter(user=profile.user).count()
        completed_count = Booking.objects.filter(
            user=profile.user,
            status="completed",
        ).count()

        if completed_count > 0:
            review_percentage = (user_reviews_count / completed_count) * 100 if completed_count else 0
            text += "\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:*\n"
            text += (
                f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ {user_reviews_count} –∏–∑ {completed_count} –∫–≤–∞—Ä—Ç–∏—Ä "
                f"({review_percentage:.0f}%)\n"
            )

            user_reviews = Review.objects.filter(user=profile.user)
            if user_reviews.exists():
                avg_rating = user_reviews.aggregate(avg_rating=Avg("rating"))["avg_rating"]
                text += f"–í–∞—à —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * int(avg_rating)} ({avg_rating:.1f})\n"

    kb = []

    if booking_type == "active":
        kb.append([KeyboardButton("üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")])
    elif booking_type == "completed":
        kb.append([KeyboardButton("üìä –¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")])

    kb.extend([[KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä")], [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]])

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True).to_dict(),
    )


__all__ = [
    "navigate_results",
    "navigate_refined_search",
    "prompt_city",
    "select_city",
    "select_district",
    "select_class",
    "select_rooms",
    "show_search_results",
    "show_property_card",
    "show_user_bookings",
    "show_favorites_list",
    "show_favorite_property_detail",
    "toggle_favorite",
    "handle_cancel_booking_start",
    "handle_cancel_confirmation",
    "handle_cancel_reason",
    "handle_cancel_reason_text",
    "perform_booking_cancellation",
    "show_user_bookings_with_cancel",
]
