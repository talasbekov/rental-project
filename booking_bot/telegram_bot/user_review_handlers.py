# booking_bot/telegram_bot/user_review_handlers.py

import logging
import html
from datetime import date, datetime
from django.utils import timezone
from telegram import ReplyKeyboardMarkup, KeyboardButton

from .constants import _get_profile, log_handler
from .utils import send_telegram_message
from .. import settings
from booking_bot.listings.models import Property, Review, ReviewPhoto
from booking_bot.bookings.models import Booking

logger = logging.getLogger(__name__)


@log_handler
def handle_review_booking_command(chat_id, booking_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /review_<booking_id> - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.get(
            id=booking_id,
            user=profile.user,
            status="completed"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        existing_review = Review.objects.filter(
            property=booking.property,
            user=profile.user,
            booking_id=booking.id
        ).first()

        if existing_review:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
            text = (
                f"üìù –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—É.\n\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * existing_review.rating}\n"
                f"üí¨ –¢–µ–∫—Å—Ç: {existing_review.text[:100] if existing_review.text else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}...\n\n"
                f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤?"
            )

            keyboard = [
                [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
                [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
            ]

            profile.telegram_state = {
                "state": "confirm_edit_review",
                "review_booking_id": booking_id,
                "existing_review_id": existing_review.id
            }
            profile.save()

            send_telegram_message(
                chat_id,
                text,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
        start_review_creation(chat_id, booking)

    except Booking.DoesNotExist:
        send_telegram_message(
            chat_id,
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
            "–û—Ü–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )


@log_handler
def handle_edit_review_command(chat_id, booking_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_review_<booking_id> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)

    try:
        booking = Booking.objects.get(
            id=booking_id,
            user=profile.user,
            status="completed"
        )

        existing_review = Review.objects.filter(
            property=booking.property,
            user=profile.user,
            booking_id=booking.id
        ).first()

        if not existing_review:
            send_telegram_message(
                chat_id,
                f"‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /review_{booking_id}"
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        start_review_editing(chat_id, booking, existing_review)

    except Booking.DoesNotExist:
        send_telegram_message(
            chat_id,
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )


@log_handler
def start_review_creation(chat_id, booking):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    profile.telegram_state = {
        "state": "user_review_rating",
        "review_booking_id": booking.id,
        "review_property_id": booking.property.id,
        "review_mode": "create"
    }
    profile.save()

    text = (
        f"‚≠ê *–û—Ü–µ–Ω–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É*\n\n"
        f"üè† {booking.property.name}\n"
        f"üìÖ –í–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ: {booking.start_date.strftime('%d.%m.%Y')} - "
        f"{booking.end_date.strftime('%d.%m.%Y')}\n\n"
        "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:"
    )

    keyboard = [
        [KeyboardButton("‚≠ê"), KeyboardButton("‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
    )


@log_handler
def start_review_editing(chat_id, booking, existing_review):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    profile = _get_profile(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞
    profile.telegram_state = {
        "state": "user_review_rating",
        "review_booking_id": booking.id,
        "review_property_id": booking.property.id,
        "review_mode": "edit",
        "existing_review_id": existing_review.id
    }
    profile.save()

    current_stars = "‚≠ê" * existing_review.rating

    text = (
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞*\n\n"
        f"üè† {booking.property.name}\n"
        f"üìÖ –í–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ: {booking.start_date.strftime('%d.%m.%Y')} - "
        f"{booking.end_date.strftime('%d.%m.%Y')}\n\n"
        f"–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: {current_stars} ({existing_review.rating}/5)\n"
        f"–¢–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤: {existing_review.text[:100] if existing_review.text else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}...\n\n"
        "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É:"
    )

    keyboard = [
        [KeyboardButton("‚≠ê"), KeyboardButton("‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê"), KeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")],
        [KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]

    send_telegram_message(
        chat_id,
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
    )


@log_handler
def handle_user_review_rating(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        from .handlers import show_user_bookings_with_cancel
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    if text == "üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤":
        existing_review_id = state_data.get('existing_review_id')
        if existing_review_id:
            try:
                review = Review.objects.get(id=existing_review_id)
                property_name = review.property.name
                review.delete()

                send_telegram_message(
                    chat_id,
                    f"‚úÖ –û—Ç–∑—ã–≤ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ¬´{property_name}¬ª —É–¥–∞–ª–µ–Ω"
                )
            except Review.DoesNotExist:
                send_telegram_message(chat_id, "‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        profile.telegram_state = {}
        profile.save()
        from .handlers import show_user_bookings_with_cancel
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating = text.count("‚≠ê")
    if rating < 1 or rating > 5:
        send_telegram_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–∫—Å—Ç—É
    state_data["review_rating"] = rating
    state_data["state"] = "user_review_text"
    profile.telegram_state = state_data
    profile.save()

    booking_id = state_data.get("review_booking_id")
    booking = Booking.objects.get(id=booking_id)

    text_msg = (
        f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ¬´{booking.property.name}¬ª\n"
        f"–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç':"
    )

    keyboard = [
        [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]

    send_telegram_message(
        chat_id,
        text_msg,
        reply_markup=ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            input_field_placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤..."
        ).to_dict()
    )


@log_handler
def handle_user_review_text(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        from .handlers import show_user_bookings_with_cancel
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç":
        text = ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
    state_data["review_text"] = text
    state_data["state"] = "user_review_photos"
    profile.telegram_state = state_data
    profile.save()

    text_msg = (
        "üì∑ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –æ—Ç–∑—ã–≤—É?\n"
        "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
    )

    keyboard = [
        [KeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]

    send_telegram_message(
        chat_id,
        text_msg,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
    )


@log_handler
def handle_user_review_photos(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫ –æ—Ç–∑—ã–≤—É"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        from .handlers import show_user_bookings_with_cancel
        show_user_bookings_with_cancel(chat_id, "completed")
        return

    if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ":
        save_user_review(chat_id)
        return

    if text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        state_data["state"] = "user_review_uploading"
        state_data["review_photos"] = []
        profile.telegram_state = state_data
        profile.save()

        keyboard = [
            [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
        ]

        send_telegram_message(
            chat_id,
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 3 —à—Ç—É–∫).\n"
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
        )


@log_handler
def handle_user_review_photo_upload(chat_id, update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫ –æ—Ç–∑—ã–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    if state_data.get("state") != "user_review_uploading":
        return False

    photos = state_data.get("review_photos", [])
    if len(photos) >= 3:
        send_telegram_message(
            chat_id,
            "–ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'"
        )
        return True

    if update.message and update.message.photo:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo = max(update.message.photo, key=lambda p: getattr(p, 'file_size', 0) or 0)
        photos.append(photo.file_id)
        state_data["review_photos"] = photos
        profile.telegram_state = state_data
        profile.save()

        send_telegram_message(
            chat_id,
            f"üì∑ –§–æ—Ç–æ {len(photos)}/3 –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n"
            f"{'–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ ' if len(photos) < 3 else ''}"
            f"–Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'"
        )
        return True

    return False


@log_handler
def handle_user_review_uploading(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    profile = _get_profile(chat_id)

    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É":
        save_user_review(chat_id)
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        profile.telegram_state = {}
        profile.save()
        from .handlers import show_user_bookings_with_cancel
        show_user_bookings_with_cancel(chat_id, "completed")


@log_handler
def save_user_review(chat_id):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = _get_profile(chat_id)
    state_data = profile.telegram_state or {}

    booking_id = state_data.get("review_booking_id")
    property_id = state_data.get("review_property_id")
    rating = state_data.get("review_rating", 5)
    text = state_data.get("review_text", "")
    photo_ids = state_data.get("review_photos", [])
    review_mode = state_data.get("review_mode", "create")
    existing_review_id = state_data.get("existing_review_id")

    try:
        booking = Booking.objects.get(id=booking_id)
        property_obj = Property.objects.get(id=property_id)

        if review_mode == "edit" and existing_review_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
            review = Review.objects.get(id=existing_review_id)
            review.rating = rating
            review.text = text
            review.updated_at = timezone.now()
            review.save()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞
            ReviewPhoto.objects.filter(review=review).delete()

            action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
            review = Review.objects.create(
                property=property_obj,
                user=profile.user,
                rating=rating,
                text=text,
                booking_id=booking_id  # –°–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            )
            action_text = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        for file_id in photo_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ –∏–∑ Telegram
                bot_token = settings.TELEGRAM_BOT_TOKEN
                import requests

                file_response = requests.get(
                    f"https://api.telegram.org/bot{bot_token}/getFile",
                    params={"file_id": file_id},
                    timeout=10
                )

                if file_response.status_code == 200:
                    file_path = file_response.json()["result"]["file_path"]
                    file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"

                    ReviewPhoto.objects.create(
                        review=review,
                        image_url=file_url
                    )
            except Exception as e:
                logger.error(f"Error saving review photo: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text_msg = (
            f"‚úÖ –û—Ç–∑—ã–≤ {action_text}!\n\n"
            f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {property_obj.name}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating} ({rating}/5)\n"
        )

        if text:
            text_msg += f"üí¨ –¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}\n"

        if photo_ids:
            text_msg += f"üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photo_ids)}\n"

        text_msg += "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"

        keyboard = [
            [KeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
            [KeyboardButton("üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]

        send_telegram_message(
            chat_id,
            text_msg,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True).to_dict()
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
        try:
            owner = property_obj.owner
            if hasattr(owner, 'profile') and owner.profile.telegram_chat_id:
                owner_text = (
                    f"‚≠ê {'–û–±–Ω–æ–≤–ª–µ–Ω –æ—Ç–∑—ã–≤' if review_mode == 'edit' else '–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤'} –æ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ!\n\n"
                    f"üè† {property_obj.name}\n"
                    f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating} ({rating}/5)\n"
                    f"üë§ –û—Ç: {profile.user.first_name or '–ì–æ—Å—Ç—å'}\n"
                )

                if text:
                    owner_text += f"üí¨ {text[:200]}{'...' if len(text) > 200 else ''}\n"

                send_telegram_message(owner.profile.telegram_chat_id, owner_text)
        except Exception as e:
            logger.error(f"Error notifying owner about review: {e}")

    except Exception as e:
        logger.error(f"Error saving user review: {e}", exc_info=True)
        send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    profile.telegram_state = {}
    profile.save()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    from .handlers import show_user_bookings_with_cancel
    show_user_bookings_with_cancel(chat_id, "completed")
