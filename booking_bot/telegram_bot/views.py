import json
import logging
import re

from django.http import JsonResponse, HttpResponseBadRequest, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings

from booking_bot.telegram_bot.handlers import (
    start_command_handler, help_command_handler,
    show_user_bookings, message_handler, date_input_handler,
)


logger = logging.getLogger(__name__)


@csrf_exempt
def telegram_webhook(request):
    """Handle incoming updates from Telegram (ReplyKeyboardMarkup only)."""
    if request.method == 'GET':
        return HttpResponse("Telegram webhook is running")
    if request.method != 'POST':
        return HttpResponseBadRequest("Method not allowed")

    try:
        data = json.loads(request.body)
        logger.debug(f"Received update: {data}")
    except json.JSONDecodeError:
        logger.error("Invalid JSON in webhook request")
        return HttpResponseBadRequest("Invalid JSON")

    # –ú—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Inline-–∫–Ω–æ–ø–∫–∏, —Ç–∞–∫ —á—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback_query
    # –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "message"
    if "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]
        from_user = message.get("from", {})
        first_name = from_user.get("first_name")
        last_name = from_user.get("last_name")

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏—à—ë–ª
        if "text" in message:
            text = message["text"].strip()

            # –°–Ω–∞—á–∞–ª–∞ ‚Äî —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if text.startswith("/start"):
                start_command_handler(chat_id, first_name, last_name)
            elif text.startswith("/help"):
                help_command_handler(chat_id)
            elif text.startswith("/menu"):
                start_command_handler(chat_id, first_name, last_name)
            elif text.startswith("/bookings"):
                show_user_bookings(chat_id, 'active')
            elif text.startswith("/history"):
                show_user_bookings(chat_id, 'completed')

            # –ó–∞—Ç–µ–º ‚Äî –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ –¥–∞—Ç: —Ñ–æ—Ä–º–∞—Ç "DD.MM.YYYY" –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"
            elif re.match(r'^\d{2}\.\d{2}\.\d{4}$', text) \
                 or text.startswith("–°–µ–≥–æ–¥–Ω—è") \
                 or text.startswith("–ó–∞–≤—Ç—Ä–∞"):
                date_input_handler(chat_id, text)

            # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –≤ message_handler (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Reply-–∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä.)
            else:
                message_handler(chat_id, text)

        # –ï—Å–ª–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤) ‚Äî
        # –º–æ–∂–Ω–æ –∑–¥–µ—Å—å –∂–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Ç–∫—É —Å –≤—ã–∑–æ–≤–æ–º –Ω—É–∂–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞.
        return JsonResponse({"ok": True})

    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ (—Å—Ç–∏–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–ø.) ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º OK
    return JsonResponse({"ok": True})


def show_booking_details(chat_id, booking_id):
    """Show detailed booking information"""
    from booking_bot.bookings.models import Booking
    from booking_bot.users.models import UserProfile
    from booking_bot.telegram_bot.utils import send_telegram_message

    try:
        profile = UserProfile.objects.get(telegram_chat_id=str(chat_id))
        booking = Booking.objects.get(id=booking_id, user=profile.user)

        if booking.status != 'confirmed':
            send_telegram_message(chat_id, "–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return

        property_obj = booking.property

        text = (
            f"*–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking.id}*\n\n"
            f"üè† *{property_obj.name}*\n"
            f"üìç –ê–¥—Ä–µ—Å: {property_obj.address}\n"
        )

        # Add access information if available
        if property_obj.entry_instructions:
            text += f"\nüìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*\n{property_obj.entry_instructions}\n"

        if property_obj.digital_lock_code:
            text += f"\nüîê –ö–æ–¥ –∑–∞–º–∫–∞: `{property_obj.digital_lock_code}`\n"
        elif property_obj.key_safe_code:
            text += f"\nüîë –ö–æ–¥ —Å–µ–π—Ñ–∞: `{property_obj.key_safe_code}`\n"

        text += (
            f"\nüìÖ –ó–∞–µ–∑–¥: {booking.start_date.strftime('%d.%m.%Y')}\n"
            f"üìÖ –í—ã–µ–∑–¥: {booking.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {booking.total_price} ‚Ç∏"
        )

        # Add owner contact if available
        if property_obj.owner.profile.phone_number:
            text += f"\n\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {property_obj.owner.profile.phone_number}"

        keyboard = [[{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "main_current"}]]

        send_telegram_message(chat_id, text, {"inline_keyboard": keyboard})

    except (UserProfile.DoesNotExist, Booking.DoesNotExist):
        send_telegram_message(chat_id, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"Error showing booking details: {e}")
        send_telegram_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π.")


def handle_photo_message(chat_id, message):
    """Handle photo uploads (for reviews)"""
    from booking_bot.users.models import UserProfile
    from booking_bot.telegram_bot.utils import send_telegram_message

    try:
        profile = UserProfile.objects.get(telegram_chat_id=str(chat_id))
        state_data = profile.telegram_state or {}

        if state_data.get('state') == 'awaiting_review_photos':
            # Handle review photo upload
            photos = message.get("photo", [])
            if photos:
                # Get the largest photo
                photo = max(photos, key=lambda p: p.get("file_size", 0))
                file_id = photo.get("file_id")

                # Store file_id in state
                review_photos = state_data.get('review_photos', [])
                review_photos.append(file_id)
                state_data['review_photos'] = review_photos

                if len(review_photos) < 3:
                    send_telegram_message(
                        chat_id,
                        f"–§–æ—Ç–æ {len(review_photos)}/3 –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.",
                        {"inline_keyboard": [[{"text": "‚úÖ –ì–æ—Ç–æ–≤–æ", "callback_data": "submit_review_with_photos"}]]}
                    )
                else:
                    # Auto-submit after 3 photos
                    submit_review_with_photos(chat_id, profile)

                profile.telegram_state = state_data
                profile.save()
        else:
            send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

    except UserProfile.DoesNotExist:
        send_telegram_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    except Exception as e:
        logger.error(f"Error handling photo message: {e}")


def submit_review_with_photos(chat_id, profile):
    """Submit review with uploaded photos"""
    from booking_bot.listings.models import Review, ReviewPhoto
    from booking_bot.bookings.models import Booking
    from booking_bot.telegram_bot.utils import send_telegram_message, get_file_url

    state_data = profile.telegram_state or {}
    booking_id = state_data.get('review_booking_id')
    rating = state_data.get('review_rating')
    text = state_data.get('review_text', '')
    photo_file_ids = state_data.get('review_photos', [])

    try:
        booking = Booking.objects.get(id=booking_id, user=profile.user)

        # Create review
        review = Review.objects.create(
            property=booking.property,
            user=profile.user,
            rating=rating,
            text=text
        )

        # Add photos
        for file_id in photo_file_ids:
            file_url = get_file_url(file_id)
            if file_url:
                ReviewPhoto.objects.create(
                    review=review,
                    image_url=file_url
                )

        send_telegram_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏! üì∏üëç")

        # Clear state
        profile.telegram_state = {}
        profile.save()

    except Exception as e:
        logger.error(f"Error submitting review with photos: {e}")
        send_telegram_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")