import logging
import requests
from django.contrib.auth import get_user_model
from .utils import send_whatsapp_message, send_whatsapp_button_message
from .. import settings
from booking_bot.users.models import UserProfile

logger = logging.getLogger(__name__)

# States - —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –≤ Telegram
STATE_MAIN_MENU = "main_menu"
STATE_SELECT_CITY = "select_city"
STATE_SELECT_DISTRICT = "select_district"
STATE_SELECT_CLASS = "select_class"
STATE_SELECT_ROOMS = "select_rooms"
STATE_SHOWING_RESULTS = "showing_results"
STATE_AWAITING_CHECK_IN = "awaiting_check_in"
STATE_AWAITING_CHECK_OUT = "awaiting_check_out"
STATE_CONFIRM_BOOKING = "confirm_booking"
STATE_AWAITING_REVIEW_TEXT = "awaiting_review_text"

# Admin states
STATE_ADMIN_MENU = "admin_menu"
STATE_ADMIN_VIEW_STATS = "admin_view_stats"
STATE_ADMIN_ADD_PROPERTY = "admin_add_property"
STATE_ADMIN_ADD_DESC = "admin_add_desc"
STATE_ADMIN_ADD_ADDRESS = "admin_add_address"
STATE_ADMIN_ADD_CITY = "admin_add_city"
STATE_ADMIN_ADD_DISTRICT = "admin_add_district"
STATE_ADMIN_ADD_CLASS = "admin_add_class"
STATE_ADMIN_ADD_ROOMS = "admin_add_rooms"
STATE_ADMIN_ADD_AREA = "admin_add_area"
STATE_ADMIN_ADD_PRICE = "admin_add_price"
STATE_ADMIN_ADD_PHOTOS = "admin_add_photos"


def log_handler(func):
    def wrapper(*args, **kwargs):
        func_name = func.__name__
        logger.info(f"CALL  {func_name} args={args} kwargs={kwargs}")
        return func(*args, **kwargs)

    return wrapper


User = get_user_model()


@log_handler
def _get_or_create_local_profile(phone_number: str):
    """–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ WhatsApp"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_number = phone_number.replace("+", "").replace(" ", "").replace("-", "")

    # 1) –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å User
    username = f"whatsapp_{phone_number}"
    user, user_created = User.objects.get_or_create(
        username=username,
        defaults={
            "first_name": "",
            "last_name": "",
        },
    )
    if user_created:
        user.set_unusable_password()
        user.save()

    # 2) –ü–æ—Ç–æ–º —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É user
    profile, profile_created = UserProfile.objects.get_or_create(
        user=user,
        defaults={
            "phone_number": phone_number,
            "whatsapp_phone": phone_number,
            "role": "user",
        },
    )
    return profile


@log_handler
def _get_profile(phone_number, name=None, force_remote=False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –Ω–æ–º–µ—Ä—É WhatsApp"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    phone_number = phone_number.replace("+", "").replace(" ", "").replace("-", "")

    if not force_remote:
        profile, _ = UserProfile.objects.get_or_create(
            whatsapp_phone=phone_number, defaults={"phone_number": phone_number}
        )
        return profile

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API
    payload = {"whatsapp_phone": phone_number}
    if name:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è –Ω–∞ first_name –∏ last_name
        name_parts = name.split(" ", 1)
        payload["first_name"] = name_parts[0]
        if len(name_parts) > 1:
            payload["last_name"] = name_parts[1]

    try:
        api_url = f"{settings.API_BASE}/whatsapp_auth/register_or_login/"
        logger.info(f"Attempting to register/login user via API: {api_url}")
        response = requests.post(api_url, json=payload, timeout=10)
        if response.status_code in (200, 201):
            data = response.json()
            access_token = data.get("access")
            profile = UserProfile.objects.get(whatsapp_phone=phone_number)
            if profile.whatsapp_state is None:
                profile.whatsapp_state = {}
            if access_token:
                profile.whatsapp_state["jwt_access_token"] = access_token
                profile.save()
                logger.info(f"Stored JWT token for WhatsApp {phone_number}")
        else:
            profile, _ = UserProfile.objects.get_or_create(
                whatsapp_phone=phone_number, defaults={"phone_number": phone_number}
            )
    except Exception as e:
        logger.error(f"Error with API: {e}")
        profile, _ = UserProfile.objects.get_or_create(
            whatsapp_phone=phone_number, defaults={"phone_number": phone_number}
        )
    return profile


@log_handler
def start_command_handler(phone_number, name=None):
    """Handle start command for WhatsApp"""
    # 1) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    try:
        profile = UserProfile.objects.get(whatsapp_phone=phone_number)
        created = False
    except UserProfile.DoesNotExist:
        profile = UserProfile(whatsapp_phone=phone_number, phone_number=phone_number)
        created = True

    # 2) –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã–π, –¥–µ—Ä–≥–∞–µ–º API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    if created:
        payload = {"whatsapp_phone": phone_number}
        if name:
            name_parts = name.split(" ", 1)
            payload["first_name"] = name_parts[0]
            if len(name_parts) > 1:
                payload["last_name"] = name_parts[1]
        try:
            api_url = f"{settings.API_BASE}/whatsapp_auth/register_or_login/"
            response = requests.post(api_url, json=payload, timeout=10)
            response.raise_for_status()
            data = response.json()
            access_token = data.get("access")
            profile.whatsapp_state = {}
            if access_token:
                profile.whatsapp_state["jwt_access_token"] = access_token
        except Exception as e:
            logger.error(f"Error registering user via API: {e}")
        finally:
            profile.save()

    # 3) –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–∫—Ä–æ–º–µ —Ç–æ–∫–µ–Ω–∞) –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    jwt_token = (profile.whatsapp_state or {}).get("jwt_access_token")
    profile.whatsapp_state = {"state": STATE_MAIN_MENU}
    if jwt_token:
        profile.whatsapp_state["jwt_access_token"] = jwt_token
    profile.save()

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ *–ñ–∏–ª—å–µGO* ‚Äî –≤–∞—à–µ–º –Ω–∞–¥—ë–∂–Ω–æ–º –ø–æ–º–æ—â–Ω–∏–∫–µ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∂–∏–ª—å—è!\n\n"
        "üè° –£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ –Ω—É–∂–Ω—ã–º –¥–∞—Ç–∞–º\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω –∏ –∫–ª–∞—Å—Å –∂–∏–ª—å—è\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n"
        "‚Ä¢ –û–ø–ª–∞—á–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ Kaspi\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –±—Ä–æ–Ω—è–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è WhatsApp
    buttons = [
        {"id": "search_apartments", "title": "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä"},
        {"id": "my_bookings", "title": "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏"},
        {"id": "current_status", "title": "üìä –°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏"},
    ]

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    if profile.role in ("admin", "super_admin", "super_user"):
        buttons.append({"id": "admin_panel", "title": "üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"})

    buttons.append({"id": "help", "title": "‚ùì –ü–æ–º–æ—â—å"})

    send_whatsapp_button_message(
        phone_number,
        text,
        buttons,
        header="–ñ–∏–ª—å–µGO",
        footer="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é",
    )
