import logging
from datetime import datetime, date, timedelta
from decimal import Decimal

from django.contrib.auth import get_user_model

from .constants import log_handler
from booking_bot import settings
from booking_bot.services.booking_service import (
    BookingError,
    BookingRequest,
    create_booking,
)
from booking_bot.notifications.delivery import (
    build_confirmation_message,
    log_codes_delivery,
)
from booking_bot.bookings.tasks import cancel_expired_booking

User = get_user_model()

logger = logging.getLogger(__name__)

CITIES = []


@log_handler
def message_handler(phone_number, text, message_data=None):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp"""
    profile = _get_or_create_local_profile(phone_number)
    state_data = profile.whatsapp_state or {}
    state = state_data.get("state", STATE_MAIN_MENU)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if message_data and message_data.get("type") == "image":
        if handle_photo_upload(phone_number, message_data):
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∞–¥–º–∏–Ω)
    if handle_add_property_start(phone_number, text):
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (interactive replies)
    if message_data and message_data.get("type") == "interactive":
        interactive = message_data.get("interactive", {})
        reply = interactive.get("button_reply") or interactive.get("list_reply")
        if reply:
            button_id = reply.get("id")
            return handle_button_click(phone_number, button_id, profile)

    # –ö–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if text in ("–û—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∏—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "/start", "–°—Ç–∞—Ä—Ç"):
        start_command_handler(phone_number)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if state == STATE_AWAITING_CHECK_IN:
        handle_checkin_input(phone_number, text)
        return
    if state == STATE_AWAITING_CHECK_OUT:
        handle_checkout_input(phone_number, text)
        return
    if state == STATE_CONFIRM_BOOKING:
        if text == "–û–ø–ª–∞—Ç–∏—Ç—å Kaspi":
            handle_payment_confirmation(phone_number)
        elif text in ("–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É", "–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É", "üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É"):
            handle_manual_payment(phone_number)
        else:
            send_whatsapp_message(
                phone_number, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è."
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if state == STATE_MAIN_MENU:
        if text == "–ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä":
            prompt_city(phone_number, profile)
            return
        elif text == "–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
            show_user_bookings(phone_number, "completed")
            return
        elif text == "–°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏":
            show_user_bookings(phone_number, "active")
            return
        elif text == "–ü–æ–º–æ—â—å":
            help_command_handler(phone_number)
            return
        elif text == "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and profile.role in (
            "admin",
            "super_admin",
        ):
            show_admin_panel(phone_number)
            return

    # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    if state == STATE_SELECT_CITY:
        select_city(phone_number, profile, text)
        return

    # –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
    if state == STATE_SELECT_DISTRICT:
        select_district(phone_number, profile, text)
        return

    # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    if state == STATE_SELECT_CLASS:
        select_class(phone_number, profile, text)
        return

    # –í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç
    if state == STATE_SELECT_ROOMS:
        select_rooms(phone_number, profile, text)
        return

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    if state == STATE_SHOWING_RESULTS:
        navigate_results(phone_number, profile, text)
        return

    # Fallback
    send_whatsapp_message(
        phone_number,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
    )
    return None


@log_handler
def handle_button_click(phone_number, button_id, profile):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ WhatsApp"""
    if button_id == "search_apartments":
        prompt_city(phone_number, profile)
    elif button_id == "my_bookings":
        show_user_bookings(phone_number, "completed")
    elif button_id == "current_status":
        show_user_bookings(phone_number, "active")
    elif button_id == "help":
        help_command_handler(phone_number)
    elif button_id == "admin_panel":
        show_admin_panel(phone_number)
    elif button_id.startswith("city_"):
        city_id = button_id.replace("city_", "")
        select_city_by_id(phone_number, profile, city_id)
    elif button_id.startswith("district_"):
        district_id = button_id.replace("district_", "")
        select_district_by_id(phone_number, profile, district_id)
    elif button_id.startswith("class_"):
        property_class = button_id.replace("class_", "")
        select_class_by_id(phone_number, profile, property_class)
    elif button_id.startswith("rooms_"):
        rooms = button_id.replace("rooms_", "")
        select_rooms_by_id(phone_number, profile, rooms)
    elif button_id.startswith("book_"):
        property_id = int(button_id.replace("book_", ""))
        handle_booking_start(phone_number, property_id)
    elif button_id.startswith("reviews_"):
        property_id = int(button_id.replace("reviews_", ""))
        show_property_reviews(phone_number, property_id)
    elif button_id == "next_property":
        show_next_property(phone_number, profile)
    elif button_id == "prev_property":
        show_prev_property(phone_number, profile)
    elif button_id == "confirm_payment":
        handle_payment_confirmation(phone_number)
    elif button_id == "manual_payment":
        handle_manual_payment(phone_number)
    elif button_id == "cancel_booking":
        start_command_handler(phone_number)
    
    # Admin panel buttons
    elif button_id == "add_property":
        handle_add_property_start(phone_number, "–î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")
    elif button_id == "my_properties":
        show_admin_properties(phone_number)
    elif button_id == "statistics":
        show_detailed_statistics(phone_number)
    elif button_id == "manage_admins":
        show_super_admin_menu(phone_number)
    elif button_id == "all_statistics":
        show_extended_statistics(phone_number)
    elif button_id == "main_menu":
        start_command_handler(phone_number)
    
    # Statistics period buttons
    elif button_id == "stat_week":
        show_detailed_statistics(phone_number, "week")
    elif button_id == "stat_month":
        show_detailed_statistics(phone_number, "month")
    elif button_id == "stat_quarter":
        show_detailed_statistics(phone_number, "quarter")
    elif button_id == "stat_csv":
        export_statistics_csv(phone_number)
    
    # Admin add property workflow buttons
    elif button_id.startswith("admin_city_"):
        city_id = button_id.replace("admin_city_", "")
        try:
            city = City.objects.get(id=city_id)
            handle_add_property_start(phone_number, city.name)
        except City.DoesNotExist:
            logger.warning(f"City with id {city_id} not found")
    elif button_id.startswith("admin_district_"):
        district_id = button_id.replace("admin_district_", "")
        try:
            district = District.objects.get(id=district_id)
            handle_add_property_start(phone_number, district.name)
        except District.DoesNotExist:
            logger.warning(f"District with id {district_id} not found")
    elif button_id.startswith("admin_class_"):
        property_class = button_id.replace("admin_class_", "")
        class_names = {"economy": "–ö–æ–º—Ñ–æ—Ä—Ç", "business": "–ë–∏–∑–Ω–µ—Å", "luxury": "–ü—Ä–µ–º–∏—É–º"}
        class_display = class_names.get(property_class, property_class)
        handle_add_property_start(phone_number, class_display)
    elif button_id.startswith("admin_rooms_"):
        rooms = button_id.replace("admin_rooms_", "")
        room_display = "4+" if rooms == "4" else rooms
        handle_add_property_start(phone_number, room_display)
    
    # Photo upload buttons
    elif button_id == "photo_url":
        handle_add_property_start(phone_number, "URL —Ñ–æ—Ç–æ")
    elif button_id == "photo_upload":
        handle_add_property_start(phone_number, "–ó–∞–≥—Ä—É–∑–∏—Ç—å")
    elif button_id == "skip_photos":
        handle_add_property_start(phone_number, "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    
    # Super admin menu buttons
    elif button_id == "list_admins":
        # TODO: implement list_admins functionality
        send_whatsapp_message(phone_number, "üìã –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif button_id == "add_admin":
        # TODO: implement add_admin functionality
        send_whatsapp_message(phone_number, "‚ûï –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif button_id == "city_stats":
        # TODO: implement city_stats functionality
        send_whatsapp_message(phone_number, "üèôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif button_id == "general_stats":
        show_extended_statistics(phone_number)
    elif button_id == "revenue_report":
        # TODO: implement revenue_report functionality
        send_whatsapp_message(phone_number, "üí∞ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif button_id == "export_all":
        # TODO: implement export_all functionality
        send_whatsapp_message(phone_number, "üì• –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # Navigation menu buttons
    elif button_id == "new_search":
        start_command_handler(phone_number)
        prompt_city(phone_number, profile)
    elif button_id == "cancel":
        start_command_handler(phone_number)
    
    else:
        logger.warning(f"Unknown button_id: {button_id}")


def clear_user_state(chat_id: int):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)."""
    profile = _get_or_create_local_profile(chat_id)
    profile.telegram_state = {}
    profile.save()


def send_city_selection(user_profile, twilio_messaging_response):
    """Sends city selection prompt and buttons."""
    cities = City.objects.all().order_by("name")
    city_names = [city.name for city in cities]

    prompt_text = "Please select a city:"
    # _send_message_with_buttons(twilio_messaging_response, prompt_text, city_names)
    # set_user_state(user_profile, ACTION_SELECTING_CITY)


def send_district_selection(user_profile, twilio_messaging_response, selected_city):
    """Sends district selection prompt and buttons."""
    try:
        city = City.objects.get(name=selected_city)
        districts = District.objects.filter(city=city).order_by("name")
        district_names = [d.name for d in districts]

        prompt_text = f"You selected {selected_city}. Now, please select a district:"
        # _send_message_with_buttons(twilio_messaging_response, prompt_text, district_names)
        # set_user_state(user_profile, ACTION_SELECTING_DISTRICT, data={'city': selected_city, 'city_id': city.id})
    except City.DoesNotExist:
        twilio_messaging_response.message("City not found. Please try again.")
        # send_welcome_message(user_profile, twilio_messaging_response)


def display_available_apartments(user_profile, twilio_messaging_response, user_state):
    data = user_state["data"]
    district_name = data.get("district")
    city_id = data.get("city_id")
    rooms_str = data.get("rooms")
    offset = data.get("offset", 0)

    if not district_name or not city_id or not rooms_str:
        logger.error(f"State error: missing data for display_available_apartments")
        twilio_messaging_response.message(
            "Sorry, there was an error. Please try again."
        )
        # send_welcome_message(user_profile, twilio_messaging_response)
        return

    try:
        rooms = int(rooms_str)
        # –ù–∞–π—Ç–∏ —Ä–∞–π–æ–Ω
        district = District.objects.get(name=district_name, city_id=city_id)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        apartments_query = Property.objects.filter(
            district=district,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º district –≤–º–µ—Å—Ç–æ region
            number_of_rooms=rooms,
            status="–°–≤–æ–±–æ–¥–Ω–∞",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        ).order_by("id")

        apartments_page = list(apartments_query[offset:offset])
        total_matching_apartments = apartments_query.count()

    except District.DoesNotExist:
        logger.error(f"District {district_name} not found in city {city_id}")
        twilio_messaging_response.message("District not found. Please try again.")
        # send_welcome_message(user_profile, twilio_messaging_response)
        return
    except Exception as e:
        logger.error(f"Database query error: {e}", exc_info=True)
        twilio_messaging_response.message("Error searching apartments.")
        # send_welcome_message(user_profile, twilio_messaging_response)
        return


@log_handler
def prompt_city(phone_number, profile):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    if profile.whatsapp_state is None:
        profile.whatsapp_state = {}

    profile.whatsapp_state.update({"state": STATE_SELECT_CITY})
    profile.save()

    cities = City.objects.all().order_by("name")

    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –º–∞–ª–æ (–¥–æ 10), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    if cities.count() <= 10:
        sections = [
            {
                "title": "–ì–æ—Ä–æ–¥–∞",
                "rows": [
                    {
                        "id": f"city_{city.id}",
                        "title": city.name[:24],  # –ú–∞–∫—Å–∏–º—É–º 24 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
                    }
                    for city in cities
                ],
            }
        ]

        send_whatsapp_list_message(
            phone_number,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä:",
            "–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥",
            sections,
            header="üèôÔ∏è –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞",
        )
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –º–Ω–æ–≥–æ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        send_whatsapp_message(
            phone_number,
            "üèôÔ∏è *–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–º–∞—Ç—ã, –ê—Å—Ç–∞–Ω–∞, –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
        )


@log_handler
def select_city(phone_number, profile, text):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    try:
        city = City.objects.get(name__icontains=text)
        select_city_by_id(phone_number, profile, str(city.id))
    except City.DoesNotExist:
        send_whatsapp_message(
            phone_number,
            "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
        )
    except City.MultipleObjectsReturned:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤
        cities = City.objects.filter(name__icontains=text)[:10]
        sections = [
            {
                "title": "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞",
                "rows": [
                    {"id": f"city_{city.id}", "title": city.name[:24]}
                    for city in cities
                ],
            }
        ]

        send_whatsapp_list_message(
            phone_number,
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text}'.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:",
            "–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥",
            sections,
        )


@log_handler
def select_city_by_id(phone_number, profile, city_id):
    """–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –ø–æ ID"""
    try:
        city = City.objects.get(id=city_id)
        profile.whatsapp_state.update(
            {"city_id": city.id, "state": STATE_SELECT_DISTRICT}
        )
        profile.save()

        districts = District.objects.filter(city=city).order_by("name")
        if not districts.exists():
            send_whatsapp_message(
                phone_number,
                f"‚ùå –í –≥–æ—Ä–æ–¥–µ ¬´{city.name}¬ª –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
            )
            prompt_city(phone_number, profile)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤
        sections = [
            {
                "title": f"–†–∞–π–æ–Ω—ã {city.name}",
                "rows": [
                    {"id": f"district_{district.id}", "title": district.name[:24]}
                    for district in districts[:10]  # WhatsApp –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                ],
            }
        ]

        send_whatsapp_list_message(
            phone_number,
            f"–ì–æ—Ä–æ–¥: *{city.name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
            "–í—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω",
            sections,
            header="üìç –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞",
        )

    except City.DoesNotExist:
        send_whatsapp_message(phone_number, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@log_handler
def select_district(phone_number, profile, text):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    city_id = profile.whatsapp_state.get("city_id")
    try:
        district = District.objects.get(name__icontains=text, city_id=city_id)
        select_district_by_id(phone_number, profile, str(district.id))
    except District.DoesNotExist:
        send_whatsapp_message(phone_number, "‚ùå –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    except District.MultipleObjectsReturned:
        districts = District.objects.filter(name__icontains=text, city_id=city_id)[:10]
        sections = [
            {
                "title": "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã",
                "rows": [
                    {"id": f"district_{district.id}", "title": district.name[:24]}
                    for district in districts
                ],
            }
        ]

        send_whatsapp_list_message(
            phone_number,
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text}'.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:",
            "–í—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω",
            sections,
        )


@log_handler
def select_district_by_id(phone_number, profile, district_id):
    """–í—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω –ø–æ ID"""
    try:
        district = District.objects.get(id=district_id)
        profile.whatsapp_state.update(
            {"district_id": district.id, "state": STATE_SELECT_CLASS}
        )
        profile.save()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –∂–∏–ª—å—è –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        buttons = [
            {"id": "class_economy", "title": "–ö–æ–º—Ñ–æ—Ä—Ç"},
            {"id": "class_business", "title": "–ë–∏–∑–Ω–µ—Å"},
            {"id": "class_luxury", "title": "–ü—Ä–µ–º–∏—É–º"},
        ]

        send_whatsapp_button_message(
            phone_number,
            f"–†–∞–π–æ–Ω: *{district.name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∂–∏–ª—å—è:",
            buttons,
            header="üè† –ö–ª–∞—Å—Å –∂–∏–ª—å—è",
        )

    except District.DoesNotExist:
        send_whatsapp_message(phone_number, "‚ùå –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@log_handler
def select_class(phone_number, profile, text):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    mapping = {"–∫–æ–º—Ñ–æ—Ä—Ç": "economy", "–±–∏–∑–Ω–µ—Å": "business", "–ø—Ä–µ–º–∏—É–º": "luxury"}
    class_key = text.lower()
    if class_key in mapping:
        select_class_by_id(phone_number, profile, mapping[class_key])
    else:
        send_whatsapp_message(
            phone_number, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )


@log_handler
def select_class_by_id(phone_number, profile, property_class):
    """–í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å –ø–æ ID"""
    profile.whatsapp_state.update(
        {"property_class": property_class, "state": STATE_SELECT_ROOMS}
    )
    profile.save()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
    sections = [
        {
            "title": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
            "rows": [
                {"id": "rooms_1", "title": "1 –∫–æ–º–Ω–∞—Ç–∞"},
                {"id": "rooms_2", "title": "2 –∫–æ–º–Ω–∞—Ç—ã"},
                {"id": "rooms_3", "title": "3 –∫–æ–º–Ω–∞—Ç—ã"},
                {"id": "rooms_4", "title": "4+ –∫–æ–º–Ω–∞—Ç"},
            ],
        }
    ]

    class_names = {"economy": "–ö–æ–º—Ñ–æ—Ä—Ç", "business": "–ë–∏–∑–Ω–µ—Å", "luxury": "–ü—Ä–µ–º–∏—É–º"}
    class_name = class_names.get(property_class, property_class)

    send_whatsapp_list_message(
        phone_number,
        f"–ö–ª–∞—Å—Å: *{class_name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        "–í—ã–±—Ä–∞—Ç—å",
        sections,
        header="üõèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
    )


@log_handler
def select_rooms(phone_number, profile, text):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç –ø–æ —Ç–µ–∫—Å—Ç—É"""
    if text in ["1", "2", "3", "4", "4+"]:
        rooms = 4 if text == "4+" else int(text)
        select_rooms_by_id(phone_number, profile, str(rooms))
    else:
        send_whatsapp_message(
            phone_number, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: 1, 2, 3 –∏–ª–∏ 4+"
        )


@log_handler
def select_rooms_by_id(phone_number, profile, rooms):
    """–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –ø–æ ID"""
    rooms = int(rooms)
    profile.whatsapp_state.update({"rooms": rooms, "state": STATE_SHOWING_RESULTS})
    profile.save()

    send_whatsapp_message(phone_number, "üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
    show_search_results(phone_number, profile, offset=0)


@log_handler
def show_search_results(phone_number, profile, offset=0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    sd = profile.whatsapp_state or {}

    query = Property.objects.filter(
        district__city_id=sd.get("city_id"),
        district_id=sd.get("district_id"),
        property_class=sd.get("property_class"),
        number_of_rooms=sd.get("rooms"),
        status="–°–≤–æ–±–æ–¥–Ω–∞",
    ).order_by("price_per_day")

    total = query.count()
    if total == 0:
        send_whatsapp_message(
            phone_number,
            "‚ùå –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º offset
    sd["search_offset"] = offset
    sd["total_results"] = total
    profile.whatsapp_state = sd
    profile.save()

    prop = query[offset]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photos = PropertyPhoto.objects.filter(property=prop)[:5]  # WhatsApp –ª–∏–º–∏—Ç
    if photos:
        photo_urls = []
        for photo in photos:
            if photo.image_url:
                photo_urls.append(photo.image_url)
            elif photo.image:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                from django.conf import settings

                domain = getattr(settings, "DOMAIN", "")
                full_url = f"{domain.rstrip('/')}{photo.image.url}"
                photo_urls.append(full_url)

        if photo_urls:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            stats = Review.objects.filter(property=prop).aggregate(
                avg=Avg("rating"), cnt=Count("id")
            )
            caption = (
                f"*{prop.name}*\n"
                f"üìç {prop.district.city.name}, {prop.district.name}\n"
                f"üè† –ö–ª–∞—Å—Å: {prop.get_property_class_display()}\n"
                f"üõè –ö–æ–º–Ω–∞—Ç: {prop.number_of_rooms}\n"
                f"üí∞ –¶–µ–Ω–∞: *{prop.price_per_day} ‚Ç∏/—Å—É—Ç–∫–∏*"
            )
            if stats["avg"]:
                caption += (
                    f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['avg']:.1f}/5 ({stats['cnt']} –æ—Ç–∑—ã–≤–æ–≤)"
                )

            send_whatsapp_image(phone_number, photo_urls[0], caption)

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
            for photo_url in photo_urls[1:]:
                send_whatsapp_image(phone_number, photo_url)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons = []

    if prop.status == "–°–≤–æ–±–æ–¥–Ω–∞":
        buttons.append({"id": f"book_{prop.id}", "title": "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"})

    if Review.objects.filter(property=prop).exists():
        buttons.append({"id": f"reviews_{prop.id}", "title": "üí¨ –û—Ç–∑—ã–≤—ã"})

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
    nav_buttons = []
    if offset > 0:
        nav_buttons.append({"id": "prev_property", "title": "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"})
    if offset < total - 1:
        nav_buttons.append({"id": "next_property", "title": "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"})

    # WhatsApp –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º
    if len(buttons) + len(nav_buttons) <= 3:
        buttons.extend(nav_buttons)
    else:
        # –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫
        sections = []

        if buttons:
            sections.append(
                {
                    "title": "–î–µ–π—Å—Ç–≤–∏—è",
                    "rows": [
                        {"id": btn["id"], "title": btn["title"]} for btn in buttons
                    ],
                }
            )

        if nav_buttons:
            sections.append(
                {
                    "title": "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
                    "rows": [
                        {"id": btn["id"], "title": btn["title"]} for btn in nav_buttons
                    ],
                }
            )

        sections.append(
            {
                "title": "–ú–µ–Ω—é",
                "rows": [
                    {"id": "new_search", "title": "üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"},
                    {"id": "main_menu", "title": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
                ],
            }
        )

        send_whatsapp_list_message(
            phone_number,
            f"–í–∞—Ä–∏–∞–Ω—Ç {offset + 1} –∏–∑ {total}",
            "–í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
            sections,
            footer=f"–ù–∞–π–¥–µ–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä: {total}",
        )
        return

    # –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –º–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    send_whatsapp_button_message(
        phone_number,
        f"–í–∞—Ä–∏–∞–Ω—Ç {offset + 1} –∏–∑ {total}",
        buttons,
        footer="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    )


@log_handler
def show_next_property(phone_number, profile):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É"""
    sd = profile.whatsapp_state or {}
    offset = sd.get("search_offset", 0)
    total = sd.get("total_results", 0)

    if offset < total - 1:
        show_search_results(phone_number, profile, offset + 1)
    else:
        send_whatsapp_message(phone_number, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ.")


@log_handler
def show_prev_property(phone_number, profile):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É"""
    sd = profile.whatsapp_state or {}
    offset = sd.get("search_offset", 0)

    if offset > 0:
        show_search_results(phone_number, profile, offset - 1)
    else:
        send_whatsapp_message(phone_number, "–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ.")


@log_handler
def navigate_results(phone_number, profile, text):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
    if text == "–°–ª–µ–¥—É—é—â–∞—è":
        show_next_property(phone_number, profile)
    elif text == "–ü—Ä–µ–¥—ã–¥—É—â–∞—è":
        show_prev_property(phone_number, profile)
    elif text.startswith("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞
        parts = text.split()
        if len(parts) > 1:
            try:
                property_id = int(parts[-1])
                handle_booking_start(phone_number, property_id)
            except ValueError:
                send_whatsapp_message(phone_number, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã.")
    elif text.startswith("–û—Ç–∑—ã–≤—ã"):
        parts = text.split()
        if len(parts) > 1:
            try:
                property_id = int(parts[-1])
                show_property_reviews(phone_number, property_id)
            except ValueError:
                send_whatsapp_message(phone_number, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤.")
    else:
        send_whatsapp_message(phone_number, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")


@log_handler
def handle_booking_start(phone_number, property_id):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    profile = _get_profile(phone_number)
    try:
        prop = Property.objects.get(id=property_id, status="–°–≤–æ–±–æ–¥–Ω–∞")
    except Property.DoesNotExist:
        send_whatsapp_message(
            phone_number, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞."
        )
        return

    profile.whatsapp_state.update(
        {"state": STATE_AWAITING_CHECK_IN, "booking_property_id": property_id}
    )
    profile.save()

    today = date.today()
    tomorrow = today + timedelta(days=1)

    buttons = [
        {"id": f"checkin_today", "title": f"–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})"},
        {"id": f"checkin_tomorrow", "title": f"–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})"},
        {"id": "cancel", "title": "‚ùå –û—Ç–º–µ–Ω–∞"},
    ]

    send_whatsapp_button_message(
        phone_number,
        f"üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã*\n{prop.name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
        buttons,
        header="–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞",
    )


@log_handler
def handle_checkin_input(phone_number, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞"""
    try:
        check_in = datetime.strptime(text, "%d.%m.%Y").date()
    except:
        if "–°–µ–≥–æ–¥–Ω—è" in text:
            check_in = date.today()
        elif "–ó–∞–≤—Ç—Ä–∞" in text:
            check_in = date.today() + timedelta(days=1)
        else:
            send_whatsapp_message(
                phone_number,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            )
            return

    profile = _get_profile(phone_number)
    sd = profile.whatsapp_state
    sd.update(
        {"check_in_date": check_in.isoformat(), "state": STATE_AWAITING_CHECK_OUT}
    )
    profile.whatsapp_state = sd
    profile.save()

    tomorrow = check_in + timedelta(days=1)
    after = tomorrow + timedelta(days=1)

    buttons = [
        {"id": f"checkout_1", "title": f"{tomorrow.strftime('%d.%m')} (+1 –¥–µ–Ω—å)"},
        {"id": f"checkout_2", "title": f"{after.strftime('%d.%m')} (+2 –¥–Ω—è)"},
        {"id": "cancel", "title": "‚ùå –û—Ç–º–µ–Ω–∞"},
    ]

    send_whatsapp_button_message(
        phone_number,
        f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: *{check_in.strftime('%d.%m.%Y')}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
        buttons,
        header="–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞",
    )


@log_handler
def handle_checkout_input(phone_number, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞"""
    import re

    profile = _get_profile(phone_number)
    sd = profile.whatsapp_state or {}

    check_in_str = sd.get("check_in_date")
    if not check_in_str:
        send_whatsapp_message(phone_number, "‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    check_in = date.fromisoformat(check_in_str)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞
    m = re.search(r"\+(\d+)", text)
    if m:
        offset = int(m.group(1))
        check_out = check_in + timedelta(days=offset)
    else:
        try:
            check_out = datetime.strptime(text, "%d.%m.%Y").date()
        except ValueError:
            send_whatsapp_message(
                phone_number,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            )
            return

    if check_out <= check_in:
        send_whatsapp_message(
            phone_number, "‚ùå –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    days = (check_out - check_in).days
    sd.update(
        {
            "check_out_date": check_out.isoformat(),
            "state": STATE_CONFIRM_BOOKING,
            "days": days,
        }
    )

    property_id = sd.get("booking_property_id")
    try:
        prop = Property.objects.get(id=property_id)
    except Property.DoesNotExist:
        send_whatsapp_message(phone_number, "‚ùå –û—à–∏–±–∫–∞: –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    total_price = days * prop.price_per_day
    sd["total_price"] = float(total_price)
    profile.whatsapp_state = sd
    profile.save()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    buttons = [
        {"id": "confirm_payment", "title": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å Kaspi"},
        {"id": "manual_payment", "title": "üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É"},
        {"id": "cancel_booking", "title": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"},
    ]

    send_whatsapp_button_message(
        phone_number,
        f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
        f"üè† {prop.name}\n"
        f"üìÖ –ó–∞–µ–∑–¥: {check_in.strftime('%d.%m.%Y')}\n"
        f"üìÖ –í—ã–µ–∑–¥: {check_out.strftime('%d.%m.%Y')}\n"
        f"üåô –ù–æ—á–µ–π: {days}\n"
        f"üí∞ –ò—Ç–æ–≥–æ: *{total_price:,.0f} ‚Ç∏*",
        buttons,
        header="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
    )


@log_handler
def handle_payment_confirmation(phone_number):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    profile = _get_profile(phone_number)
    sd = profile.whatsapp_state or {}

    property_id = sd.get("booking_property_id")
    check_in_str = sd.get("check_in_date")
    check_out_str = sd.get("check_out_date")
    total_price = sd.get("total_price")

    if not all([property_id, check_in_str, check_out_str, total_price]):
        send_whatsapp_message(
            phone_number, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return

    try:
        prop = Property.objects.get(id=property_id)
        check_in = date.fromisoformat(check_in_str)
        check_out = date.fromisoformat(check_out_str)

        booking_request = BookingRequest(
            user=profile.user,
            property=prop,
            start_date=check_in,
            end_date=check_out,
            status="pending_payment",
            hold_calendar=True,
        )

        try:
            booking = create_booking(booking_request)
        except BookingError as exc:
            logger.info("WhatsApp booking failed for %s: %s", phone_number, exc)
            send_whatsapp_message(
                phone_number, f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {exc}"
            )
            return

        if booking.expires_at:
            cancel_expired_booking.apply_async(args=[booking.id], eta=booking.expires_at)

        send_whatsapp_message(
            phone_number, "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        try:
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
            payment_info = kaspi_initiate_payment(
                booking_id=booking.id,
                amount=float(booking.total_price),
                description=f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {prop.name}",
            )

            if payment_info and payment_info.get("checkout_url"):
                kaspi_payment_id = payment_info.get("payment_id")
                if kaspi_payment_id:
                    booking.kaspi_payment_id = kaspi_payment_id
                    booking.save(update_fields=["kaspi_payment_id"])

                checkout_url = payment_info["checkout_url"]

                # –í —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏ Kaspi –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
                if settings.AUTO_CONFIRM_PAYMENTS:
                    booking.status = "confirmed"
                    booking.save(update_fields=["status", "updated_at"])
                    booking.property.update_status_from_bookings()

                    send_booking_confirmation(phone_number, booking)

                    profile.whatsapp_state = {}
                    profile.save()
                else:
                    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    send_whatsapp_message(
                        phone_number,
                        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                        f"üìã –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n\n"
                        f"üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                        f"{checkout_url}\n\n"
                        f"‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç",
                        preview_url=True,
                    )

                    profile.whatsapp_state = {}
                    profile.save()
            else:
                raise KaspiPaymentError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        except KaspiPaymentError as e:
            booking.status = "payment_failed"
            booking.save(update_fields=["status", "updated_at"])

            send_whatsapp_message(
                phone_number,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {booking.id}",
            )

    except Property.DoesNotExist:
        send_whatsapp_message(phone_number, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        send_whatsapp_message(
            phone_number,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


@log_handler
def handle_manual_payment(phone_number):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –æ–ø–ª–∞—Ç—ã."""
    if not getattr(settings, "MANUAL_PAYMENT_ENABLED", True):
        send_whatsapp_message(
            phone_number,
            "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ Kaspi. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å Kaspi-–ø–ª–∞—Ç—ë–∂.",
        )
        return

    profile = _get_profile(phone_number)
    sd = profile.whatsapp_state or {}

    property_id = sd.get("booking_property_id")
    check_in_str = sd.get("check_in_date")
    check_out_str = sd.get("check_out_date")

    if not all([property_id, check_in_str, check_out_str]):
        send_whatsapp_message(
            phone_number, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return

    try:
        prop = Property.objects.get(id=property_id)
        check_in = date.fromisoformat(check_in_str)
        check_out = date.fromisoformat(check_out_str)

        request = BookingRequest(
            user=profile.user,
            property=prop,
            start_date=check_in,
            end_date=check_out,
            check_in_time=sd.get("check_in_time", "14:00"),
            check_out_time=sd.get("check_out_time", "12:00"),
            status="pending_payment",
            hold_calendar=True,
            expires_in=timedelta(
                minutes=getattr(settings, "MANUAL_PAYMENT_HOLD_MINUTES", 180)
            ),
        )

        try:
            booking = create_booking(request)
        except BookingError as exc:
            logger.info("Manual booking failed for %s: %s", phone_number, exc)
            send_whatsapp_message(
                phone_number, f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {exc}"
            )
            return

        if booking.expires_at:
            cancel_expired_booking.apply_async(args=[booking.id], eta=booking.expires_at)

        instructions = getattr(
            settings,
            "MANUAL_PAYMENT_INSTRUCTIONS",
            "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞.",
        )

        message = (
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.id} —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"üè† {prop.name}\n"
            f"üìÖ {check_in.strftime('%d.%m.%Y')} ‚Äî {check_out.strftime('%d.%m.%Y')}\n"
            f"üí∞ –°—É–º–º–∞: {booking.total_price:,.0f} ‚Ç∏\n\n"
            f"{instructions}\n\n"
            "–ú—ã —É–¥–µ—Ä–∂–∏–º –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞ –≤–∞–º–∏ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
        )

        send_whatsapp_message(phone_number, message)

        profile.whatsapp_state = {}
        profile.save()

        logger.info(
            "Manual payment initiated for WhatsApp user %s (booking %s)",
            phone_number,
            booking.id,
        )

    except Property.DoesNotExist:
        send_whatsapp_message(phone_number, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as exc:  # noqa: BLE001
        logger.error("Manual payment flow error: %s", exc, exc_info=True)
        send_whatsapp_message(
            phone_number,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


def send_booking_confirmation(phone_number, booking):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = build_confirmation_message(booking, include_owner_contact=True)
    codes_block = log_codes_delivery(
        booking, channel="whatsapp", recipient=phone_number
    )
    if codes_block:
        codes_block = (
            codes_block.replace("<b>", "*")
            .replace("</b>", "*")
            .replace("<code>", "`")
            .replace("</code>", "`")
            .replace("<", "")
            .replace(">", "")
        )
        text += f"\n{codes_block}"

    text = (
        text.replace("<b>", "*")
        .replace("</b>", "*")
        .replace("<br>", "\n")
        .replace("<br/>", "\n")
        .replace("</br>", "\n")
        .replace("&nbsp;", " ")
    )

    send_whatsapp_message(phone_number, text)

    property_obj = booking.property
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    photos = PropertyPhoto.objects.filter(property=property_obj)[:3]
    if photos:
        for photo in photos:
            if photo.image_url:
                send_whatsapp_image(phone_number, photo.image_url)
            elif photo.image:
                from django.conf import settings

                domain = getattr(settings, "DOMAIN", "")
                full_url = f"{domain.rstrip('/')}{photo.image.url}"
                send_whatsapp_image(phone_number, full_url)


@log_handler
def show_user_bookings(phone_number, booking_type="active"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = _get_profile(phone_number)

    if booking_type == "active":
        bookings = Booking.objects.filter(
            user=profile.user, status="confirmed", end_date__gte=date.today()
        ).order_by("start_date")
        title = "üìä *–¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*"
    else:
        bookings = Booking.objects.filter(
            user=profile.user, status__in=["completed", "cancelled"]
        ).order_by("-created_at")[:10]
        title = "üìã *–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"

    if not bookings:
        message = f"{title}\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {'–∞–∫—Ç–∏–≤–Ω—ã—Ö' if booking_type == 'active' else '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö'} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        send_whatsapp_message(phone_number, message)
        return

    text = title + "\n\n"
    for b in bookings:
        emoji = {"confirmed": "‚úÖ", "completed": "‚úîÔ∏è", "cancelled": "‚ùå"}.get(
            b.status, "‚Ä¢"
        )
        text += (
            f"{emoji} *{b.property.name}*\n"
            f"üìÖ {b.start_date.strftime('%d.%m')} - {b.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ {b.total_price} ‚Ç∏\n\n"
        )

    send_whatsapp_message(phone_number, text)


@log_handler
def show_property_reviews(phone_number, property_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ"""
    try:
        prop = Property.objects.get(id=property_id)
        reviews = Review.objects.filter(property=prop).order_by("-created_at")[:5]

        if not reviews:
            send_whatsapp_message(phone_number, "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = f"*–û—Ç–∑—ã–≤—ã –æ {prop.name}*\n\n"
        for r in reviews:
            stars = "‚≠ê" * r.rating
            text += f"{stars} _{r.user.first_name}_ {r.created_at.strftime('%d.%m.%Y')}\n{r.text}\n\n"

        send_whatsapp_message(phone_number, text)

    except Property.DoesNotExist:
        send_whatsapp_message(phone_number, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@log_handler
def help_command_handler(phone_number):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    profile = _get_or_create_local_profile(phone_number)

    text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ñ–∏–ª—å–µGO*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –°—Ç–∞—Ä—Ç - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ - –ø–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä\n"
        "‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞'."
    )

    buttons = [
        {"id": "search_apartments", "title": "üîç –ü–æ–∏—Å–∫"},
        {"id": "my_bookings", "title": "üìã –ë—Ä–æ–Ω–∏"},
        {"id": "main_menu", "title": "üè† –ú–µ–Ω—é"},
    ]

    send_whatsapp_button_message(
        phone_number, text, buttons, footer="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


import logging
from datetime import datetime, date, timedelta, timezone
from django.db.models import Count, Avg

from .constants import (
    STATE_MAIN_MENU,
    STATE_AWAITING_CHECK_IN,
    STATE_AWAITING_CHECK_OUT,
    STATE_CONFIRM_BOOKING,
    STATE_SELECT_CITY,
    STATE_SELECT_DISTRICT,
    STATE_SELECT_CLASS,
    STATE_SELECT_ROOMS,
    STATE_SHOWING_RESULTS,
    log_handler,
    _get_or_create_local_profile,
    _get_profile,
    start_command_handler,
)
from .. import settings
from booking_bot.listings.models import City, District, Property, PropertyPhoto, Review
from booking_bot.bookings.models import Booking
from booking_bot.payments import (
    initiate_payment as kaspi_initiate_payment,
    KaspiPaymentError,
)
from .utils import (
    send_whatsapp_message,
    send_whatsapp_button_message,
    send_whatsapp_list_message,
    send_whatsapp_media_group,
    send_whatsapp_image,
    escape_markdown,
)
from .admin_handlers import (
    show_admin_panel,
    handle_add_property_start,
    handle_photo_upload,
    show_detailed_statistics,
    show_extended_statistics,
    export_statistics_csv,
    show_admin_properties,
    show_super_admin_menu,
)

logger = logging.getLogger(__name__)


def _normalize_phone(phone_number: str) -> str:
    return "".join(ch for ch in phone_number if ch.isdigit())


@log_handler
def handle_unknown_user(phone_number: str, text: str, response):
    """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WhatsApp-–∫–æ–º–∞–Ω–¥—ã."""
    profile = _get_or_create_local_profile(phone_number)

    if not profile.user:
        profile.ensure_user_exists()

    user = profile.user
    normalized = _normalize_phone(phone_number)
    desired_username = f"user_{normalized}" if normalized else user.get_username()

    if user and desired_username and user.username != desired_username:
        if not User.objects.filter(username=desired_username).exclude(pk=user.pk).exists():
            user.username = desired_username
            user.save(update_fields=["username"])

    updates = {}
    if profile.phone_number != phone_number:
        updates["phone_number"] = phone_number
    if profile.whatsapp_phone != phone_number:
        updates["whatsapp_phone"] = phone_number
    if not profile.role:
        updates["role"] = "user"
    if updates:
        for field, value in updates.items():
            setattr(profile, field, value)
        profile.save(update_fields=list(updates.keys()))

    if hasattr(response, "message"):
        response.message(
            f"Welcome! Registered as {user.get_username()}. "
            "Use /book property_id:<id> from:<YYYY-MM-DD> to:<YYYY-MM-DD> to make a booking."
        )

    return profile


@log_handler
def handle_known_user(profile, command_text: str, response):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /book –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏."""
    if not profile:
        if hasattr(response, "message"):
            response.message("Profile is required to process commands.")
        return None

    if not profile.user:
        profile.ensure_user_exists()

    command = (command_text or "").strip()
    if not command.startswith("/book"):
        if hasattr(response, "message"):
            response.message(
                "Unsupported command. Use /book property_id:<id> from:<YYYY-MM-DD> to:<YYYY-MM-DD>."
            )
        return None

    payload = command[len("/book"):].strip()
    parts = [part for part in payload.split() if ":" in part]
    tokens = {}
    for part in parts:
        key, value = part.split(":", 1)
        tokens[key.strip().lower()] = value.strip()

    try:
        property_id = int(tokens["property_id"])
        start_date = datetime.strptime(tokens["from"], "%Y-%m-%d").date()
        end_date = datetime.strptime(tokens["to"], "%Y-%m-%d").date()
    except (KeyError, ValueError):
        if hasattr(response, "message"):
            response.message(
                "Invalid booking command. Use /book property_id:<id> from:<YYYY-MM-DD> to:<YYYY-MM-DD>."
            )
        return None

    if end_date <= start_date:
        if hasattr(response, "message"):
            response.message("End date must be after start date.")
        return None

    if start_date < date.today():
        if hasattr(response, "message"):
            response.message("Start date must not be in the past.")
        return None

    try:
        property_obj = Property.objects.get(pk=property_id)
    except Property.DoesNotExist:
        if hasattr(response, "message"):
            response.message(f"Property with ID {property_id} not found.")
        return None

    overlap_exists = Booking.objects.filter(
        property=property_obj,
        start_date__lt=end_date,
        end_date__gt=start_date,
        status__in=["pending", "pending_payment", "confirmed"],
    ).exists()

    if overlap_exists:
        if hasattr(response, "message"):
            response.message(
                f"Sorry, {property_obj.name} is not available for the selected dates."
            )
        return None

    nights = (end_date - start_date).days
    total_price = property_obj.price_per_day * Decimal(nights)

    booking = Booking.objects.create(
        user=profile.user,
        property=property_obj,
        start_date=start_date,
        end_date=end_date,
        total_price=total_price,
        status="pending",
    )

    if hasattr(response, "message"):
        response.message(
            "Booking successful! We'll confirm your reservation shortly."
        )

    return booking


@log_handler
def message_handler(phone_number, text, message_data=None):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp"""
    profile = _get_or_create_local_profile(phone_number)
    state_data = profile.whatsapp_state or {}
    state = state_data.get("state", STATE_MAIN_MENU)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if message_data and message_data.get("type") == "image":
        if handle_photo_upload(phone_number, message_data):
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∞–¥–º–∏–Ω)
    if handle_add_property_start(phone_number, text):
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (interactive replies)
    if message_data and message_data.get("type") == "interactive":
        interactive = message_data.get("interactive", {})
        reply = interactive.get("button_reply") or interactive.get("list_reply")
        if reply:
            button_id = reply.get("id")
            return handle_button_click(phone_number, button_id, profile)

    # –ö–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if text in ("–û—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∏—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "/start", "–°—Ç–∞—Ä—Ç"):
        start_command_handler(phone_number)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if state == STATE_AWAITING_CHECK_IN:
        handle_checkin_input(phone_number, text)
        return
    if state == STATE_AWAITING_CHECK_OUT:
        handle_checkout_input(phone_number, text)
        return
    if state == STATE_CONFIRM_BOOKING:
        if text == "–û–ø–ª–∞—Ç–∏—Ç—å Kaspi":
            handle_payment_confirmation(phone_number)
        elif text in ("–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É", "–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á—ë—Ç—É", "üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É"):
            handle_manual_payment(phone_number)
        else:
            send_whatsapp_message(
                phone_number, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è."
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if state == STATE_MAIN_MENU:
        if text == "–ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä":
            prompt_city(phone_number, profile)
            return
        elif text == "–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
            show_user_bookings(phone_number, "completed")
            return
        elif text == "–°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏":
            show_user_bookings(phone_number, "active")
            return
        elif text == "–ü–æ–º–æ—â—å":
            help_command_handler(phone_number)
            return
        elif text == "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and profile.role in (
            "admin",
            "super_admin",
        ):
            show_admin_panel(phone_number)
            return

    # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    if state == STATE_SELECT_CITY:
        select_city(phone_number, profile, text)
        return

    # –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
    if state == STATE_SELECT_DISTRICT:
        select_district(phone_number, profile, text)
        return

    # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    if state == STATE_SELECT_CLASS:
        select_class(phone_number, profile, text)
        return

    # –í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç
    if state == STATE_SELECT_ROOMS:
        select_rooms(phone_number, profile, text)
        return

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    if state == STATE_SHOWING_RESULTS:
        navigate_results(phone_number, profile, text)
        return

    # Fallback
    send_whatsapp_message(
        phone_number,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
    )


@log_handler
def handle_button_click(phone_number, button_id, profile):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ WhatsApp"""
    if button_id == "search_apartments":
        prompt_city(phone_number, profile)
    elif button_id == "my_bookings":
        show_user_bookings(phone_number, "completed")
    elif button_id == "current_status":
        show_user_bookings(phone_number, "active")
    elif button_id == "help":
        help_command_handler(phone_number)
    elif button_id == "admin_panel":
        show_admin_panel(phone_number)
    elif button_id.startswith("city_"):
        city_id = button_id.replace("city_", "")
        select_city_by_id(phone_number, profile, city_id)
    elif button_id.startswith("district_"):
        district_id = button_id.replace("district_", "")
        select_district_by_id(phone_number, profile, district_id)
    elif button_id.startswith("class_"):
        property_class = button_id.replace("class_", "")
        select_class_by_id(phone_number, profile, property_class)
    elif button_id.startswith("rooms_"):
        rooms = button_id.replace("rooms_", "")
        select_rooms_by_id(phone_number, profile, rooms)
    elif button_id.startswith("book_"):
        property_id = int(button_id.replace("book_", ""))
        handle_booking_start(phone_number, property_id)
    elif button_id.startswith("reviews_"):
        property_id = int(button_id.replace("reviews_", ""))
        show_property_reviews(phone_number, property_id)
    elif button_id == "next_property":
        show_next_property(phone_number, profile)
    elif button_id == "prev_property":
        show_prev_property(phone_number, profile)
    elif button_id == "confirm_payment":
        handle_payment_confirmation(phone_number)
    elif button_id == "manual_payment":
        handle_manual_payment(phone_number)
    elif button_id == "cancel_booking":
        start_command_handler(phone_number)
    
    # Admin panel buttons
    elif button_id == "add_property":
        handle_add_property_start(phone_number, "–î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")
    elif button_id == "my_properties":
        show_admin_properties(phone_number)
    elif button_id == "statistics":
        show_detailed_statistics(phone_number)
    elif button_id == "manage_admins":
        show_super_admin_menu(phone_number)
    elif button_id == "all_statistics":
        show_extended_statistics(phone_number)
    elif button_id == "main_menu":
        start_command_handler(phone_number)
    
    # Statistics period buttons
    elif button_id == "stat_week":
        show_detailed_statistics(phone_number, "week")
    elif button_id == "stat_month":
        show_detailed_statistics(phone_number, "month")
    elif button_id == "stat_quarter":
        show_detailed_statistics(phone_number, "quarter")
    elif button_id == "stat_csv":
        export_statistics_csv(phone_number)
    
    # Admin add property workflow buttons
    elif button_id.startswith("admin_city_"):
        city_id = button_id.replace("admin_city_", "")
        try:
            city = City.objects.get(id=city_id)
            handle_add_property_start(phone_number, city.name)
        except City.DoesNotExist:
            logger.warning(f"City with id {city_id} not found")
    elif button_id.startswith("admin_district_"):
        district_id = button_id.replace("admin_district_", "")
        try:
            district = District.objects.get(id=district_id)
            handle_add_property_start(phone_number, district.name)
        except District.DoesNotExist:
            logger.warning(f"District with id {district_id} not found")
    elif button_id.startswith("admin_class_"):
        property_class = button_id.replace("admin_class_", "")
        class_names = {"economy": "–ö–æ–º—Ñ–æ—Ä—Ç", "business": "–ë–∏–∑–Ω–µ—Å", "luxury": "–ü—Ä–µ–º–∏—É–º"}
        class_display = class_names.get(property_class, property_class)
        handle_add_property_start(phone_number, class_display)
    elif button_id.startswith("admin_rooms_"):
        rooms = button_id.replace("admin_rooms_", "")
        room_display = "4+" if rooms == "4" else rooms
        handle_add_property_start(phone_number, room_display)
    
    # Photo upload buttons
    elif button_id == "photo_url":
        handle_add_property_start(phone_number, "URL —Ñ–æ—Ç–æ")
    elif button_id == "photo_upload":
        handle_add_property_start(phone_number, "–ó–∞–≥—Ä—É–∑–∏—Ç—å")
    elif button_id == "skip_photos":
        handle_add_property_start(phone_number, "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    
    # Super admin menu buttons
    elif button_id == "list_admins":
        # TODO: implement list_admins functionality
        send_whatsapp_message(phone_number, "üìã –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif button_id == "add_admin":
        # TODO: implement add_admin functionality
        send_whatsapp_message(phone_number, "‚ûï –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif button_id == "city_stats":
        # TODO: implement city_stats functionality
        send_whatsapp_message(phone_number, "üèôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif button_id == "general_stats":
        show_extended_statistics(phone_number)
    elif button_id == "revenue_report":
        # TODO: implement revenue_report functionality
        send_whatsapp_message(phone_number, "üí∞ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif button_id == "export_all":
        # TODO: implement export_all functionality
        send_whatsapp_message(phone_number, "üì• –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # Navigation menu buttons
    elif button_id == "new_search":
        start_command_handler(phone_number)
        prompt_city(phone_number, profile)
    elif button_id == "cancel":
        start_command_handler(phone_number)
    
    else:
        logger.warning(f"Unknown button_id: {button_id}")


@log_handler
def prompt_city(phone_number, profile):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    if profile.whatsapp_state is None:
        profile.whatsapp_state = {}

    profile.whatsapp_state.update({"state": STATE_SELECT_CITY})
    profile.save()

    cities = City.objects.all().order_by("name")

    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –º–∞–ª–æ (–¥–æ 10), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    if cities.count() <= 10:
        sections = [
            {
                "title": "–ì–æ—Ä–æ–¥–∞",
                "rows": [
                    {
                        "id": f"city_{city.id}",
                        "title": city.name[:24],  # –ú–∞–∫—Å–∏–º—É–º 24 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
                    }
                    for city in cities
                ],
            }
        ]

        send_whatsapp_list_message(
            phone_number,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä:",
            "–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥",
            sections,
            header="üèôÔ∏è –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞",
        )
