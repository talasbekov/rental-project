# booking_bot/whatsapp_bot/tasks.py

from celery import shared_task
from django.conf import settings
from datetime import datetime, timedelta
import logging

from booking_bot.bookings.models import Booking
from booking_bot.users.models import UserProfile
from .utils import send_whatsapp_message, send_whatsapp_button_message

logger = logging.getLogger(__name__)


@shared_task
def send_booking_reminder(booking_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∑–∞–µ–∑–¥–µ"""
    try:
        booking = Booking.objects.get(id=booking_id)
        profile = UserProfile.objects.filter(user=booking.user).first()

        if not profile or not profile.whatsapp_phone:
            logger.warning(f"No WhatsApp phone for booking {booking_id}")
            return

        days_until = (booking.start_date - datetime.now().date()).days

        text = (
            f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏*\n\n"
            f"–ß–µ—Ä–µ–∑ {days_until} –¥–Ω. —É –≤–∞—Å –∑–∞–µ–∑–¥:\n"
            f"üè† {booking.property.name}\n"
            f"üìÖ –ó–∞–µ–∑–¥: {booking.start_date.strftime('%d.%m.%Y')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {booking.property.address}\n"
        )

        if booking.property.digital_lock_code:
            text += f"\nüîê –ö–æ–¥ –æ—Ç –∑–∞–º–∫–∞: {booking.property.digital_lock_code}"

        buttons = [
            {"id": f"booking_details_{booking_id}", "title": "üìã –î–µ—Ç–∞–ª–∏"},
            {"id": "contact_owner", "title": "üìû –°–≤—è–∑–∞—Ç—å—Å—è"},
            {"id": "main_menu", "title": "üè† –ú–µ–Ω—é"}
        ]

        send_whatsapp_button_message(
            profile.whatsapp_phone,
            text,
            buttons,
            header="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        )

        logger.info(f"Sent booking reminder for {booking_id}")

    except Exception as e:
        logger.error(f"Error sending booking reminder: {e}")


@shared_task
def send_review_request(booking_id):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –≤—ã–µ–∑–¥–∞"""
    try:
        booking = Booking.objects.get(id=booking_id)
        profile = UserProfile.objects.filter(user=booking.user).first()

        if not profile or not profile.whatsapp_phone:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–µ–∑–¥ –±—ã–ª –≤—á–µ—Ä–∞
        if booking.end_date != datetime.now().date() - timedelta(days=1):
            return

        text = (
            f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\n"
            f"–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≤:\n"
            f"üè† {booking.property.name}\n\n"
            f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –≥–æ—Å—Ç—è–º!"
        )

        buttons = [
            {"id": f"leave_review_{booking_id}", "title": "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"},
            {"id": "skip_review", "title": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}
        ]

        send_whatsapp_button_message(
            profile.whatsapp_phone,
            text,
            buttons,
            header="–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ"
        )

    except Exception as e:
        logger.error(f"Error sending review request: {e}")


@shared_task
def notify_owner_new_booking(booking_id):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        booking = Booking.objects.select_related(
            'property__owner__profile'
        ).get(id=booking_id)

        owner_profile = booking.property.owner.profile
        if not owner_profile.whatsapp_phone:
            return

        text = (
            f"üéâ *–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!*\n\n"
            f"üè† {booking.property.name}\n"
            f"üë§ –ì–æ—Å—Ç—å: {booking.user.get_full_name() or booking.user.username}\n"
            f"üìÖ {booking.start_date.strftime('%d.%m')} - "
            f"{booking.end_date.strftime('%d.%m.%Y')}\n"
            f"üí∞ –°—É–º–º–∞: {booking.total_price:,.0f} ‚Ç∏\n"
        )

        if hasattr(booking.user, 'profile') and booking.user.profile.phone_number:
            text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking.user.profile.phone_number}"

        send_whatsapp_message(owner_profile.whatsapp_phone, text)

    except Exception as e:
        logger.error(f"Error notifying owner: {e}")


@shared_task
def send_payment_confirmation(booking_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""
    try:
        booking = Booking.objects.get(id=booking_id)
        profile = UserProfile.objects.filter(user=booking.user).first()

        if not profile or not profile.whatsapp_phone:
            return

        from .handlers import send_booking_confirmation
        send_booking_confirmation(profile.whatsapp_phone, booking)

    except Exception as e:
        logger.error(f"Error sending payment confirmation: {e}")


@shared_task
def check_expired_bookings():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    expired_time = datetime.now() - timedelta(minutes=15)

    expired_bookings = Booking.objects.filter(
        status='pending_payment',
        created_at__lt=expired_time
    )

    for booking in expired_bookings:
        booking.status = 'cancelled'
        booking.save()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = UserProfile.objects.filter(user=booking.user).first()
        if profile and profile.whatsapp_phone:
            send_whatsapp_message(
                profile.whatsapp_phone,
                f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.id} –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã.\n"
                f"–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
            )

        logger.info(f"Cancelled expired booking {booking.id}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –≤ settings.py:
# from celery.schedules import crontab
#
# CELERY_BEAT_SCHEDULE = {
#     'check-expired-bookings': {
#         'task': 'booking_bot.whatsapp_bot.tasks.check_expired_bookings',
#         'schedule': crontab(minute='*/5'),  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
#     },
#     'send-booking-reminders': {
#         'task': 'booking_bot.whatsapp_bot.tasks.send_daily_reminders',
#         'schedule': crontab(hour=10, minute=0),  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
#     },
# }
