services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data

  web:
    build: .
    command: >
      sh -c "
        # 1) Ждём, пока Postgres начнёт отвечать
        until pg_isready -h db -U \$${POSTGRES_USER}; do
          echo 'Waiting for database…';
          sleep 2;
        done &&
      
        # 2) Прогоним миграции и соберём статику
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
      
        # 3) Запустим Gunicorn с более высоким таймаутом и 3 воркерами
        exec gunicorn booking_bot.wsgi:application \
          --bind 0.0.0.0:8000 \
          --workers 3 \
          --timeout 120 \
          --access-logfile -
      "
    volumes:
      - .:/app
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - db

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  # Celery для фоновых задач (обработка платежей, уведомления)
  celery:
    build: .
    command: celery -A booking_bot worker -l info
    volumes:
      - .:/code
    env_file:
      - .env
    depends_on:
      - db
      - redis

  celery-beat:
    build: .
    command: celery -A booking_bot beat -l info
    volumes:
      - .:/code
    env_file:
      - .env
    depends_on:
      - db
      - redis

  minio:
    image: minio/minio
    command: server /data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    ports:
      - "9000:9000"
    volumes:
      - minio_data:/data

volumes:
  pgdata:
  minio_data:
