services:
  db:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 20s   # опционально: даём Postgres время на старт/инициализацию
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minio_access_key
      MINIO_ROOT_PASSWORD: minio_secret_key
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # одноразовый клиент: создаёт бакет и делает его публичным (для DEV)
  minio-mc:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      sh -c "
        mc alias set local http://minio:9000 ${S3_ACCESS_KEY:-minioadmin} ${S3_SECRET_KEY:-minioadmin} &&
        (mc ls local/${S3_BUCKET_NAME:-jgo-photos} >/dev/null 2>&1 || mc mb local/${S3_BUCKET_NAME:-jgo-photos}) &&
        mc anonymous set download local/${S3_BUCKET_NAME:-jgo-photos} ||
        true
      "
    restart: "no"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 5s
      timeout: 3s
      retries: 20

  web:
    build: .
    command: ["bash","-lc","until pg_isready -h db -U $POSTGRES_USER -d $POSTGRES_DB; do echo 'Waiting for database…'; sleep 2; done && python manage.py migrate --noinput && python manage.py collectstatic --noinput && exec gunicorn booking_bot.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120 --access-logfile -"]
    volumes:
      - .:/app
    env_file: .env
    environment:
      DJANGO_SETTINGS_MODULE: booking_bot.settings
      # Внутренние адреса для self-API
      API_BASE: http://web:8000/api/v1
      DJANGO_DOMAIN: http://web:8000
      SITE_URL: http://web:8000
      # Хосты/CSRF (чтобы self-call с host=web не падал)
      ALLOWED_HOSTS: web,localhost,127.0.0.1,jgo.kz,www.jgo.kz
      CSRF_TRUSTED_ORIGINS: http://web:8000,http://localhost:8000,https://jgo.kz,https://www.jgo.kz
      # S3/MinIO
      S3_ENABLED: "true"
      S3_ENDPOINT_URL: http://minio:9000
      S3_BUCKET_NAME: "${S3_BUCKET_NAME:-jgo-photos}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY:-minioadmin}"
      S3_SECRET_KEY: "${S3_SECRET_KEY:-minioadmin}"
      S3_REGION: us-east-1
      S3_ADDRESSING_STYLE: path
      S3_USE_SSL: "false"
      # Публичные ссылки: замените на внешний домен/поддомен MinIO (НЕ localhost)
      # Или используйте presigned URL в приложении.
      S3_PUBLIC_BASE: "https://minio.your-domain.kz/${S3_BUCKET_NAME:-jgo-photos}"
      # Redis для Django/Celery
      CELERY_BROKER_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://:${REDIS_PASSWORD}@redis:6379/1"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8000/healthz || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s


  celery:
    build: .
    command: celery -A booking_bot worker -l info
    volumes:
      - .:/app
    env_file: .env
    environment:
      S3_ENDPOINT_URL: "http://minio:9000"
      S3_BUCKET_NAME: "${S3_BUCKET_NAME:-jgo-photos}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY:-minioadmin}"
      S3_SECRET_KEY: "${S3_SECRET_KEY:-minioadmin}"
      S3_REGION: "us-east-1"
      S3_ADDRESSING_STYLE: "path"
      S3_USE_SSL: "false"
      S3_PUBLIC_BASE: "http://localhost:9000/${S3_BUCKET_NAME:-jgo-photos}"
      CELERY_BROKER_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://:${REDIS_PASSWORD}@redis:6379/1"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  celery-beat:
    build: .
    command: celery -A booking_bot beat -l info
    volumes:
      - .:/app
    env_file: .env
    environment:
      S3_ENDPOINT_URL: "http://minio:9000"
      S3_BUCKET_NAME: "${S3_BUCKET_NAME:-jgo-photos}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY:-minioadmin}"
      S3_SECRET_KEY: "${S3_SECRET_KEY:-minioadmin}"
      S3_REGION: "us-east-1"
      S3_ADDRESSING_STYLE: "path"
      S3_USE_SSL: "false"
      S3_PUBLIC_BASE: "http://localhost:9000/${S3_BUCKET_NAME:-jgo-photos}"
      CELERY_BROKER_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://:${REDIS_PASSWORD}@redis:6379/1"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

volumes:
  minio_data:
