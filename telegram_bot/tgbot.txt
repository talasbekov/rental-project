Чат-бот «ЖильеGO» — Посуточная аренда квартир: Техническое Задание

1. Пользовательский Сценарий (MVP)
    Цель: Разработать минимально жизнеспособный продукт (MVP) чат-бота для посуточной аренды квартир с фокусом на удобство и скорость бронирования.

    Приветствие:

        Текст: "Привет! Я ЖильеGO — помогу быстро найти и забронировать квартиру на сутки."
    Главное Меню (Кнопки):
        «Поиск квартир»
        «Мои бронирования»
        «Статус текущей брони»
        «Помощь»

2. Поиск Квартир (Пошаговый Фильтр)
    Последовательность шагов:

    Выбор города (Кнопки):
        Опции: Астана, Алматы, Шымкент.
    Выбор района (Кнопки):
        Динамический список: Подтягивается из базы данных (БД) в зависимости от выбранного города.
    Класс жилья (Кнопки):
        Опции: Комфорт / Бизнес / Премиум.
    Количество комнат (Кнопки):
        Опции: 1 / 2 / 3 / 4+.
    Примечание: Ценовой диапазон на этапе фильтрации не запрашивается.

3. Карточки Выдачи Результатов Поиска
    Формат карточки:

    Изображения: Шесть фотографий квартиры.
    Текст: Краткое описание, цена за сутки.
    Кнопки: «Забронировать», «Следующая».
    Сортировка: Карточки отображаются по возрастанию цены.
    Навигация:
        Последняя карточка: Дополнительные кнопки «К началу списка», «Новый поиск».
        Текст последней карточки: "Это была последняя квартира по выбранным параметрам."
        Возврат к фильтрам: Кнопка «Вернуться к фильтрам» доступна на каждой карточке.
    Пустая выдача:
        Текст: "По заданным параметрам ничего не нашлось, попробуйте изменить район или класс жилья."

4. Процесс Бронирования
    Этапы:
        Запрос дат и времени: Бот запрашивает даты и время заезда/выезда.
            По умолчанию (UX): Календарь автоматически подставляет «сегодня → завтра» для ускорения процесса.
        Подсчет стоимости: Расчет производится по формуле: цена за сутки × количество дней.
        Предложение оплаты: Кнопка «Оплатить Kaspi».
        Обработка ответа Kaspi:
            Если Kaspi = True (Оплата успешна):
                Вывод информации: Адрес (свободный формат), подъезд, этаж, код домофона, код сейфа/квартиры, телефон риелтора.
                Статус брони: Автоматически устанавливается на «Забронировано».
            Если Kaspi = False (Оплата не прошла):
                Вывод текста: "Оплата не прошла, бронь отменена."

5. Личный Кабинет
    Функционал:
        «Мои бронирования»: Отображает завершенные сделки.
        «Статус текущей брони»:
            Выводит все активные бронирования, которые были успешно оплачены.
            Включает дату выезда и кнопку «Детали».
        Автоматизация: После даты выезда, когда риелтор переводит квартиру в статус «Свободна», соответствующая запись автоматически перемещается в историю («Мои бронирования»).

6. Отзывы
    Функционал:
        На карточке квартиры: Отображается средний рейтинг и кнопка-счетчик отзывов.
        Просмотр отзывов:
            При нажатии на кнопку открывается список комментариев.
            Выводится по 10 отзывов за раз.
            Внизу списка доступна кнопка «Дальше» для перехода к следующей странице.
        Запрос отзыва после выезда:
            После даты выезда бот отправляет напоминание пользователю.
        Требуемая информация: Оценка по пятибалльной шкале, текстовый отзыв.
        Дополнительно: Пользователь может прикрепить собственные фотографии к отзыву.

7. Административный Контур
    Ввод данных:
        Для администраторов (риелторов): Возможность вводить данные внутри бота.
        Для суперпользователей: Ввод данных через Django админку.
    Управление данными:
        Каталог квартир (поля): 6 фотографий, описание, цена, класс, город, район, количество комнат, свободно введенный адрес, текущий статус.
        Статусы квартиры (жизненный цикл): «Свободна» → «Забронирована» → «Занята» → «Свободна».
    Логирование платежей: Система логирует ID платежей Kaspi и суммы.
    Безопасность:
        Коды домофонов/сейфов хранятся зашифровано.
        Доступ к зашифрованным кодам фиксируется в логах.

8. Статистика и Отчетность
    8.1. Роли и Доступ
        Админ (управляющий объектами): Видит данные только по «своим» квартирам.
        Суперадмин: Видит всё, плюс сводные разрезы по каждому админу.
    8.2. Метрики для Обеих Ролей (у админа — в пределах его портфеля)
        Доход по квартирам: за неделю, месяц, квартал, год.
        Кол-во бронирований и отмен: разбивка по причинам отмены («оплата не прошла», «передумал»).
        Время окупаемости: доля занятых ночей к доступным.
        ТОП-5 квартир: по обороту и по числу бронирований.
        ТОП-5 гостей: по сумме трат и по количеству заселений.
    8.3. Дополнительно для Суперадмина
        Таблица: «Админ → кол-во квартир / выручка».
            Просмотр любой квартиры «в разрезе времени»: heat-map занятости, кнопка «история цен».
        Экспорт: CSV/Excel.
        Дашборд: сравнение городов (если есть несколько локаций).
    8.4. Формы Представления
        В Telegram-боте: интерактивные кнопки:
            «Доход за период» → выбираем диапазон → бот присылает короткий отчёт + файл CSV.
            «ТОП квартир» → список с кнопками «Детали».
        В админ-панели Django: полноразмерные графики (Chart.js), фильтры по дате и администратору, кнопки «Скачать».
    8.5. Рекомендации по Улучшению
        Динамические уведомления: если загрузка квартиры падает < 40 % за последние 30 дней — бот шлёт админу совет «снизить цену или обновить фото».
        KO-фактор гостей: показывать процент отмен у пользователя; > 50 % — помечаем аккаунт, требуем предоплату.
        Авто-сводка раз в месяц: суперадмину приходит PDF-отчёт с диаграммами (доход, средняя цена, рейтинг).
        План-факт: возможность задать «цель выручки/загрузки» на квартиру и визуально видеть отклонения.